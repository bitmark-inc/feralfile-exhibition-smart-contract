// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package feralfilev2

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// FeralfileExhibitionV2MetaData contains all meta data concerning the FeralfileExhibitionV2 contract.
var FeralfileExhibitionV2MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxEditionPerArtwork_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondarySaleRoyaltyBPS_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltyPayoutAddress_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenBaseURI_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"}],\"name\":\"NewArtwork\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"editionID\",\"type\":\"uint256\"}],\"name\":\"NewArtworkEdition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_ROYALITY_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustee\",\"type\":\"address\"}],\"name\":\"addTrustee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artworkEditions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"editionID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsCID\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artworks\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artistName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fingerprint\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEditionPerArtwork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustee\",\"type\":\"address\"}],\"name\":\"removeTrustee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyPayoutAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondarySaleRoyaltyBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"trustees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fingerprint\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artistName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"}],\"name\":\"createArtwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalArtworks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getArtworkByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bitmarkID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"editionNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ipfsCID\",\"type\":\"string\"}],\"name\":\"swapArtworkFromBitmark\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsCID\",\"type\":\"string\"}],\"name\":\"updateArtworkEditionIPFSCid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"royaltyPayoutAddress_\",\"type\":\"address\"}],\"name\":\"setRoyaltyPayoutAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"}],\"name\":\"totalEditionOfArtwork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getArtworkEditionByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setTokenBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c06040523480156200001157600080fd5b50604051620033a5380380620033a5833981016040819052620000349162000370565b86866000620000448382620004de565b506001620000538282620004de565b505050620000706200006a6200023860201b60201c565b6200023c565b60008511620000fe5760405162461bcd60e51b815260206004820152604960248201527f6d617845646974696f6e206f66206561636820617274776f726b20696e20616e60448201527f2065786869626974696f6e206e6565647320746f2062652067726561746572206064820152687468616e207a65726f60b81b608482015260a4015b60405180910390fd5b612710841115620001905760405162461bcd60e51b815260206004820152604f60248201527f726f79616c74792042505320666f72207365636f6e646172792073616c65732060448201527f63616e206e6f742062652067726561746572207468616e20746865206d61786960648201526e6d756d20726f79616c74792042505360881b608482015260a401620000f5565b6001600160a01b038316620001e85760405162461bcd60e51b815260206004820152601e60248201527f696e76616c696420726f79616c7479207061796f7574206164647265737300006044820152606401620000f5565b608085905260a0849052600c80546001600160a01b0319166001600160a01b038516179055600e6200021b8382620004de565b50600d6200022a8282620004de565b5050505050505050620005aa565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620002b657600080fd5b81516001600160401b0380821115620002d357620002d36200028e565b604051601f8301601f19908116603f01168101908282118183101715620002fe57620002fe6200028e565b816040528381526020925086838588010111156200031b57600080fd5b600091505b838210156200033f578582018301518183018401529082019062000320565b600093810190920192909252949350505050565b80516001600160a01b03811681146200036b57600080fd5b919050565b600080600080600080600060e0888a0312156200038c57600080fd5b87516001600160401b0380821115620003a457600080fd5b620003b28b838c01620002a4565b985060208a0151915080821115620003c957600080fd5b620003d78b838c01620002a4565b975060408a0151965060608a01519550620003f560808b0162000353565b945060a08a01519150808211156200040c57600080fd5b6200041a8b838c01620002a4565b935060c08a01519150808211156200043157600080fd5b50620004408a828b01620002a4565b91505092959891949750929550565b600181811c908216806200046457607f821691505b6020821081036200048557634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004d957600081815260208120601f850160051c81016020861015620004b45750805b601f850160051c820191505b81811015620004d557828155600101620004c0565b5050505b505050565b81516001600160401b03811115620004fa57620004fa6200028e565b62000512816200050b84546200044f565b846200048b565b602080601f8311600181146200054a5760008415620005315750858301515b600019600386901b1c1916600185901b178555620004d5565b600085815260208120601f198616915b828110156200057b578886015182559484019460019091019084016200055a565b50858210156200059a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a051612dc7620005de600039600081816105490152610a1801526000818161044b0152610c610152612dc76000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c806370a082311161013b578063c87b56dd116100b8578063ea211d7c1161007c578063ea211d7c14610544578063ec9cbb441461056b578063eee608a414610574578063f2fde38b14610597578063fe2a3bf3146105aa57600080fd5b8063c87b56dd146104d2578063dc78ac1c146104e5578063e4a233e1146104f8578063e8a3d48514610500578063e985e9c51461050857600080fd5b80638ef79e91116100ff5780638ef79e911461047e57806395d89b4114610491578063a22cb46514610499578063b4883703146104ac578063b88d4fde146104bf57600080fd5b806370a0823114610418578063715018a61461042b5780637f34c0dd1461043357806384ad61af146104465780638da5cb5b1461046d57600080fd5b80632f745c59116101c95780634b6026731161018d5780634b6026731461039b5780634f6ccce7146103be57806362fe2131146103d15780636352211e146103f2578063641b18e91461040557600080fd5b80632f745c591461033c5780633afb021a1461034f5780633f6805ba1461036257806342842e0e1461037557806345aeefde1461038857600080fd5b8063095ea7b311610210578063095ea7b3146102bf5780630cfcb5f1146102d257806318160ddd146102e557806323b872dd146102f75780632a55205a1461030a57600080fd5b806301ffc9a714610242578063031205061461026a57806306fdde031461027f578063081812fc14610294575b600080fd5b6102556102503660046124c9565b6105ca565b60405190151581526020015b60405180910390f35b61027d610278366004612509565b6105f5565b005b61028761061e565b6040516102619190612574565b6102a76102a2366004612587565b6106b0565b6040516001600160a01b039091168152602001610261565b61027d6102cd3660046125a0565b6106d7565b61027d6102e0366004612676565b6107f1565b6008545b604051908152602001610261565b61027d6103053660046126bd565b61095f565b61031d6103183660046126f9565b610990565b604080516001600160a01b039093168352602083019190915201610261565b6102e961034a3660046125a0565b610a50565b61027d61035d36600461271b565b610ae6565b600c546102a7906001600160a01b031681565b61027d6103833660046126bd565b610e9f565b61027d610396366004612509565b610eba565b6103ae6103a9366004612587565b610f63565b60405161026194939291906127ab565b6102e96103cc366004612587565b611123565b6103e46103df366004612587565b6111b6565b6040516102619291906127f6565b6102a7610400366004612587565b61125b565b6102e96104133660046126f9565b6112bb565b6102e9610426366004612509565b611308565b61027d61138e565b61027d61044136600461280f565b6113a2565b6102e97f000000000000000000000000000000000000000000000000000000000000000081565b600a546001600160a01b03166102a7565b61027d61048c36600461287a565b61171a565b61028761175b565b61027d6104a73660046128af565b61176a565b6102e96104ba366004612587565b611775565b61027d6104cd3660046128eb565b6117ed565b6102876104e0366004612587565b61181f565b61027d6104f3366004612509565b611985565b600f546102e9565b6102876119b1565b610255610516366004612967565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6102e97f000000000000000000000000000000000000000000000000000000000000000081565b6102e961271081565b610255610582366004612509565b600b6020526000908152604090205460ff1681565b61027d6105a5366004612509565b6119c0565b6102e96105b8366004612587565b60009081526012602052604090205490565b60006001600160e01b0319821663780e9d6360e01b14806105ef57506105ef82611a39565b92915050565b6105fd611a5e565b6001600160a01b03166000908152600b60205260409020805460ff19169055565b60606000805461062d90612991565b80601f016020809104026020016040519081016040528092919081815260200182805461065990612991565b80156106a65780601f1061067b576101008083540402835291602001916106a6565b820191906000526020600020905b81548152906001019060200180831161068957829003601f168201915b5050505050905090565b60006106bb82611ab8565b506000908152600460205260409020546001600160a01b031690565b60006106e28261125b565b9050806001600160a01b0316836001600160a01b0316036107545760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061077057506107708133610516565b6107e25760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260840161074b565b6107ec8383611b08565b505050565b336000908152600b602052604090205460ff16806108195750600a546001600160a01b031633145b61082257600080fd5b61082b82611b76565b6108775760405162461bcd60e51b815260206004820152601c60248201527f617274776f726b2065646974696f6e206973206e6f7420666f756e6400000000604482015260640161074b565b60148160405161088791906129cb565b9081526040519081900360200190205460ff16156108e05760405162461bcd60e51b81526020600482015260166024820152751a5c199cc81a59081a185cc81c9959da5cdd195c995960521b604482015260640161074b565b600082815260116020526040908190209051601490610903906001840190612a5a565b908152604051908190036020018120805460ff1916905560019060149061092b9085906129cb565b908152604051908190036020019020805491151560ff19909216919091179055600181016109598382612ab4565b50505050565b6109693382611b93565b6109855760405162461bcd60e51b815260040161074b90612b74565b6107ec838383611c12565b60008061099c84611b76565b610a025760405162461bcd60e51b815260206004820152603160248201527f455243323938313a20717565727920726f79616c747920696e666f20666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b606482015260840161074b565b600c546001600160a01b03169150612710610a3d7f000000000000000000000000000000000000000000000000000000000000000085612bd7565b610a479190612bee565b90509250929050565b6000610a5b83611308565b8210610abd5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161074b565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b336000908152600b602052604090205460ff1680610b0e5750600a546001600160a01b031633145b610b1757600080fd5b8251600003610b615760405162461bcd60e51b81526020600482015260166024820152757469746c652063616e206e6f7420626520656d70747960501b604482015260640161074b565b8151600003610bb25760405162461bcd60e51b815260206004820152601760248201527f6172746973742063616e206e6f7420626520656d707479000000000000000000604482015260640161074b565b8351600003610c035760405162461bcd60e51b815260206004820152601c60248201527f66696e6765727072696e742063616e206e6f7420626520656d70747900000000604482015260640161074b565b60008111610c5f5760405162461bcd60e51b815260206004820152602360248201527f65646974696f6e2073697a65206e6565647320746f206265206174206c65617360448201526274203160e81b606482015260840161074b565b7f0000000000000000000000000000000000000000000000000000000000000000811115610d055760405162461bcd60e51b815260206004820152604760248201527f617274776f726b2065646974696f6e2073697a6520657863656564732074686560448201527f206d6178696d756d2065646974696f6e2073697a65206f66207468652065786860648201526634b134ba34b7b760c91b608482015260a40161074b565b600084604051602001610d189190612574565b60408051601f198184030181529181528151602092830120600081815260109093529120600201805491925090610d4e90612991565b159050610dc35760405162461bcd60e51b815260206004820152603b60248201527f616e20617274776f726b2077697468207468652073616d652066696e6765727060448201527f72696e742068617320616c726561647920726567697374657265640000000000606482015260840161074b565b60408051608081018252858152602080820186905281830188905260608201859052600f8054600181019091557f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80201849055600084815260109091529190912081518291908190610e349082612ab4565b5060208201516001820190610e499082612ab4565b5060408201516002820190610e5e9082612ab4565b506060919091015160039091015560405182907f22350b25f1b72bb3621199a79abefeb4fcd77bb1e65638cd09350666e4db089190600090a2505050505050565b6107ec838383604051806020016040528060008152506117ed565b336000908152600b602052604090205460ff1680610ee25750600a546001600160a01b031633145b610eeb57600080fd5b6001600160a01b038116610f415760405162461bcd60e51b815260206004820152601e60248201527f696e76616c696420726f79616c7479207061796f757420616464726573730000604482015260640161074b565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b601060205260009081526040902080548190610f7e90612991565b80601f0160208091040260200160405190810160405280929190818152602001828054610faa90612991565b8015610ff75780601f10610fcc57610100808354040283529160200191610ff7565b820191906000526020600020905b815481529060010190602001808311610fda57829003601f168201915b50505050509080600101805461100c90612991565b80601f016020809104026020016040519081016040528092919081815260200182805461103890612991565b80156110855780601f1061105a57610100808354040283529160200191611085565b820191906000526020600020905b81548152906001019060200180831161106857829003601f168201915b50505050509080600201805461109a90612991565b80601f01602080910402602001604051908101604052809291908181526020018280546110c690612991565b80156111135780601f106110e857610100808354040283529160200191611113565b820191906000526020600020905b8154815290600101906020018083116110f657829003601f168201915b5050505050908060030154905084565b600061112e60085490565b82106111915760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161074b565b600882815481106111a4576111a4612c10565b90600052602060002001549050919050565b601160205260009081526040902080546001820180549192916111d890612991565b80601f016020809104026020016040519081016040528092919081815260200182805461120490612991565b80156112515780601f1061122657610100808354040283529160200191611251565b820191906000526020600020905b81548152906001019060200180831161123457829003601f168201915b5050505050905082565b6000818152600260205260408120546001600160a01b0316806105ef5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161074b565b60008281526012602052604081205482106112d557600080fd5b60008381526012602052604090208054839081106112f5576112f5612c10565b9060005260206000200154905092915050565b60006001600160a01b0382166113725760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161074b565b506001600160a01b031660009081526003602052604090205490565b611396611a5e565b6113a06000611d83565b565b336000908152600b602052604090205460ff16806113ca5750600a546001600160a01b031633145b6113d357600080fd5b6000858152601060205260409020600301546114285760405162461bcd60e51b8152602060048201526014602482015273185c9d1ddbdc9ac81a5cc81b9bdd08199bdd5b9960621b604482015260640161074b565b6000858152601060205260409020600301548311156114a75760405162461bcd60e51b815260206004820152603560248201527f65646974696f6e206e756d62657220657863656564207468652065646974696f6044820152746e2073697a65206f662074686520617274776f726b60581b606482015260840161074b565b6001600160a01b0382166114f55760405162461bcd60e51b8152602060048201526015602482015274696e76616c6964206f776e6572206164647265737360581b604482015260640161074b565b60008481526013602052604090205460ff16156115545760405162461bcd60e51b815260206004820152601960248201527f6269746d61726b20696420686173207265676973746572656400000000000000604482015260640161074b565b60148160405161156491906129cb565b9081526040519081900360200190205460ff16156115bd5760405162461bcd60e51b81526020600482015260166024820152751a5c199cc81a59081a185cc81c9959da5cdd195c995960521b604482015260640161074b565b60006115c98487612c26565b600081815260116020526040902054909150156116285760405162461bcd60e51b815260206004820152601760248201527f7468652065646974696f6e206973206578697374656e74000000000000000000604482015260640161074b565b6040805180820182528281526020808201858152600085815260119092529290208151815591519091829160018201906116629082612ab4565b505050600087815260126020908152604080832080546001818101835591855283852001869055898452601390925291829020805460ff19168217905590516014906116af9086906129cb565b908152604051908190036020019020805491151560ff199092169190911790556116d98483611dd5565b8187856001600160a01b03167f4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd460405160405180910390a450505050505050565b336000908152600b602052604090205460ff16806117425750600a546001600160a01b031633145b61174b57600080fd5b600d6117578282612ab4565b5050565b60606001805461062d90612991565b611757338383611def565b6000611780600f5490565b82106117da5760405162461bcd60e51b8152602060048201526024808201527f617274776f726b733a20676c6f62616c20696e646578206f7574206f6620626f604482015263756e647360e01b606482015260840161074b565b600f82815481106111a4576111a4612c10565b6117f73383611b93565b6118135760405162461bcd60e51b815260040161074b90612b74565b61095984848484611ebd565b606061182a82611b76565b61188e5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161074b565b6000600d805461189d90612991565b80601f01602080910402602001604051908101604052809291908181526020018280546118c990612991565b80156119165780601f106118eb57610100808354040283529160200191611916565b820191906000526020600020905b8154815290600101906020018083116118f957829003601f168201915b5050505050905080516000036119465750604080518082019091526007815266697066733a2f2f60c81b60208201525b806011600085815260200190815260200160002060010160405160200161196e929190612c39565b604051602081830303815290604052915050919050565b61198d611a5e565b6001600160a01b03166000908152600b60205260409020805460ff19166001179055565b6060600e805461062d90612991565b6119c8611a5e565b6001600160a01b038116611a2d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161074b565b611a3681611d83565b50565b60006001600160e01b0319821663780e9d6360e01b14806105ef57506105ef82611ef0565b600a546001600160a01b031633146113a05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161074b565b611ac181611b76565b611a365760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161074b565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611b3d8261125b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000908152600260205260409020546001600160a01b0316151590565b600080611b9f8361125b565b9050806001600160a01b0316846001600160a01b03161480611be657506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80611c0a5750836001600160a01b0316611bff846106b0565b6001600160a01b0316145b949350505050565b826001600160a01b0316611c258261125b565b6001600160a01b031614611c4b5760405162461bcd60e51b815260040161074b90612c77565b6001600160a01b038216611cad5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161074b565b611cba8383836001611f40565b826001600160a01b0316611ccd8261125b565b6001600160a01b031614611cf35760405162461bcd60e51b815260040161074b90612c77565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611757828260405180602001604052806000815250612074565b816001600160a01b0316836001600160a01b031603611e505760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161074b565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611ec8848484611c12565b611ed4848484846120a7565b6109595760405162461bcd60e51b815260040161074b90612cbc565b60006001600160e01b031982166380ac58cd60e01b1480611f2157506001600160e01b03198216635b5e139f60e01b145b806105ef57506301ffc9a760e01b6001600160e01b03198316146105ef565b6001811115611faf5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b606482015260840161074b565b816001600160a01b03851661200b5761200681600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61202e565b836001600160a01b0316856001600160a01b03161461202e5761202e85826121a8565b6001600160a01b03841661204a5761204581612245565b61206d565b846001600160a01b0316846001600160a01b03161461206d5761206d84826122f4565b5050505050565b61207e8383612338565b61208b60008484846120a7565b6107ec5760405162461bcd60e51b815260040161074b90612cbc565b60006001600160a01b0384163b1561219d57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906120eb903390899088908890600401612d0e565b6020604051808303816000875af1925050508015612126575060408051601f3d908101601f1916820190925261212391810190612d4b565b60015b612183573d808015612154576040519150601f19603f3d011682016040523d82523d6000602084013e612159565b606091505b50805160000361217b5760405162461bcd60e51b815260040161074b90612cbc565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611c0a565b506001949350505050565b600060016121b584611308565b6121bf9190612d68565b600083815260076020526040902054909150808214612212576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061225790600190612d68565b6000838152600960205260408120546008805493945090928490811061227f5761227f612c10565b9060005260206000200154905080600883815481106122a0576122a0612c10565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806122d8576122d8612d7b565b6001900381819060005260206000200160009055905550505050565b60006122ff83611308565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b03821661238e5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161074b565b61239781611b76565b156123e45760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161074b565b6123f2600083836001611f40565b6123fb81611b76565b156124485760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161074b565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b031981168114611a3657600080fd5b6000602082840312156124db57600080fd5b81356124e6816124b3565b9392505050565b80356001600160a01b038116811461250457600080fd5b919050565b60006020828403121561251b57600080fd5b6124e6826124ed565b60005b8381101561253f578181015183820152602001612527565b50506000910152565b60008151808452612560816020860160208601612524565b601f01601f19169290920160200192915050565b6020815260006124e66020830184612548565b60006020828403121561259957600080fd5b5035919050565b600080604083850312156125b357600080fd5b6125bc836124ed565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156125fb576125fb6125ca565b604051601f8501601f19908116603f01168101908282118183101715612623576126236125ca565b8160405280935085815286868601111561263c57600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261266757600080fd5b6124e6838335602085016125e0565b6000806040838503121561268957600080fd5b82359150602083013567ffffffffffffffff8111156126a757600080fd5b6126b385828601612656565b9150509250929050565b6000806000606084860312156126d257600080fd5b6126db846124ed565b92506126e9602085016124ed565b9150604084013590509250925092565b6000806040838503121561270c57600080fd5b50508035926020909101359150565b6000806000806080858703121561273157600080fd5b843567ffffffffffffffff8082111561274957600080fd5b61275588838901612656565b9550602087013591508082111561276b57600080fd5b61277788838901612656565b9450604087013591508082111561278d57600080fd5b5061279a87828801612656565b949793965093946060013593505050565b6080815260006127be6080830187612548565b82810360208401526127d08187612548565b905082810360408401526127e48186612548565b91505082606083015295945050505050565b828152604060208201526000611c0a6040830184612548565b600080600080600060a0868803121561282757600080fd5b853594506020860135935060408601359250612845606087016124ed565b9150608086013567ffffffffffffffff81111561286157600080fd5b61286d88828901612656565b9150509295509295909350565b60006020828403121561288c57600080fd5b813567ffffffffffffffff8111156128a357600080fd5b611c0a84828501612656565b600080604083850312156128c257600080fd5b6128cb836124ed565b9150602083013580151581146128e057600080fd5b809150509250929050565b6000806000806080858703121561290157600080fd5b61290a856124ed565b9350612918602086016124ed565b925060408501359150606085013567ffffffffffffffff81111561293b57600080fd5b8501601f8101871361294c57600080fd5b61295b878235602084016125e0565b91505092959194509250565b6000806040838503121561297a57600080fd5b612983836124ed565b9150610a47602084016124ed565b600181811c908216806129a557607f821691505b6020821081036129c557634e487b7160e01b600052602260045260246000fd5b50919050565b600082516129dd818460208701612524565b9190910192915050565b600081546129f481612991565b60018281168015612a0c5760018114612a2157612a50565b60ff1984168752821515830287019450612a50565b8560005260208060002060005b85811015612a475781548a820152908401908201612a2e565b50505082870194505b5050505092915050565b60006124e682846129e7565b601f8211156107ec57600081815260208120601f850160051c81016020861015612a8d5750805b601f850160051c820191505b81811015612aac57828155600101612a99565b505050505050565b815167ffffffffffffffff811115612ace57612ace6125ca565b612ae281612adc8454612991565b84612a66565b602080601f831160018114612b175760008415612aff5750858301515b600019600386901b1c1916600185901b178555612aac565b600085815260208120601f198616915b82811015612b4657888601518255948401946001909101908401612b27565b5085821015612b645787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176105ef576105ef612bc1565b600082612c0b57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b808201808211156105ef576105ef612bc1565b60008351612c4b818460208801612524565b612c57818401856129e7565b6d17b6b2ba30b230ba30973539b7b760911b8152600e0195945050505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612d4190830184612548565b9695505050505050565b600060208284031215612d5d57600080fd5b81516124e6816124b3565b818103818111156105ef576105ef612bc1565b634e487b7160e01b600052603160045260246000fdfea26469706673582212206648b4553dfe39caf28e04104a4a84ba7b1f0302fdbf20371d1c7d4ec8fcfcae64736f6c63430008110033",
}

// FeralfileExhibitionV2ABI is the input ABI used to generate the binding from.
// Deprecated: Use FeralfileExhibitionV2MetaData.ABI instead.
var FeralfileExhibitionV2ABI = FeralfileExhibitionV2MetaData.ABI

// FeralfileExhibitionV2Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FeralfileExhibitionV2MetaData.Bin instead.
var FeralfileExhibitionV2Bin = FeralfileExhibitionV2MetaData.Bin

// DeployFeralfileExhibitionV2 deploys a new Ethereum contract, binding an instance of FeralfileExhibitionV2 to it.
func DeployFeralfileExhibitionV2(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string, maxEditionPerArtwork_ *big.Int, secondarySaleRoyaltyBPS_ *big.Int, royaltyPayoutAddress_ common.Address, contractURI_ string, tokenBaseURI_ string) (common.Address, *types.Transaction, *FeralfileExhibitionV2, error) {
	parsed, err := FeralfileExhibitionV2MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FeralfileExhibitionV2Bin), backend, name_, symbol_, maxEditionPerArtwork_, secondarySaleRoyaltyBPS_, royaltyPayoutAddress_, contractURI_, tokenBaseURI_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FeralfileExhibitionV2{FeralfileExhibitionV2Caller: FeralfileExhibitionV2Caller{contract: contract}, FeralfileExhibitionV2Transactor: FeralfileExhibitionV2Transactor{contract: contract}, FeralfileExhibitionV2Filterer: FeralfileExhibitionV2Filterer{contract: contract}}, nil
}

// FeralfileExhibitionV2 is an auto generated Go binding around an Ethereum contract.
type FeralfileExhibitionV2 struct {
	FeralfileExhibitionV2Caller     // Read-only binding to the contract
	FeralfileExhibitionV2Transactor // Write-only binding to the contract
	FeralfileExhibitionV2Filterer   // Log filterer for contract events
}

// FeralfileExhibitionV2Caller is an auto generated read-only Go binding around an Ethereum contract.
type FeralfileExhibitionV2Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeralfileExhibitionV2Transactor is an auto generated write-only Go binding around an Ethereum contract.
type FeralfileExhibitionV2Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeralfileExhibitionV2Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FeralfileExhibitionV2Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeralfileExhibitionV2Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FeralfileExhibitionV2Session struct {
	Contract     *FeralfileExhibitionV2 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// FeralfileExhibitionV2CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FeralfileExhibitionV2CallerSession struct {
	Contract *FeralfileExhibitionV2Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// FeralfileExhibitionV2TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FeralfileExhibitionV2TransactorSession struct {
	Contract     *FeralfileExhibitionV2Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// FeralfileExhibitionV2Raw is an auto generated low-level Go binding around an Ethereum contract.
type FeralfileExhibitionV2Raw struct {
	Contract *FeralfileExhibitionV2 // Generic contract binding to access the raw methods on
}

// FeralfileExhibitionV2CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FeralfileExhibitionV2CallerRaw struct {
	Contract *FeralfileExhibitionV2Caller // Generic read-only contract binding to access the raw methods on
}

// FeralfileExhibitionV2TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FeralfileExhibitionV2TransactorRaw struct {
	Contract *FeralfileExhibitionV2Transactor // Generic write-only contract binding to access the raw methods on
}

// NewFeralfileExhibitionV2 creates a new instance of FeralfileExhibitionV2, bound to a specific deployed contract.
func NewFeralfileExhibitionV2(address common.Address, backend bind.ContractBackend) (*FeralfileExhibitionV2, error) {
	contract, err := bindFeralfileExhibitionV2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2{FeralfileExhibitionV2Caller: FeralfileExhibitionV2Caller{contract: contract}, FeralfileExhibitionV2Transactor: FeralfileExhibitionV2Transactor{contract: contract}, FeralfileExhibitionV2Filterer: FeralfileExhibitionV2Filterer{contract: contract}}, nil
}

// NewFeralfileExhibitionV2Caller creates a new read-only instance of FeralfileExhibitionV2, bound to a specific deployed contract.
func NewFeralfileExhibitionV2Caller(address common.Address, caller bind.ContractCaller) (*FeralfileExhibitionV2Caller, error) {
	contract, err := bindFeralfileExhibitionV2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2Caller{contract: contract}, nil
}

// NewFeralfileExhibitionV2Transactor creates a new write-only instance of FeralfileExhibitionV2, bound to a specific deployed contract.
func NewFeralfileExhibitionV2Transactor(address common.Address, transactor bind.ContractTransactor) (*FeralfileExhibitionV2Transactor, error) {
	contract, err := bindFeralfileExhibitionV2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2Transactor{contract: contract}, nil
}

// NewFeralfileExhibitionV2Filterer creates a new log filterer instance of FeralfileExhibitionV2, bound to a specific deployed contract.
func NewFeralfileExhibitionV2Filterer(address common.Address, filterer bind.ContractFilterer) (*FeralfileExhibitionV2Filterer, error) {
	contract, err := bindFeralfileExhibitionV2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2Filterer{contract: contract}, nil
}

// bindFeralfileExhibitionV2 binds a generic wrapper to an already deployed contract.
func bindFeralfileExhibitionV2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := FeralfileExhibitionV2MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeralfileExhibitionV2.Contract.FeralfileExhibitionV2Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.FeralfileExhibitionV2Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.FeralfileExhibitionV2Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeralfileExhibitionV2.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.contract.Transact(opts, method, params...)
}

// MAXROYALITYBPS is a free data retrieval call binding the contract method 0xec9cbb44.
//
// Solidity: function MAX_ROYALITY_BPS() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) MAXROYALITYBPS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "MAX_ROYALITY_BPS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXROYALITYBPS is a free data retrieval call binding the contract method 0xec9cbb44.
//
// Solidity: function MAX_ROYALITY_BPS() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) MAXROYALITYBPS() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.MAXROYALITYBPS(&_FeralfileExhibitionV2.CallOpts)
}

// MAXROYALITYBPS is a free data retrieval call binding the contract method 0xec9cbb44.
//
// Solidity: function MAX_ROYALITY_BPS() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) MAXROYALITYBPS() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.MAXROYALITYBPS(&_FeralfileExhibitionV2.CallOpts)
}

// ArtworkEditions is a free data retrieval call binding the contract method 0x62fe2131.
//
// Solidity: function artworkEditions(uint256 ) view returns(uint256 editionID, string ipfsCID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) ArtworkEditions(opts *bind.CallOpts, arg0 *big.Int) (struct {
	EditionID *big.Int
	IpfsCID   string
}, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "artworkEditions", arg0)

	outstruct := new(struct {
		EditionID *big.Int
		IpfsCID   string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.EditionID = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.IpfsCID = *abi.ConvertType(out[1], new(string)).(*string)

	return *outstruct, err

}

// ArtworkEditions is a free data retrieval call binding the contract method 0x62fe2131.
//
// Solidity: function artworkEditions(uint256 ) view returns(uint256 editionID, string ipfsCID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) ArtworkEditions(arg0 *big.Int) (struct {
	EditionID *big.Int
	IpfsCID   string
}, error) {
	return _FeralfileExhibitionV2.Contract.ArtworkEditions(&_FeralfileExhibitionV2.CallOpts, arg0)
}

// ArtworkEditions is a free data retrieval call binding the contract method 0x62fe2131.
//
// Solidity: function artworkEditions(uint256 ) view returns(uint256 editionID, string ipfsCID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) ArtworkEditions(arg0 *big.Int) (struct {
	EditionID *big.Int
	IpfsCID   string
}, error) {
	return _FeralfileExhibitionV2.Contract.ArtworkEditions(&_FeralfileExhibitionV2.CallOpts, arg0)
}

// Artworks is a free data retrieval call binding the contract method 0x4b602673.
//
// Solidity: function artworks(uint256 ) view returns(string title, string artistName, string fingerprint, uint256 editionSize)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) Artworks(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Title       string
	ArtistName  string
	Fingerprint string
	EditionSize *big.Int
}, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "artworks", arg0)

	outstruct := new(struct {
		Title       string
		ArtistName  string
		Fingerprint string
		EditionSize *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Title = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.ArtistName = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Fingerprint = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.EditionSize = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Artworks is a free data retrieval call binding the contract method 0x4b602673.
//
// Solidity: function artworks(uint256 ) view returns(string title, string artistName, string fingerprint, uint256 editionSize)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) Artworks(arg0 *big.Int) (struct {
	Title       string
	ArtistName  string
	Fingerprint string
	EditionSize *big.Int
}, error) {
	return _FeralfileExhibitionV2.Contract.Artworks(&_FeralfileExhibitionV2.CallOpts, arg0)
}

// Artworks is a free data retrieval call binding the contract method 0x4b602673.
//
// Solidity: function artworks(uint256 ) view returns(string title, string artistName, string fingerprint, uint256 editionSize)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) Artworks(arg0 *big.Int) (struct {
	Title       string
	ArtistName  string
	Fingerprint string
	EditionSize *big.Int
}, error) {
	return _FeralfileExhibitionV2.Contract.Artworks(&_FeralfileExhibitionV2.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) BalanceOf(owner common.Address) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.BalanceOf(&_FeralfileExhibitionV2.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.BalanceOf(&_FeralfileExhibitionV2.CallOpts, owner)
}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) ContractURI(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "contractURI")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) ContractURI() (string, error) {
	return _FeralfileExhibitionV2.Contract.ContractURI(&_FeralfileExhibitionV2.CallOpts)
}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) ContractURI() (string, error) {
	return _FeralfileExhibitionV2.Contract.ContractURI(&_FeralfileExhibitionV2.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.GetApproved(&_FeralfileExhibitionV2.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.GetApproved(&_FeralfileExhibitionV2.CallOpts, tokenId)
}

// GetArtworkByIndex is a free data retrieval call binding the contract method 0xb4883703.
//
// Solidity: function getArtworkByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) GetArtworkByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "getArtworkByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetArtworkByIndex is a free data retrieval call binding the contract method 0xb4883703.
//
// Solidity: function getArtworkByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) GetArtworkByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.GetArtworkByIndex(&_FeralfileExhibitionV2.CallOpts, index)
}

// GetArtworkByIndex is a free data retrieval call binding the contract method 0xb4883703.
//
// Solidity: function getArtworkByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) GetArtworkByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.GetArtworkByIndex(&_FeralfileExhibitionV2.CallOpts, index)
}

// GetArtworkEditionByIndex is a free data retrieval call binding the contract method 0x641b18e9.
//
// Solidity: function getArtworkEditionByIndex(uint256 artworkID, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) GetArtworkEditionByIndex(opts *bind.CallOpts, artworkID *big.Int, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "getArtworkEditionByIndex", artworkID, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetArtworkEditionByIndex is a free data retrieval call binding the contract method 0x641b18e9.
//
// Solidity: function getArtworkEditionByIndex(uint256 artworkID, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) GetArtworkEditionByIndex(artworkID *big.Int, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.GetArtworkEditionByIndex(&_FeralfileExhibitionV2.CallOpts, artworkID, index)
}

// GetArtworkEditionByIndex is a free data retrieval call binding the contract method 0x641b18e9.
//
// Solidity: function getArtworkEditionByIndex(uint256 artworkID, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) GetArtworkEditionByIndex(artworkID *big.Int, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.GetArtworkEditionByIndex(&_FeralfileExhibitionV2.CallOpts, artworkID, index)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _FeralfileExhibitionV2.Contract.IsApprovedForAll(&_FeralfileExhibitionV2.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _FeralfileExhibitionV2.Contract.IsApprovedForAll(&_FeralfileExhibitionV2.CallOpts, owner, operator)
}

// MaxEditionPerArtwork is a free data retrieval call binding the contract method 0x84ad61af.
//
// Solidity: function maxEditionPerArtwork() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) MaxEditionPerArtwork(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "maxEditionPerArtwork")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxEditionPerArtwork is a free data retrieval call binding the contract method 0x84ad61af.
//
// Solidity: function maxEditionPerArtwork() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) MaxEditionPerArtwork() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.MaxEditionPerArtwork(&_FeralfileExhibitionV2.CallOpts)
}

// MaxEditionPerArtwork is a free data retrieval call binding the contract method 0x84ad61af.
//
// Solidity: function maxEditionPerArtwork() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) MaxEditionPerArtwork() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.MaxEditionPerArtwork(&_FeralfileExhibitionV2.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) Name() (string, error) {
	return _FeralfileExhibitionV2.Contract.Name(&_FeralfileExhibitionV2.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) Name() (string, error) {
	return _FeralfileExhibitionV2.Contract.Name(&_FeralfileExhibitionV2.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) Owner() (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.Owner(&_FeralfileExhibitionV2.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) Owner() (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.Owner(&_FeralfileExhibitionV2.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.OwnerOf(&_FeralfileExhibitionV2.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.OwnerOf(&_FeralfileExhibitionV2.CallOpts, tokenId)
}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 tokenId, uint256 salePrice) view returns(address receiver, uint256 royaltyAmount)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) RoyaltyInfo(opts *bind.CallOpts, tokenId *big.Int, salePrice *big.Int) (struct {
	Receiver      common.Address
	RoyaltyAmount *big.Int
}, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "royaltyInfo", tokenId, salePrice)

	outstruct := new(struct {
		Receiver      common.Address
		RoyaltyAmount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Receiver = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.RoyaltyAmount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 tokenId, uint256 salePrice) view returns(address receiver, uint256 royaltyAmount)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) RoyaltyInfo(tokenId *big.Int, salePrice *big.Int) (struct {
	Receiver      common.Address
	RoyaltyAmount *big.Int
}, error) {
	return _FeralfileExhibitionV2.Contract.RoyaltyInfo(&_FeralfileExhibitionV2.CallOpts, tokenId, salePrice)
}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 tokenId, uint256 salePrice) view returns(address receiver, uint256 royaltyAmount)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) RoyaltyInfo(tokenId *big.Int, salePrice *big.Int) (struct {
	Receiver      common.Address
	RoyaltyAmount *big.Int
}, error) {
	return _FeralfileExhibitionV2.Contract.RoyaltyInfo(&_FeralfileExhibitionV2.CallOpts, tokenId, salePrice)
}

// RoyaltyPayoutAddress is a free data retrieval call binding the contract method 0x3f6805ba.
//
// Solidity: function royaltyPayoutAddress() view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) RoyaltyPayoutAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "royaltyPayoutAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RoyaltyPayoutAddress is a free data retrieval call binding the contract method 0x3f6805ba.
//
// Solidity: function royaltyPayoutAddress() view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) RoyaltyPayoutAddress() (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.RoyaltyPayoutAddress(&_FeralfileExhibitionV2.CallOpts)
}

// RoyaltyPayoutAddress is a free data retrieval call binding the contract method 0x3f6805ba.
//
// Solidity: function royaltyPayoutAddress() view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) RoyaltyPayoutAddress() (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.RoyaltyPayoutAddress(&_FeralfileExhibitionV2.CallOpts)
}

// SecondarySaleRoyaltyBPS is a free data retrieval call binding the contract method 0xea211d7c.
//
// Solidity: function secondarySaleRoyaltyBPS() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) SecondarySaleRoyaltyBPS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "secondarySaleRoyaltyBPS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SecondarySaleRoyaltyBPS is a free data retrieval call binding the contract method 0xea211d7c.
//
// Solidity: function secondarySaleRoyaltyBPS() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) SecondarySaleRoyaltyBPS() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.SecondarySaleRoyaltyBPS(&_FeralfileExhibitionV2.CallOpts)
}

// SecondarySaleRoyaltyBPS is a free data retrieval call binding the contract method 0xea211d7c.
//
// Solidity: function secondarySaleRoyaltyBPS() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) SecondarySaleRoyaltyBPS() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.SecondarySaleRoyaltyBPS(&_FeralfileExhibitionV2.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _FeralfileExhibitionV2.Contract.SupportsInterface(&_FeralfileExhibitionV2.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _FeralfileExhibitionV2.Contract.SupportsInterface(&_FeralfileExhibitionV2.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) Symbol() (string, error) {
	return _FeralfileExhibitionV2.Contract.Symbol(&_FeralfileExhibitionV2.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) Symbol() (string, error) {
	return _FeralfileExhibitionV2.Contract.Symbol(&_FeralfileExhibitionV2.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TokenByIndex(&_FeralfileExhibitionV2.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TokenByIndex(&_FeralfileExhibitionV2.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TokenOfOwnerByIndex(&_FeralfileExhibitionV2.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TokenOfOwnerByIndex(&_FeralfileExhibitionV2.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) TokenURI(tokenId *big.Int) (string, error) {
	return _FeralfileExhibitionV2.Contract.TokenURI(&_FeralfileExhibitionV2.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _FeralfileExhibitionV2.Contract.TokenURI(&_FeralfileExhibitionV2.CallOpts, tokenId)
}

// TotalArtworks is a free data retrieval call binding the contract method 0xe4a233e1.
//
// Solidity: function totalArtworks() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) TotalArtworks(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "totalArtworks")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalArtworks is a free data retrieval call binding the contract method 0xe4a233e1.
//
// Solidity: function totalArtworks() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) TotalArtworks() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TotalArtworks(&_FeralfileExhibitionV2.CallOpts)
}

// TotalArtworks is a free data retrieval call binding the contract method 0xe4a233e1.
//
// Solidity: function totalArtworks() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) TotalArtworks() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TotalArtworks(&_FeralfileExhibitionV2.CallOpts)
}

// TotalEditionOfArtwork is a free data retrieval call binding the contract method 0xfe2a3bf3.
//
// Solidity: function totalEditionOfArtwork(uint256 artworkID) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) TotalEditionOfArtwork(opts *bind.CallOpts, artworkID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "totalEditionOfArtwork", artworkID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalEditionOfArtwork is a free data retrieval call binding the contract method 0xfe2a3bf3.
//
// Solidity: function totalEditionOfArtwork(uint256 artworkID) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) TotalEditionOfArtwork(artworkID *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TotalEditionOfArtwork(&_FeralfileExhibitionV2.CallOpts, artworkID)
}

// TotalEditionOfArtwork is a free data retrieval call binding the contract method 0xfe2a3bf3.
//
// Solidity: function totalEditionOfArtwork(uint256 artworkID) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) TotalEditionOfArtwork(artworkID *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TotalEditionOfArtwork(&_FeralfileExhibitionV2.CallOpts, artworkID)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) TotalSupply() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TotalSupply(&_FeralfileExhibitionV2.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) TotalSupply() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TotalSupply(&_FeralfileExhibitionV2.CallOpts)
}

// Trustees is a free data retrieval call binding the contract method 0xeee608a4.
//
// Solidity: function trustees(address ) view returns(bool)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) Trustees(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "trustees", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Trustees is a free data retrieval call binding the contract method 0xeee608a4.
//
// Solidity: function trustees(address ) view returns(bool)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) Trustees(arg0 common.Address) (bool, error) {
	return _FeralfileExhibitionV2.Contract.Trustees(&_FeralfileExhibitionV2.CallOpts, arg0)
}

// Trustees is a free data retrieval call binding the contract method 0xeee608a4.
//
// Solidity: function trustees(address ) view returns(bool)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) Trustees(arg0 common.Address) (bool, error) {
	return _FeralfileExhibitionV2.Contract.Trustees(&_FeralfileExhibitionV2.CallOpts, arg0)
}

// AddTrustee is a paid mutator transaction binding the contract method 0xdc78ac1c.
//
// Solidity: function addTrustee(address _trustee) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) AddTrustee(opts *bind.TransactOpts, _trustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "addTrustee", _trustee)
}

// AddTrustee is a paid mutator transaction binding the contract method 0xdc78ac1c.
//
// Solidity: function addTrustee(address _trustee) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) AddTrustee(_trustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.AddTrustee(&_FeralfileExhibitionV2.TransactOpts, _trustee)
}

// AddTrustee is a paid mutator transaction binding the contract method 0xdc78ac1c.
//
// Solidity: function addTrustee(address _trustee) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) AddTrustee(_trustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.AddTrustee(&_FeralfileExhibitionV2.TransactOpts, _trustee)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.Approve(&_FeralfileExhibitionV2.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.Approve(&_FeralfileExhibitionV2.TransactOpts, to, tokenId)
}

// CreateArtwork is a paid mutator transaction binding the contract method 0x3afb021a.
//
// Solidity: function createArtwork(string fingerprint, string title, string artistName, uint256 editionSize) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) CreateArtwork(opts *bind.TransactOpts, fingerprint string, title string, artistName string, editionSize *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "createArtwork", fingerprint, title, artistName, editionSize)
}

// CreateArtwork is a paid mutator transaction binding the contract method 0x3afb021a.
//
// Solidity: function createArtwork(string fingerprint, string title, string artistName, uint256 editionSize) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) CreateArtwork(fingerprint string, title string, artistName string, editionSize *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.CreateArtwork(&_FeralfileExhibitionV2.TransactOpts, fingerprint, title, artistName, editionSize)
}

// CreateArtwork is a paid mutator transaction binding the contract method 0x3afb021a.
//
// Solidity: function createArtwork(string fingerprint, string title, string artistName, uint256 editionSize) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) CreateArtwork(fingerprint string, title string, artistName string, editionSize *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.CreateArtwork(&_FeralfileExhibitionV2.TransactOpts, fingerprint, title, artistName, editionSize)
}

// RemoveTrustee is a paid mutator transaction binding the contract method 0x03120506.
//
// Solidity: function removeTrustee(address _trustee) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) RemoveTrustee(opts *bind.TransactOpts, _trustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "removeTrustee", _trustee)
}

// RemoveTrustee is a paid mutator transaction binding the contract method 0x03120506.
//
// Solidity: function removeTrustee(address _trustee) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) RemoveTrustee(_trustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.RemoveTrustee(&_FeralfileExhibitionV2.TransactOpts, _trustee)
}

// RemoveTrustee is a paid mutator transaction binding the contract method 0x03120506.
//
// Solidity: function removeTrustee(address _trustee) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) RemoveTrustee(_trustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.RemoveTrustee(&_FeralfileExhibitionV2.TransactOpts, _trustee)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) RenounceOwnership() (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.RenounceOwnership(&_FeralfileExhibitionV2.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.RenounceOwnership(&_FeralfileExhibitionV2.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SafeTransferFrom(&_FeralfileExhibitionV2.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SafeTransferFrom(&_FeralfileExhibitionV2.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SafeTransferFrom0(&_FeralfileExhibitionV2.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SafeTransferFrom0(&_FeralfileExhibitionV2.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SetApprovalForAll(&_FeralfileExhibitionV2.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SetApprovalForAll(&_FeralfileExhibitionV2.TransactOpts, operator, approved)
}

// SetRoyaltyPayoutAddress is a paid mutator transaction binding the contract method 0x45aeefde.
//
// Solidity: function setRoyaltyPayoutAddress(address royaltyPayoutAddress_) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) SetRoyaltyPayoutAddress(opts *bind.TransactOpts, royaltyPayoutAddress_ common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "setRoyaltyPayoutAddress", royaltyPayoutAddress_)
}

// SetRoyaltyPayoutAddress is a paid mutator transaction binding the contract method 0x45aeefde.
//
// Solidity: function setRoyaltyPayoutAddress(address royaltyPayoutAddress_) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) SetRoyaltyPayoutAddress(royaltyPayoutAddress_ common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SetRoyaltyPayoutAddress(&_FeralfileExhibitionV2.TransactOpts, royaltyPayoutAddress_)
}

// SetRoyaltyPayoutAddress is a paid mutator transaction binding the contract method 0x45aeefde.
//
// Solidity: function setRoyaltyPayoutAddress(address royaltyPayoutAddress_) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) SetRoyaltyPayoutAddress(royaltyPayoutAddress_ common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SetRoyaltyPayoutAddress(&_FeralfileExhibitionV2.TransactOpts, royaltyPayoutAddress_)
}

// SetTokenBaseURI is a paid mutator transaction binding the contract method 0x8ef79e91.
//
// Solidity: function setTokenBaseURI(string baseURI_) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) SetTokenBaseURI(opts *bind.TransactOpts, baseURI_ string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "setTokenBaseURI", baseURI_)
}

// SetTokenBaseURI is a paid mutator transaction binding the contract method 0x8ef79e91.
//
// Solidity: function setTokenBaseURI(string baseURI_) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) SetTokenBaseURI(baseURI_ string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SetTokenBaseURI(&_FeralfileExhibitionV2.TransactOpts, baseURI_)
}

// SetTokenBaseURI is a paid mutator transaction binding the contract method 0x8ef79e91.
//
// Solidity: function setTokenBaseURI(string baseURI_) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) SetTokenBaseURI(baseURI_ string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SetTokenBaseURI(&_FeralfileExhibitionV2.TransactOpts, baseURI_)
}

// SwapArtworkFromBitmark is a paid mutator transaction binding the contract method 0x7f34c0dd.
//
// Solidity: function swapArtworkFromBitmark(uint256 artworkID, uint256 bitmarkID, uint256 editionNumber, address owner, string ipfsCID) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) SwapArtworkFromBitmark(opts *bind.TransactOpts, artworkID *big.Int, bitmarkID *big.Int, editionNumber *big.Int, owner common.Address, ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "swapArtworkFromBitmark", artworkID, bitmarkID, editionNumber, owner, ipfsCID)
}

// SwapArtworkFromBitmark is a paid mutator transaction binding the contract method 0x7f34c0dd.
//
// Solidity: function swapArtworkFromBitmark(uint256 artworkID, uint256 bitmarkID, uint256 editionNumber, address owner, string ipfsCID) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) SwapArtworkFromBitmark(artworkID *big.Int, bitmarkID *big.Int, editionNumber *big.Int, owner common.Address, ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SwapArtworkFromBitmark(&_FeralfileExhibitionV2.TransactOpts, artworkID, bitmarkID, editionNumber, owner, ipfsCID)
}

// SwapArtworkFromBitmark is a paid mutator transaction binding the contract method 0x7f34c0dd.
//
// Solidity: function swapArtworkFromBitmark(uint256 artworkID, uint256 bitmarkID, uint256 editionNumber, address owner, string ipfsCID) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) SwapArtworkFromBitmark(artworkID *big.Int, bitmarkID *big.Int, editionNumber *big.Int, owner common.Address, ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SwapArtworkFromBitmark(&_FeralfileExhibitionV2.TransactOpts, artworkID, bitmarkID, editionNumber, owner, ipfsCID)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.TransferFrom(&_FeralfileExhibitionV2.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.TransferFrom(&_FeralfileExhibitionV2.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.TransferOwnership(&_FeralfileExhibitionV2.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.TransferOwnership(&_FeralfileExhibitionV2.TransactOpts, newOwner)
}

// UpdateArtworkEditionIPFSCid is a paid mutator transaction binding the contract method 0x0cfcb5f1.
//
// Solidity: function updateArtworkEditionIPFSCid(uint256 tokenId, string ipfsCID) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) UpdateArtworkEditionIPFSCid(opts *bind.TransactOpts, tokenId *big.Int, ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "updateArtworkEditionIPFSCid", tokenId, ipfsCID)
}

// UpdateArtworkEditionIPFSCid is a paid mutator transaction binding the contract method 0x0cfcb5f1.
//
// Solidity: function updateArtworkEditionIPFSCid(uint256 tokenId, string ipfsCID) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) UpdateArtworkEditionIPFSCid(tokenId *big.Int, ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.UpdateArtworkEditionIPFSCid(&_FeralfileExhibitionV2.TransactOpts, tokenId, ipfsCID)
}

// UpdateArtworkEditionIPFSCid is a paid mutator transaction binding the contract method 0x0cfcb5f1.
//
// Solidity: function updateArtworkEditionIPFSCid(uint256 tokenId, string ipfsCID) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) UpdateArtworkEditionIPFSCid(tokenId *big.Int, ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.UpdateArtworkEditionIPFSCid(&_FeralfileExhibitionV2.TransactOpts, tokenId, ipfsCID)
}

// FeralfileExhibitionV2ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2ApprovalIterator struct {
	Event *FeralfileExhibitionV2Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV2ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV2Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV2Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV2ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV2ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV2Approval represents a Approval event raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2Approval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*FeralfileExhibitionV2ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2ApprovalIterator{contract: _FeralfileExhibitionV2.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV2Approval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV2Approval)
				if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) ParseApproval(log types.Log) (*FeralfileExhibitionV2Approval, error) {
	event := new(FeralfileExhibitionV2Approval)
	if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV2ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2ApprovalForAllIterator struct {
	Event *FeralfileExhibitionV2ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV2ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV2ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV2ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV2ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV2ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV2ApprovalForAll represents a ApprovalForAll event raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*FeralfileExhibitionV2ApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2ApprovalForAllIterator{contract: _FeralfileExhibitionV2.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV2ApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV2ApprovalForAll)
				if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) ParseApprovalForAll(log types.Log) (*FeralfileExhibitionV2ApprovalForAll, error) {
	event := new(FeralfileExhibitionV2ApprovalForAll)
	if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV2NewArtworkIterator is returned from FilterNewArtwork and is used to iterate over the raw logs and unpacked data for NewArtwork events raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2NewArtworkIterator struct {
	Event *FeralfileExhibitionV2NewArtwork // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV2NewArtworkIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV2NewArtwork)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV2NewArtwork)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV2NewArtworkIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV2NewArtworkIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV2NewArtwork represents a NewArtwork event raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2NewArtwork struct {
	ArtworkID *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewArtwork is a free log retrieval operation binding the contract event 0x22350b25f1b72bb3621199a79abefeb4fcd77bb1e65638cd09350666e4db0891.
//
// Solidity: event NewArtwork(uint256 indexed artworkID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) FilterNewArtwork(opts *bind.FilterOpts, artworkID []*big.Int) (*FeralfileExhibitionV2NewArtworkIterator, error) {

	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.FilterLogs(opts, "NewArtwork", artworkIDRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2NewArtworkIterator{contract: _FeralfileExhibitionV2.contract, event: "NewArtwork", logs: logs, sub: sub}, nil
}

// WatchNewArtwork is a free log subscription operation binding the contract event 0x22350b25f1b72bb3621199a79abefeb4fcd77bb1e65638cd09350666e4db0891.
//
// Solidity: event NewArtwork(uint256 indexed artworkID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) WatchNewArtwork(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV2NewArtwork, artworkID []*big.Int) (event.Subscription, error) {

	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.WatchLogs(opts, "NewArtwork", artworkIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV2NewArtwork)
				if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "NewArtwork", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewArtwork is a log parse operation binding the contract event 0x22350b25f1b72bb3621199a79abefeb4fcd77bb1e65638cd09350666e4db0891.
//
// Solidity: event NewArtwork(uint256 indexed artworkID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) ParseNewArtwork(log types.Log) (*FeralfileExhibitionV2NewArtwork, error) {
	event := new(FeralfileExhibitionV2NewArtwork)
	if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "NewArtwork", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV2NewArtworkEditionIterator is returned from FilterNewArtworkEdition and is used to iterate over the raw logs and unpacked data for NewArtworkEdition events raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2NewArtworkEditionIterator struct {
	Event *FeralfileExhibitionV2NewArtworkEdition // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV2NewArtworkEditionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV2NewArtworkEdition)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV2NewArtworkEdition)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV2NewArtworkEditionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV2NewArtworkEditionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV2NewArtworkEdition represents a NewArtworkEdition event raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2NewArtworkEdition struct {
	Owner     common.Address
	ArtworkID *big.Int
	EditionID *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewArtworkEdition is a free log retrieval operation binding the contract event 0x4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd4.
//
// Solidity: event NewArtworkEdition(address indexed owner, uint256 indexed artworkID, uint256 indexed editionID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) FilterNewArtworkEdition(opts *bind.FilterOpts, owner []common.Address, artworkID []*big.Int, editionID []*big.Int) (*FeralfileExhibitionV2NewArtworkEditionIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}
	var editionIDRule []interface{}
	for _, editionIDItem := range editionID {
		editionIDRule = append(editionIDRule, editionIDItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.FilterLogs(opts, "NewArtworkEdition", ownerRule, artworkIDRule, editionIDRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2NewArtworkEditionIterator{contract: _FeralfileExhibitionV2.contract, event: "NewArtworkEdition", logs: logs, sub: sub}, nil
}

// WatchNewArtworkEdition is a free log subscription operation binding the contract event 0x4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd4.
//
// Solidity: event NewArtworkEdition(address indexed owner, uint256 indexed artworkID, uint256 indexed editionID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) WatchNewArtworkEdition(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV2NewArtworkEdition, owner []common.Address, artworkID []*big.Int, editionID []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}
	var editionIDRule []interface{}
	for _, editionIDItem := range editionID {
		editionIDRule = append(editionIDRule, editionIDItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.WatchLogs(opts, "NewArtworkEdition", ownerRule, artworkIDRule, editionIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV2NewArtworkEdition)
				if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "NewArtworkEdition", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewArtworkEdition is a log parse operation binding the contract event 0x4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd4.
//
// Solidity: event NewArtworkEdition(address indexed owner, uint256 indexed artworkID, uint256 indexed editionID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) ParseNewArtworkEdition(log types.Log) (*FeralfileExhibitionV2NewArtworkEdition, error) {
	event := new(FeralfileExhibitionV2NewArtworkEdition)
	if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "NewArtworkEdition", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV2OwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2OwnershipTransferredIterator struct {
	Event *FeralfileExhibitionV2OwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV2OwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV2OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV2OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV2OwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV2OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV2OwnershipTransferred represents a OwnershipTransferred event raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*FeralfileExhibitionV2OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2OwnershipTransferredIterator{contract: _FeralfileExhibitionV2.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV2OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV2OwnershipTransferred)
				if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) ParseOwnershipTransferred(log types.Log) (*FeralfileExhibitionV2OwnershipTransferred, error) {
	event := new(FeralfileExhibitionV2OwnershipTransferred)
	if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV2TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2TransferIterator struct {
	Event *FeralfileExhibitionV2Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV2TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV2Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV2Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV2TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV2TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV2Transfer represents a Transfer event raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2Transfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*FeralfileExhibitionV2TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2TransferIterator{contract: _FeralfileExhibitionV2.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV2Transfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV2Transfer)
				if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) ParseTransfer(log types.Log) (*FeralfileExhibitionV2Transfer, error) {
	event := new(FeralfileExhibitionV2Transfer)
	if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
