// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package series_registry

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// SeriesRegistryMetaData contains all meta data concerning the SeriesRegistry contract.
var SeriesRegistryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AddressAlreadyAssignedError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposedArtistAddress\",\"type\":\"address\"}],\"name\":\"AlreadyProposedError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lenArtists\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lenMetas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lenTokens\",\"type\":\"uint256\"}],\"name\":\"ArrayLengthMismatchError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposedArtistAddress\",\"type\":\"address\"}],\"name\":\"ArtistAlreadyInSeriesError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"artistAddress\",\"type\":\"address\"}],\"name\":\"ArtistRevokedOwnerRightsError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"BatchSizeTooLargeError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerNotASeriesArtistError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyMetadataURIError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyTokenMapURIError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artistID\",\"type\":\"uint256\"}],\"name\":\"InvalidArtistIDError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"InvalidNewAddressError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoArtistsForSeriesError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoArtistsProvidedError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposedArtistAddress\",\"type\":\"address\"}],\"name\":\"NoProposalExistsError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSeriesDataError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"NotAPendingProposalError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"NotAnArtistError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"NotAuthorizedError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"}],\"name\":\"OwnerRightsRevokedForThisSeries\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"}],\"name\":\"SeriesDoesNotExistError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowedError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"artistID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ArtistAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"confirmedArtistID\",\"type\":\"uint256\"}],\"name\":\"CollaboratorConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposerArtistID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cancelledArtistID\",\"type\":\"uint256\"}],\"name\":\"CollaboratorProposalCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposedArtistID\",\"type\":\"uint256\"}],\"name\":\"CollaboratorProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"}],\"name\":\"SeriesDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"}],\"name\":\"SeriesRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"}],\"name\":\"SeriesUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"artistAddresses\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenIDsMapURI\",\"type\":\"string\"}],\"name\":\"addSeries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[][]\",\"name\":\"seriesArtists\",\"type\":\"address[][]\"},{\"internalType\":\"string[]\",\"name\":\"metadataURIs\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"tokenIDsMapURIs\",\"type\":\"string[]\"}],\"name\":\"batchAddSeries\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenIDsMapURI\",\"type\":\"string\"}],\"name\":\"updateSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"seriesIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"metadataURIs\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"tokenIDsMapURIs\",\"type\":\"string[]\"}],\"name\":\"batchUpdateSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"}],\"name\":\"deleteSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"seriesIDs\",\"type\":\"uint256[]\"}],\"name\":\"batchDeleteSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"}],\"name\":\"resignFromSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"artistAddresses\",\"type\":\"address[]\"}],\"name\":\"ownerUpdateSeriesArtists\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposedArtistAddress\",\"type\":\"address\"}],\"name\":\"proposeCollaborator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposedArtistAddress\",\"type\":\"address\"}],\"name\":\"cancelProposeCollaborator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"}],\"name\":\"confirmAsCollaborator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeContractOwnerRights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveContractOwnerRights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artistID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateArtistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"}],\"name\":\"hasUnrevokedArtist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"artistAddress\",\"type\":\"address\"}],\"name\":\"hasArtistRevokedOwnerRights\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"}],\"name\":\"getSeriesArtistIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"}],\"name\":\"getSeriesArtistAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"artistAddress\",\"type\":\"address\"}],\"name\":\"getArtistSeriesIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"}],\"name\":\"getSeriesMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"}],\"name\":\"getSeriesContractTokenDataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"artistAddress\",\"type\":\"address\"}],\"name\":\"getArtistPendingCollaboratorSeries\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"}],\"name\":\"getSeriesPendingCollaborators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artistID\",\"type\":\"uint256\"}],\"name\":\"getArtistAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"artistAddress\",\"type\":\"address\"}],\"name\":\"getAddressArtistID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405260018055600160025534801561001957600080fd5b5061002333610028565b610078565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612d1280620000886000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806396202631116100f9578063eae2101411610097578063ecd0279b11610071578063ecd0279b146103fe578063ee1960cb14610411578063f1b660fe14610424578063f2fde38b1461043757600080fd5b8063eae21014146103c5578063ec209207146103d8578063eca0ba80146103eb57600080fd5b8063c86e7a19116100d3578063c86e7a1914610379578063caae3de81461038c578063d03904db1461039f578063de7ed7f5146103b257600080fd5b8063962026311461032a5780639888892e1461033d5780639e14b5071461035057600080fd5b806365753a40116101665780637baca6cd116101405780637baca6cd146102bd5780638b2dfed0146102fe5780638c77b117146103065780638da5cb5b1461031957600080fd5b806365753a401461029a57806366c083b9146102ad578063715018a6146102b557600080fd5b8063199979a2116101a2578063199979a2146102245780631a1751b9146102445780634090fd38146102575780635b4198a41461027a57600080fd5b8063040085d9146101c9578063084ac4b5146101ef5780630cc2bc8d1461020f575b600080fd5b6101dc6101d7366004612616565b61044a565b6040519081526020015b60405180910390f35b6102026101fd3660046126af565b6104fb565b6040516101e691906126c8565b61022261021d3660046126af565b610560565b005b6102376102323660046126af565b61056c565b6040516101e6919061270c565b61022261025236600461274d565b6106a2565b61026a6102653660046126af565b61071d565b60405190151581526020016101e6565b61028d6102883660046126af565b6107ef565b6040516101e691906127c6565b6102226102a8366004612814565b61088a565b6102226109a2565b610222610a0f565b6102e66102cb3660046126af565b6000908152600360205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016101e6565b610222610a23565b61022261031436600461289b565b610a8b565b6000546001600160a01b03166102e6565b6102026103383660046128f8565b610ace565b61023761034b3660046126af565b610b49565b6101dc61035e3660046128f8565b6001600160a01b031660009081526004602052604090205490565b610222610387366004612913565b610c7a565b61026a61039a3660046128f8565b610e1a565b6102226103ad3660046126af565b610e45565b6102026103c0366004612814565b610ee5565b61028d6103d33660046126af565b61109f565b6102226103e63660046126af565b6110bc565b6102226103f9366004612913565b611229565b61022261040c366004612913565b61138f565b61020261041f3660046128f8565b61156a565b61022261043236600461293f565b6115e0565b6102226104453660046128f8565b61176a565b60006104f087878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8b01819004810282018101909252898152925089915088908190840183828082843760009201919091525050604080516020601f8a0181900481028201810190925288815292508891508790819084018382808284376000920191909152506117e092505050565b979650505050505050565b60008181526006602090815260409182902060020180548351818402810184019094528084526060939283018282801561055457602002820191906000526020600020905b815481526020019060010190808311610540575b50505050509050919050565b610569816118b7565b50565b60008181526009602090815260408083208054825181850281018501909352808352606094938301828280156105c157602002820191906000526020600020905b8154815260200190600101908083116105ad575b50505050509050600081516001600160401b038111156105e3576105e361298a565b60405190808252806020026020018201604052801561060c578160200160208202803683370190505b50905060005b825181101561069a5760036000848381518110610631576106316129a0565b6020026020010151815260200190815260200160002060000160009054906101000a90046001600160a01b0316828281518110610670576106706129a0565b6001600160a01b039092166020928302919091019091015280610692816129cc565b915050610612565b509392505050565b6107168585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f89018190048102820181019092528781529250879150869081908401838280828437600092019190915250611c5f92505050565b5050505050565b60008181526006602090815260408083206002018054825181850281018501909352808352849383018282801561077357602002820191906000526020600020905b81548152602001906001019080831161075f575b50505050509050805160000361078c5750600192915050565b60005b81518110156107e5576107c58282815181106107ad576107ad6129a0565b60200260200101516005611d5190919063ffffffff16565b6107d3575060019392505050565b806107dd816129cc565b91505061078f565b5060009392505050565b600081815260066020526040902060010180546060919061080f906129e5565b80601f016020809104026020016040519081016040528092919081815260200182805461083b906129e5565b80156105545780601f1061085d57610100808354040283529160200191610554565b820191906000526020600020905b81548152906001019060200180831161086b5750939695505050505050565b6108a7856108988587612a4f565b6108a28486612a4f565b611d76565b60005b85811015610999576109878787838181106108c7576108c76129a0565b905060200201358686848181106108e0576108e06129a0565b90506020028101906108f29190612b17565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525088925087915086905081811061093b5761093b6129a0565b905060200281019061094d9190612b17565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c5f92505050565b80610991816129cc565b9150506108aa565b50505050505050565b33600090815260046020526040812054908190036109da576040516348359c4560e01b81523360048201526024015b60405180910390fd5b6109e5600582611d51565b6109ec5750565b600881901c60009081526005602052604090208054600160ff84161b1916905550565b610a17611e29565b610a216000611e83565b565b3360009081526004602052604081205490819003610a56576040516348359c4560e01b81523360048201526024016109d1565b610a61600582611d51565b15610a695750565b600881901c60009081526005602052604090208054600160ff84161b17905550565b60005b81811015610ac957610ab7838383818110610aab57610aab6129a0565b905060200201356118b7565b80610ac1816129cc565b915050610a8e565b505050565b6001600160a01b0381166000908152600460209081526040808320548084526003835292819020600101805482518185028101850190935280835260609493830182828015610b3c57602002820191906000526020600020905b815481526020019060010190808311610b28575b5050505050915050919050565b6000818152600660209081526040808320600201805482518185028101850190935280835260609493830182828015610ba157602002820191906000526020600020905b815481526020019060010190808311610b8d575b50505050509050600081516001600160401b03811115610bc357610bc361298a565b604051908082528060200260200182016040528015610bec578160200160208202803683370190505b50905060005b825181101561069a5760036000848381518110610c1157610c116129a0565b6020026020010151815260200190815260200160002060000160009054906101000a90046001600160a01b0316828281518110610c5057610c506129a0565b6001600160a01b039092166020928302919091019091015280610c72816129cc565b915050610bf2565b6001600160a01b038116610cac57604051631cf27c9360e21b81526001600160a01b03821660048201526024016109d1565b6001600160a01b03811660009081526004602052604090205415610cee576040516339d1cb0160e01b81526001600160a01b03821660048201526024016109d1565b6000828152600360205260409020546001600160a01b0316610d265760405163161b921f60e21b8152600481018390526024016109d1565b33600090815260046020526040812054908382148015610d4557508115155b60008054919250906001600160a01b031633148015610d6c5750610d6a600586611d51565b155b905081158015610d7a575080155b15610d9a5760405163458a16af60e01b81523360048201526024016109d1565b600085815260036020908152604080832080546001600160a01b03908116808652600490945282852085905581546001600160a01b031916908916908117909155808452818420899055905191929091839189917fe50ea9c5a98bed1c3d7745e9d87287f7c4d2965769ff76f8c3767e46ce9359359190a4505050505050565b6001600160a01b038116600090815260046020526040812054610e3e600582611d51565b9392505050565b60008181526006602052604090208054829190610e61906129e5565b9050600003610e8657604051630f56bff360e01b8152600481018290526024016109d1565b81610e9081611ed3565b33600090815260046020526040902054610eaa8482611f30565b610eb48185611ff5565b60405184907fa7a8846ec5f767e9af26f5b715c7968b0a1e927db3ee708b284cad2eea6e36bd90600090a250505050565b6060610eff86610ef58688612a4f565b6108a28587612a4f565b6000866001600160401b03811115610f1957610f1961298a565b604051908082528060200260200182016040528015610f42578160200160208202803683370190505b50905060005b8781101561109357611064898983818110610f6557610f656129a0565b9050602002810190610f779190612b5d565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508b92508a9150859050818110610fbd57610fbd6129a0565b9050602002810190610fcf9190612b17565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250899150869050818110611018576110186129a0565b905060200281019061102a9190612b17565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506117e092505050565b828281518110611076576110766129a0565b60209081029190910101528061108b816129cc565b915050610f48565b50979650505050505050565b600081815260066020526040902080546060919061080f906129e5565b600081815260066020526040902080548291906110d8906129e5565b90506000036110fd57604051630f56bff360e01b8152600481018290526024016109d1565b3360009081526004602052604081205490819003611130576040516348359c4560e01b81523360048201526024016109d1565b60008381526008602052604090206111489082611d51565b61116e57604051630c4f577360e01b8152600481018490523360248201526044016109d1565b6040805160018082528183019092526000916020808301908036833701905050905033816000815181106111a4576111a46129a0565b6001600160a01b03929092166020928302919091018201526000858152600880835260408083209186901c83529252208054600160ff85161b191690556111eb82856120eb565b6111f584826120ff565b50604051829085907f80cdb6c0478d89b3e023f6165f91dedd19b306d4731d8b552b6513ba375e160a90600090a350505050565b60008281526006602052604090208054839190611245906129e5565b905060000361126a57604051630f56bff360e01b8152600481018290526024016109d1565b60005483906001600160a01b031633036112ac576112878161071d565b6112a757604051632f94bd8760e11b8152600481018290526024016109d1565b6112b5565b6112b581611ed3565b6001600160a01b03831660009081526004602090815260408083205487845260089092529091206112e69082611d51565b61131557604051634d83469d60e11b8152600481018690526001600160a01b03851660248201526044016109d1565b60008581526008602081815260408084209285901c845291905290208054600160ff84161b1916905561134881866120eb565b3360009081526004602052604080822054905190918391839189917f0f29b8a779c6b715ba37c103fcddfa19cff82ccf4c7197a3d57548500f2ded669190a4505050505050565b600082815260066020526040902080548391906113ab906129e5565b90506000036113d057604051630f56bff360e01b8152600481018290526024016109d1565b60005483906001600160a01b03163303611412576113ed8161071d565b61140d57604051632f94bd8760e11b8152600481018290526024016109d1565b61141b565b61141b81611ed3565b6114248361224c565b6001600160a01b03831660009081526004602090815260408083205487845260079092529091206114559082611d51565b156114855760405163d40f257960e01b8152600481018690526001600160a01b03851660248201526044016109d1565b600085815260086020526040902061149d9082611d51565b156114cd57604051637eea5e6960e11b8152600481018690526001600160a01b03851660248201526044016109d1565b60008581526008602081815260408084209285901c845291905290208054600160ff84161b17905561153681866000828152600a602090815260408083208054600181810183559185528385200185905593835260098252822080549384018155825290200155565b604051819086907f9a800b772a9056b3e8522e27a8285c97612e8486a5ac77b1771afd8fb3bfcde590600090a35050505050565b6001600160a01b038116600090815260046020908152604080832054808452600a835292819020805482518185028101850190935280835260609493830182828015610b3c5760200282019190600052602060002090815481526020019060010190808311610b28575050505050915050919050565b600083815260066020526040902080548491906115fc906129e5565b905060000361162157604051630f56bff360e01b8152600481018290526024016109d1565b611629611e29565b6116328461071d565b61165257604051632f94bd8760e11b8152600481018590526024016109d1565b61168e8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506122e392505050565b6000848152600660205260408120905b60028201548110156116eb5760008260020182815481106116c1576116c16129a0565b906000526020600020015490506116d88188611ff5565b50806116e3816129cc565b91505061169e565b506116fa60028201600061251d565b611737858585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506120ff92505050565b5060405185907fa7a8846ec5f767e9af26f5b715c7968b0a1e927db3ee708b284cad2eea6e36bd90600090a25050505050565b611772611e29565b6001600160a01b0381166117d75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109d1565b61056981611e83565b60008351600003611804576040516354ba451960e11b815260040160405180910390fd5b6000546001600160a01b031633036118245761181f846122e3565b61182d565b61182d846123a4565b6118378383612401565b6001805460009182611848836129cc565b909155506000818152600660205260409020909150806118688682612bf4565b50600181016118778582612bf4565b5061188282876120ff565b5060405182907f8cb83a447339d417e797ed5f819a21204e33c5b170b902a398847cda747e6c0890600090a250949350505050565b600081815260066020526040902080548291906118d3906129e5565b90506000036118f857604051630f56bff360e01b8152600481018290526024016109d1565b60005482906001600160a01b0316330361193a576119158161071d565b61193557604051632f94bd8760e11b8152600481018290526024016109d1565b611943565b61194381611ed3565b60008381526009602090815260408083208054825181850281018501909352808352919290919083018282801561199957602002820191906000526020600020905b815481526020019060010190808311611985575b5050505050905060005b8151811015611a165760008282815181106119c0576119c06129a0565b602002602001015190506119ef8160086000898152602001908152602001600020611dff90919063ffffffff16565b6119f98187612445565b611a0386826124c2565b5080611a0e816129cc565b9150506119a3565b50600084815260066020526040808220815160608101909252805482908290611a3e906129e5565b80601f0160208091040260200160405190810160405280929190818152602001828054611a6a906129e5565b8015611ab75780601f10611a8c57610100808354040283529160200191611ab7565b820191906000526020600020905b815481529060010190602001808311611a9a57829003601f168201915b50505050508152602001600182018054611ad0906129e5565b80601f0160208091040260200160405190810160405280929190818152602001828054611afc906129e5565b8015611b495780601f10611b1e57610100808354040283529160200191611b49565b820191906000526020600020905b815481529060010190602001808311611b2c57829003601f168201915b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015611ba157602002820191906000526020600020905b815481526020019060010190808311611b8d575b505050505081525050905060005b816040015151811015611bf557611be382604001518281518110611bd557611bd56129a0565b602002602001015187611ff5565b80611bed816129cc565b915050611baf565b50600085815260066020526040812090611c0f828261253b565b611c1d60018301600061253b565b611c2b60028301600061251d565b505060405185907f818454d74e409fb3c80f48282172c975b5e4d44f6c96b4463d34e43bb0fd1d8f90600090a25050505050565b60008381526006602052604090208054849190611c7b906129e5565b9050600003611ca057604051630f56bff360e01b8152600481018290526024016109d1565b60005484906001600160a01b03163303611ce257611cbd8161071d565b611cdd57604051632f94bd8760e11b8152600481018290526024016109d1565b611ceb565b611ceb81611ed3565b611cf58484612401565b600085815260066020526040902080611d0e8682612bf4565b5060018101611d1d8582612bf4565b5060405186907fa7a8846ec5f767e9af26f5b715c7968b0a1e927db3ee708b284cad2eea6e36bd90600090a2505050505050565b600881901c600090815260208390526040902054600160ff83161b1615155b92915050565b82600003611d975760405163fbd5bb7160e01b815260040160405180910390fd5b6032831115611dbc57604051634db8420b60e01b8152600481018490526024016109d1565b815183141580611dcd575080518314155b15610ac9578151815160405163f5e2452b60e01b815260048101869052602481019290925260448201526064016109d1565b600881901c600090815260209290925260409091208054600160ff9093169290921b199091169055565b6000546001600160a01b03163314610a215760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109d1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b33600090815260046020526040902054801580611f0557506000828152600760205260409020611f039082611d51565b155b15611f2c57604051631fe543f960e21b8152600481018390523360248201526044016109d1565b5050565b6000828152600660205260408120600201805490915b818110156107165783838281548110611f6157611f616129a0565b906000526020600020015403611fe35782611f7d600184612cb3565b81548110611f8d57611f8d6129a0565b9060005260206000200154838281548110611faa57611faa6129a0565b906000526020600020018190555082805480611fc857611fc8612cc6565b60019003818190600052602060002001600090559055610716565b80611fed816129cc565b915050611f46565b6000828152600360205260408120600101805490915b818110156120ba5783838281548110612026576120266129a0565b9060005260206000200154036120a85782612042600184612cb3565b81548110612052576120526129a0565b906000526020600020015483828154811061206f5761206f6129a0565b90600052602060002001819055508280548061208d5761208d612cc6565b600190038181906000526020600020016000905590556120ba565b806120b2816129cc565b91505061200b565b506000838152600760209081526040808320600888901c845290915290208054600160ff87161b1916905550505050565b6120f58282612445565b611f2c81836124c2565b6060600082516001600160401b0381111561211c5761211c61298a565b604051908082528060200260200182016040528015612145578160200160208202803683370190505b50905060005b835181101561069a57612176848281518110612169576121696129a0565b602002602001015161224c565b60006004600086848151811061218e5761218e6129a0565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020549050808383815181106121cc576121cc6129a0565b60209081029190910181019190915260008781526006825260408082206002018054600180820183559184528484200185905589835260078452818320600886901c84528452818320805460ff871683901b1790559382526003835281208301805493840181558152200185905580612244816129cc565b91505061214b565b6001600160a01b03811661227357604051636731842f60e11b815260040160405180910390fd5b6001600160a01b03811660009081526004602052604081205490036105695760028054600091826122a3836129cc565b90915550600081815260036020908152604080832080546001600160a01b0388166001600160a01b03199091168117909155835260049091529020555050565b60005b8151811015611f2c57600060046000848481518110612307576123076129a0565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020549050806000141580156123495750612349600582611d51565b1561239157828281518110612360576123606129a0565b6020026020010151604051631c2e422d60e11b81526004016109d191906001600160a01b0391909116815260200190565b508061239c816129cc565b9150506122e6565b805160011415806123e15750336001600160a01b0316816000815181106123cd576123cd6129a0565b60200260200101516001600160a01b031614155b156105695760405163458a16af60e01b81523360048201526024016109d1565b815160000361242357604051632174de7360e21b815260040160405180910390fd5b8051600003611f2c576040516309759eff60e01b815260040160405180910390fd5b6000828152600a60205260408120805490915b818110156107165783838281548110612473576124736129a0565b9060005260206000200154036124b05761248e600183612cb3565b81146124a05782611f7d600184612cb3565b82805480611fc857611fc8612cc6565b806124ba816129cc565b915050612458565b6000828152600960205260408120805490915b8181101561071657838382815481106124f0576124f06129a0565b90600052602060002001540361250b5761248e600183612cb3565b80612515816129cc565b9150506124d5565b50805460008255906000526020600020908101906105699190612571565b508054612547906129e5565b6000825580601f10612557575050565b601f01602090049060005260206000209081019061056991905b5b808211156125865760008155600101612572565b5090565b60008083601f84011261259c57600080fd5b5081356001600160401b038111156125b357600080fd5b6020830191508360208260051b85010111156125ce57600080fd5b9250929050565b60008083601f8401126125e757600080fd5b5081356001600160401b038111156125fe57600080fd5b6020830191508360208285010111156125ce57600080fd5b6000806000806000806060878903121561262f57600080fd5b86356001600160401b038082111561264657600080fd5b6126528a838b0161258a565b9098509650602089013591508082111561266b57600080fd5b6126778a838b016125d5565b9096509450604089013591508082111561269057600080fd5b5061269d89828a016125d5565b979a9699509497509295939492505050565b6000602082840312156126c157600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015612700578351835292840192918401916001016126e4565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156127005783516001600160a01b031683529284019291840191600101612728565b60008060008060006060868803121561276557600080fd5b8535945060208601356001600160401b038082111561278357600080fd5b61278f89838a016125d5565b909650945060408801359150808211156127a857600080fd5b506127b5888289016125d5565b969995985093965092949392505050565b600060208083528351808285015260005b818110156127f3578581018301518582016040015282016127d7565b506000604082860101526040601f19601f8301168501019250505092915050565b6000806000806000806060878903121561282d57600080fd5b86356001600160401b038082111561284457600080fd5b6128508a838b0161258a565b9098509650602089013591508082111561286957600080fd5b6128758a838b0161258a565b9096509450604089013591508082111561288e57600080fd5b5061269d89828a0161258a565b600080602083850312156128ae57600080fd5b82356001600160401b038111156128c457600080fd5b6128d08582860161258a565b90969095509350505050565b80356001600160a01b03811681146128f357600080fd5b919050565b60006020828403121561290a57600080fd5b610e3e826128dc565b6000806040838503121561292657600080fd5b82359150612936602084016128dc565b90509250929050565b60008060006040848603121561295457600080fd5b8335925060208401356001600160401b0381111561297157600080fd5b61297d8682870161258a565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016129de576129de6129b6565b5060010190565b600181811c908216806129f957607f821691505b602082108103612a1957634e487b7160e01b600052602260045260246000fd5b50919050565b604051601f8201601f191681016001600160401b0381118282101715612a4757612a4761298a565b604052919050565b60006001600160401b0380841115612a6957612a6961298a565b8360051b6020612a7a818301612a1f565b868152918501918181019036841115612a9257600080fd5b865b8481101561109357803586811115612aac5760008081fd5b8801601f3681830112612abf5760008081fd5b813588811115612ad157612ad161298a565b612ae2818301601f19168801612a1f565b91508082523687828501011115612af95760008081fd5b80878401888401376000908201870152845250918301918301612a94565b6000808335601e19843603018112612b2e57600080fd5b8301803591506001600160401b03821115612b4857600080fd5b6020019150368190038213156125ce57600080fd5b6000808335601e19843603018112612b7457600080fd5b8301803591506001600160401b03821115612b8e57600080fd5b6020019150600581901b36038213156125ce57600080fd5b601f821115610ac957600081815260208120601f850160051c81016020861015612bcd5750805b601f850160051c820191505b81811015612bec57828155600101612bd9565b505050505050565b81516001600160401b03811115612c0d57612c0d61298a565b612c2181612c1b84546129e5565b84612ba6565b602080601f831160018114612c565760008415612c3e5750858301515b600019600386901b1c1916600185901b178555612bec565b600085815260208120601f198616915b82811015612c8557888601518255948401946001909101908401612c66565b5085821015612ca35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81810381811115611d7057611d706129b6565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220ba044c1b76e3f92f7ce990b7a54da5a4bbefe236c19440a604f32976793f4caa64736f6c63430008110033",
}

// SeriesRegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use SeriesRegistryMetaData.ABI instead.
var SeriesRegistryABI = SeriesRegistryMetaData.ABI

// SeriesRegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SeriesRegistryMetaData.Bin instead.
var SeriesRegistryBin = SeriesRegistryMetaData.Bin

// DeploySeriesRegistry deploys a new Ethereum contract, binding an instance of SeriesRegistry to it.
func DeploySeriesRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SeriesRegistry, error) {
	parsed, err := SeriesRegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SeriesRegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SeriesRegistry{SeriesRegistryCaller: SeriesRegistryCaller{contract: contract}, SeriesRegistryTransactor: SeriesRegistryTransactor{contract: contract}, SeriesRegistryFilterer: SeriesRegistryFilterer{contract: contract}}, nil
}

// SeriesRegistry is an auto generated Go binding around an Ethereum contract.
type SeriesRegistry struct {
	SeriesRegistryCaller     // Read-only binding to the contract
	SeriesRegistryTransactor // Write-only binding to the contract
	SeriesRegistryFilterer   // Log filterer for contract events
}

// SeriesRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type SeriesRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SeriesRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SeriesRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SeriesRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SeriesRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SeriesRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SeriesRegistrySession struct {
	Contract     *SeriesRegistry   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SeriesRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SeriesRegistryCallerSession struct {
	Contract *SeriesRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// SeriesRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SeriesRegistryTransactorSession struct {
	Contract     *SeriesRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// SeriesRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type SeriesRegistryRaw struct {
	Contract *SeriesRegistry // Generic contract binding to access the raw methods on
}

// SeriesRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SeriesRegistryCallerRaw struct {
	Contract *SeriesRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// SeriesRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SeriesRegistryTransactorRaw struct {
	Contract *SeriesRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSeriesRegistry creates a new instance of SeriesRegistry, bound to a specific deployed contract.
func NewSeriesRegistry(address common.Address, backend bind.ContractBackend) (*SeriesRegistry, error) {
	contract, err := bindSeriesRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistry{SeriesRegistryCaller: SeriesRegistryCaller{contract: contract}, SeriesRegistryTransactor: SeriesRegistryTransactor{contract: contract}, SeriesRegistryFilterer: SeriesRegistryFilterer{contract: contract}}, nil
}

// NewSeriesRegistryCaller creates a new read-only instance of SeriesRegistry, bound to a specific deployed contract.
func NewSeriesRegistryCaller(address common.Address, caller bind.ContractCaller) (*SeriesRegistryCaller, error) {
	contract, err := bindSeriesRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistryCaller{contract: contract}, nil
}

// NewSeriesRegistryTransactor creates a new write-only instance of SeriesRegistry, bound to a specific deployed contract.
func NewSeriesRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*SeriesRegistryTransactor, error) {
	contract, err := bindSeriesRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistryTransactor{contract: contract}, nil
}

// NewSeriesRegistryFilterer creates a new log filterer instance of SeriesRegistry, bound to a specific deployed contract.
func NewSeriesRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*SeriesRegistryFilterer, error) {
	contract, err := bindSeriesRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistryFilterer{contract: contract}, nil
}

// bindSeriesRegistry binds a generic wrapper to an already deployed contract.
func bindSeriesRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SeriesRegistryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SeriesRegistry *SeriesRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SeriesRegistry.Contract.SeriesRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SeriesRegistry *SeriesRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.SeriesRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SeriesRegistry *SeriesRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.SeriesRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SeriesRegistry *SeriesRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SeriesRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SeriesRegistry *SeriesRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SeriesRegistry *SeriesRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.contract.Transact(opts, method, params...)
}

// GetAddressArtistID is a free data retrieval call binding the contract method 0x9e14b507.
//
// Solidity: function getAddressArtistID(address artistAddress) view returns(uint256)
func (_SeriesRegistry *SeriesRegistryCaller) GetAddressArtistID(opts *bind.CallOpts, artistAddress common.Address) (*big.Int, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "getAddressArtistID", artistAddress)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAddressArtistID is a free data retrieval call binding the contract method 0x9e14b507.
//
// Solidity: function getAddressArtistID(address artistAddress) view returns(uint256)
func (_SeriesRegistry *SeriesRegistrySession) GetAddressArtistID(artistAddress common.Address) (*big.Int, error) {
	return _SeriesRegistry.Contract.GetAddressArtistID(&_SeriesRegistry.CallOpts, artistAddress)
}

// GetAddressArtistID is a free data retrieval call binding the contract method 0x9e14b507.
//
// Solidity: function getAddressArtistID(address artistAddress) view returns(uint256)
func (_SeriesRegistry *SeriesRegistryCallerSession) GetAddressArtistID(artistAddress common.Address) (*big.Int, error) {
	return _SeriesRegistry.Contract.GetAddressArtistID(&_SeriesRegistry.CallOpts, artistAddress)
}

// GetArtistAddress is a free data retrieval call binding the contract method 0x7baca6cd.
//
// Solidity: function getArtistAddress(uint256 artistID) view returns(address)
func (_SeriesRegistry *SeriesRegistryCaller) GetArtistAddress(opts *bind.CallOpts, artistID *big.Int) (common.Address, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "getArtistAddress", artistID)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetArtistAddress is a free data retrieval call binding the contract method 0x7baca6cd.
//
// Solidity: function getArtistAddress(uint256 artistID) view returns(address)
func (_SeriesRegistry *SeriesRegistrySession) GetArtistAddress(artistID *big.Int) (common.Address, error) {
	return _SeriesRegistry.Contract.GetArtistAddress(&_SeriesRegistry.CallOpts, artistID)
}

// GetArtistAddress is a free data retrieval call binding the contract method 0x7baca6cd.
//
// Solidity: function getArtistAddress(uint256 artistID) view returns(address)
func (_SeriesRegistry *SeriesRegistryCallerSession) GetArtistAddress(artistID *big.Int) (common.Address, error) {
	return _SeriesRegistry.Contract.GetArtistAddress(&_SeriesRegistry.CallOpts, artistID)
}

// GetArtistPendingCollaboratorSeries is a free data retrieval call binding the contract method 0xee1960cb.
//
// Solidity: function getArtistPendingCollaboratorSeries(address artistAddress) view returns(uint256[])
func (_SeriesRegistry *SeriesRegistryCaller) GetArtistPendingCollaboratorSeries(opts *bind.CallOpts, artistAddress common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "getArtistPendingCollaboratorSeries", artistAddress)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetArtistPendingCollaboratorSeries is a free data retrieval call binding the contract method 0xee1960cb.
//
// Solidity: function getArtistPendingCollaboratorSeries(address artistAddress) view returns(uint256[])
func (_SeriesRegistry *SeriesRegistrySession) GetArtistPendingCollaboratorSeries(artistAddress common.Address) ([]*big.Int, error) {
	return _SeriesRegistry.Contract.GetArtistPendingCollaboratorSeries(&_SeriesRegistry.CallOpts, artistAddress)
}

// GetArtistPendingCollaboratorSeries is a free data retrieval call binding the contract method 0xee1960cb.
//
// Solidity: function getArtistPendingCollaboratorSeries(address artistAddress) view returns(uint256[])
func (_SeriesRegistry *SeriesRegistryCallerSession) GetArtistPendingCollaboratorSeries(artistAddress common.Address) ([]*big.Int, error) {
	return _SeriesRegistry.Contract.GetArtistPendingCollaboratorSeries(&_SeriesRegistry.CallOpts, artistAddress)
}

// GetArtistSeriesIDs is a free data retrieval call binding the contract method 0x96202631.
//
// Solidity: function getArtistSeriesIDs(address artistAddress) view returns(uint256[])
func (_SeriesRegistry *SeriesRegistryCaller) GetArtistSeriesIDs(opts *bind.CallOpts, artistAddress common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "getArtistSeriesIDs", artistAddress)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetArtistSeriesIDs is a free data retrieval call binding the contract method 0x96202631.
//
// Solidity: function getArtistSeriesIDs(address artistAddress) view returns(uint256[])
func (_SeriesRegistry *SeriesRegistrySession) GetArtistSeriesIDs(artistAddress common.Address) ([]*big.Int, error) {
	return _SeriesRegistry.Contract.GetArtistSeriesIDs(&_SeriesRegistry.CallOpts, artistAddress)
}

// GetArtistSeriesIDs is a free data retrieval call binding the contract method 0x96202631.
//
// Solidity: function getArtistSeriesIDs(address artistAddress) view returns(uint256[])
func (_SeriesRegistry *SeriesRegistryCallerSession) GetArtistSeriesIDs(artistAddress common.Address) ([]*big.Int, error) {
	return _SeriesRegistry.Contract.GetArtistSeriesIDs(&_SeriesRegistry.CallOpts, artistAddress)
}

// GetSeriesArtistAddresses is a free data retrieval call binding the contract method 0x9888892e.
//
// Solidity: function getSeriesArtistAddresses(uint256 seriesID) view returns(address[])
func (_SeriesRegistry *SeriesRegistryCaller) GetSeriesArtistAddresses(opts *bind.CallOpts, seriesID *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "getSeriesArtistAddresses", seriesID)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetSeriesArtistAddresses is a free data retrieval call binding the contract method 0x9888892e.
//
// Solidity: function getSeriesArtistAddresses(uint256 seriesID) view returns(address[])
func (_SeriesRegistry *SeriesRegistrySession) GetSeriesArtistAddresses(seriesID *big.Int) ([]common.Address, error) {
	return _SeriesRegistry.Contract.GetSeriesArtistAddresses(&_SeriesRegistry.CallOpts, seriesID)
}

// GetSeriesArtistAddresses is a free data retrieval call binding the contract method 0x9888892e.
//
// Solidity: function getSeriesArtistAddresses(uint256 seriesID) view returns(address[])
func (_SeriesRegistry *SeriesRegistryCallerSession) GetSeriesArtistAddresses(seriesID *big.Int) ([]common.Address, error) {
	return _SeriesRegistry.Contract.GetSeriesArtistAddresses(&_SeriesRegistry.CallOpts, seriesID)
}

// GetSeriesArtistIDs is a free data retrieval call binding the contract method 0x084ac4b5.
//
// Solidity: function getSeriesArtistIDs(uint256 seriesID) view returns(uint256[])
func (_SeriesRegistry *SeriesRegistryCaller) GetSeriesArtistIDs(opts *bind.CallOpts, seriesID *big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "getSeriesArtistIDs", seriesID)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetSeriesArtistIDs is a free data retrieval call binding the contract method 0x084ac4b5.
//
// Solidity: function getSeriesArtistIDs(uint256 seriesID) view returns(uint256[])
func (_SeriesRegistry *SeriesRegistrySession) GetSeriesArtistIDs(seriesID *big.Int) ([]*big.Int, error) {
	return _SeriesRegistry.Contract.GetSeriesArtistIDs(&_SeriesRegistry.CallOpts, seriesID)
}

// GetSeriesArtistIDs is a free data retrieval call binding the contract method 0x084ac4b5.
//
// Solidity: function getSeriesArtistIDs(uint256 seriesID) view returns(uint256[])
func (_SeriesRegistry *SeriesRegistryCallerSession) GetSeriesArtistIDs(seriesID *big.Int) ([]*big.Int, error) {
	return _SeriesRegistry.Contract.GetSeriesArtistIDs(&_SeriesRegistry.CallOpts, seriesID)
}

// GetSeriesContractTokenDataURI is a free data retrieval call binding the contract method 0x5b4198a4.
//
// Solidity: function getSeriesContractTokenDataURI(uint256 seriesID) view returns(string)
func (_SeriesRegistry *SeriesRegistryCaller) GetSeriesContractTokenDataURI(opts *bind.CallOpts, seriesID *big.Int) (string, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "getSeriesContractTokenDataURI", seriesID)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetSeriesContractTokenDataURI is a free data retrieval call binding the contract method 0x5b4198a4.
//
// Solidity: function getSeriesContractTokenDataURI(uint256 seriesID) view returns(string)
func (_SeriesRegistry *SeriesRegistrySession) GetSeriesContractTokenDataURI(seriesID *big.Int) (string, error) {
	return _SeriesRegistry.Contract.GetSeriesContractTokenDataURI(&_SeriesRegistry.CallOpts, seriesID)
}

// GetSeriesContractTokenDataURI is a free data retrieval call binding the contract method 0x5b4198a4.
//
// Solidity: function getSeriesContractTokenDataURI(uint256 seriesID) view returns(string)
func (_SeriesRegistry *SeriesRegistryCallerSession) GetSeriesContractTokenDataURI(seriesID *big.Int) (string, error) {
	return _SeriesRegistry.Contract.GetSeriesContractTokenDataURI(&_SeriesRegistry.CallOpts, seriesID)
}

// GetSeriesMetadataURI is a free data retrieval call binding the contract method 0xeae21014.
//
// Solidity: function getSeriesMetadataURI(uint256 seriesID) view returns(string)
func (_SeriesRegistry *SeriesRegistryCaller) GetSeriesMetadataURI(opts *bind.CallOpts, seriesID *big.Int) (string, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "getSeriesMetadataURI", seriesID)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetSeriesMetadataURI is a free data retrieval call binding the contract method 0xeae21014.
//
// Solidity: function getSeriesMetadataURI(uint256 seriesID) view returns(string)
func (_SeriesRegistry *SeriesRegistrySession) GetSeriesMetadataURI(seriesID *big.Int) (string, error) {
	return _SeriesRegistry.Contract.GetSeriesMetadataURI(&_SeriesRegistry.CallOpts, seriesID)
}

// GetSeriesMetadataURI is a free data retrieval call binding the contract method 0xeae21014.
//
// Solidity: function getSeriesMetadataURI(uint256 seriesID) view returns(string)
func (_SeriesRegistry *SeriesRegistryCallerSession) GetSeriesMetadataURI(seriesID *big.Int) (string, error) {
	return _SeriesRegistry.Contract.GetSeriesMetadataURI(&_SeriesRegistry.CallOpts, seriesID)
}

// GetSeriesPendingCollaborators is a free data retrieval call binding the contract method 0x199979a2.
//
// Solidity: function getSeriesPendingCollaborators(uint256 seriesID) view returns(address[])
func (_SeriesRegistry *SeriesRegistryCaller) GetSeriesPendingCollaborators(opts *bind.CallOpts, seriesID *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "getSeriesPendingCollaborators", seriesID)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetSeriesPendingCollaborators is a free data retrieval call binding the contract method 0x199979a2.
//
// Solidity: function getSeriesPendingCollaborators(uint256 seriesID) view returns(address[])
func (_SeriesRegistry *SeriesRegistrySession) GetSeriesPendingCollaborators(seriesID *big.Int) ([]common.Address, error) {
	return _SeriesRegistry.Contract.GetSeriesPendingCollaborators(&_SeriesRegistry.CallOpts, seriesID)
}

// GetSeriesPendingCollaborators is a free data retrieval call binding the contract method 0x199979a2.
//
// Solidity: function getSeriesPendingCollaborators(uint256 seriesID) view returns(address[])
func (_SeriesRegistry *SeriesRegistryCallerSession) GetSeriesPendingCollaborators(seriesID *big.Int) ([]common.Address, error) {
	return _SeriesRegistry.Contract.GetSeriesPendingCollaborators(&_SeriesRegistry.CallOpts, seriesID)
}

// HasArtistRevokedOwnerRights is a free data retrieval call binding the contract method 0xcaae3de8.
//
// Solidity: function hasArtistRevokedOwnerRights(address artistAddress) view returns(bool)
func (_SeriesRegistry *SeriesRegistryCaller) HasArtistRevokedOwnerRights(opts *bind.CallOpts, artistAddress common.Address) (bool, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "hasArtistRevokedOwnerRights", artistAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasArtistRevokedOwnerRights is a free data retrieval call binding the contract method 0xcaae3de8.
//
// Solidity: function hasArtistRevokedOwnerRights(address artistAddress) view returns(bool)
func (_SeriesRegistry *SeriesRegistrySession) HasArtistRevokedOwnerRights(artistAddress common.Address) (bool, error) {
	return _SeriesRegistry.Contract.HasArtistRevokedOwnerRights(&_SeriesRegistry.CallOpts, artistAddress)
}

// HasArtistRevokedOwnerRights is a free data retrieval call binding the contract method 0xcaae3de8.
//
// Solidity: function hasArtistRevokedOwnerRights(address artistAddress) view returns(bool)
func (_SeriesRegistry *SeriesRegistryCallerSession) HasArtistRevokedOwnerRights(artistAddress common.Address) (bool, error) {
	return _SeriesRegistry.Contract.HasArtistRevokedOwnerRights(&_SeriesRegistry.CallOpts, artistAddress)
}

// HasUnrevokedArtist is a free data retrieval call binding the contract method 0x4090fd38.
//
// Solidity: function hasUnrevokedArtist(uint256 seriesID) view returns(bool)
func (_SeriesRegistry *SeriesRegistryCaller) HasUnrevokedArtist(opts *bind.CallOpts, seriesID *big.Int) (bool, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "hasUnrevokedArtist", seriesID)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasUnrevokedArtist is a free data retrieval call binding the contract method 0x4090fd38.
//
// Solidity: function hasUnrevokedArtist(uint256 seriesID) view returns(bool)
func (_SeriesRegistry *SeriesRegistrySession) HasUnrevokedArtist(seriesID *big.Int) (bool, error) {
	return _SeriesRegistry.Contract.HasUnrevokedArtist(&_SeriesRegistry.CallOpts, seriesID)
}

// HasUnrevokedArtist is a free data retrieval call binding the contract method 0x4090fd38.
//
// Solidity: function hasUnrevokedArtist(uint256 seriesID) view returns(bool)
func (_SeriesRegistry *SeriesRegistryCallerSession) HasUnrevokedArtist(seriesID *big.Int) (bool, error) {
	return _SeriesRegistry.Contract.HasUnrevokedArtist(&_SeriesRegistry.CallOpts, seriesID)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SeriesRegistry *SeriesRegistryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SeriesRegistry *SeriesRegistrySession) Owner() (common.Address, error) {
	return _SeriesRegistry.Contract.Owner(&_SeriesRegistry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SeriesRegistry *SeriesRegistryCallerSession) Owner() (common.Address, error) {
	return _SeriesRegistry.Contract.Owner(&_SeriesRegistry.CallOpts)
}

// AddSeries is a paid mutator transaction binding the contract method 0x040085d9.
//
// Solidity: function addSeries(address[] artistAddresses, string metadataURI, string tokenIDsMapURI) returns(uint256)
func (_SeriesRegistry *SeriesRegistryTransactor) AddSeries(opts *bind.TransactOpts, artistAddresses []common.Address, metadataURI string, tokenIDsMapURI string) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "addSeries", artistAddresses, metadataURI, tokenIDsMapURI)
}

// AddSeries is a paid mutator transaction binding the contract method 0x040085d9.
//
// Solidity: function addSeries(address[] artistAddresses, string metadataURI, string tokenIDsMapURI) returns(uint256)
func (_SeriesRegistry *SeriesRegistrySession) AddSeries(artistAddresses []common.Address, metadataURI string, tokenIDsMapURI string) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.AddSeries(&_SeriesRegistry.TransactOpts, artistAddresses, metadataURI, tokenIDsMapURI)
}

// AddSeries is a paid mutator transaction binding the contract method 0x040085d9.
//
// Solidity: function addSeries(address[] artistAddresses, string metadataURI, string tokenIDsMapURI) returns(uint256)
func (_SeriesRegistry *SeriesRegistryTransactorSession) AddSeries(artistAddresses []common.Address, metadataURI string, tokenIDsMapURI string) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.AddSeries(&_SeriesRegistry.TransactOpts, artistAddresses, metadataURI, tokenIDsMapURI)
}

// ApproveContractOwnerRights is a paid mutator transaction binding the contract method 0x66c083b9.
//
// Solidity: function approveContractOwnerRights() returns()
func (_SeriesRegistry *SeriesRegistryTransactor) ApproveContractOwnerRights(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "approveContractOwnerRights")
}

// ApproveContractOwnerRights is a paid mutator transaction binding the contract method 0x66c083b9.
//
// Solidity: function approveContractOwnerRights() returns()
func (_SeriesRegistry *SeriesRegistrySession) ApproveContractOwnerRights() (*types.Transaction, error) {
	return _SeriesRegistry.Contract.ApproveContractOwnerRights(&_SeriesRegistry.TransactOpts)
}

// ApproveContractOwnerRights is a paid mutator transaction binding the contract method 0x66c083b9.
//
// Solidity: function approveContractOwnerRights() returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) ApproveContractOwnerRights() (*types.Transaction, error) {
	return _SeriesRegistry.Contract.ApproveContractOwnerRights(&_SeriesRegistry.TransactOpts)
}

// BatchAddSeries is a paid mutator transaction binding the contract method 0xde7ed7f5.
//
// Solidity: function batchAddSeries(address[][] seriesArtists, string[] metadataURIs, string[] tokenIDsMapURIs) returns(uint256[])
func (_SeriesRegistry *SeriesRegistryTransactor) BatchAddSeries(opts *bind.TransactOpts, seriesArtists [][]common.Address, metadataURIs []string, tokenIDsMapURIs []string) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "batchAddSeries", seriesArtists, metadataURIs, tokenIDsMapURIs)
}

// BatchAddSeries is a paid mutator transaction binding the contract method 0xde7ed7f5.
//
// Solidity: function batchAddSeries(address[][] seriesArtists, string[] metadataURIs, string[] tokenIDsMapURIs) returns(uint256[])
func (_SeriesRegistry *SeriesRegistrySession) BatchAddSeries(seriesArtists [][]common.Address, metadataURIs []string, tokenIDsMapURIs []string) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.BatchAddSeries(&_SeriesRegistry.TransactOpts, seriesArtists, metadataURIs, tokenIDsMapURIs)
}

// BatchAddSeries is a paid mutator transaction binding the contract method 0xde7ed7f5.
//
// Solidity: function batchAddSeries(address[][] seriesArtists, string[] metadataURIs, string[] tokenIDsMapURIs) returns(uint256[])
func (_SeriesRegistry *SeriesRegistryTransactorSession) BatchAddSeries(seriesArtists [][]common.Address, metadataURIs []string, tokenIDsMapURIs []string) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.BatchAddSeries(&_SeriesRegistry.TransactOpts, seriesArtists, metadataURIs, tokenIDsMapURIs)
}

// BatchDeleteSeries is a paid mutator transaction binding the contract method 0x8c77b117.
//
// Solidity: function batchDeleteSeries(uint256[] seriesIDs) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) BatchDeleteSeries(opts *bind.TransactOpts, seriesIDs []*big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "batchDeleteSeries", seriesIDs)
}

// BatchDeleteSeries is a paid mutator transaction binding the contract method 0x8c77b117.
//
// Solidity: function batchDeleteSeries(uint256[] seriesIDs) returns()
func (_SeriesRegistry *SeriesRegistrySession) BatchDeleteSeries(seriesIDs []*big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.BatchDeleteSeries(&_SeriesRegistry.TransactOpts, seriesIDs)
}

// BatchDeleteSeries is a paid mutator transaction binding the contract method 0x8c77b117.
//
// Solidity: function batchDeleteSeries(uint256[] seriesIDs) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) BatchDeleteSeries(seriesIDs []*big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.BatchDeleteSeries(&_SeriesRegistry.TransactOpts, seriesIDs)
}

// BatchUpdateSeries is a paid mutator transaction binding the contract method 0x65753a40.
//
// Solidity: function batchUpdateSeries(uint256[] seriesIDs, string[] metadataURIs, string[] tokenIDsMapURIs) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) BatchUpdateSeries(opts *bind.TransactOpts, seriesIDs []*big.Int, metadataURIs []string, tokenIDsMapURIs []string) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "batchUpdateSeries", seriesIDs, metadataURIs, tokenIDsMapURIs)
}

// BatchUpdateSeries is a paid mutator transaction binding the contract method 0x65753a40.
//
// Solidity: function batchUpdateSeries(uint256[] seriesIDs, string[] metadataURIs, string[] tokenIDsMapURIs) returns()
func (_SeriesRegistry *SeriesRegistrySession) BatchUpdateSeries(seriesIDs []*big.Int, metadataURIs []string, tokenIDsMapURIs []string) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.BatchUpdateSeries(&_SeriesRegistry.TransactOpts, seriesIDs, metadataURIs, tokenIDsMapURIs)
}

// BatchUpdateSeries is a paid mutator transaction binding the contract method 0x65753a40.
//
// Solidity: function batchUpdateSeries(uint256[] seriesIDs, string[] metadataURIs, string[] tokenIDsMapURIs) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) BatchUpdateSeries(seriesIDs []*big.Int, metadataURIs []string, tokenIDsMapURIs []string) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.BatchUpdateSeries(&_SeriesRegistry.TransactOpts, seriesIDs, metadataURIs, tokenIDsMapURIs)
}

// CancelProposeCollaborator is a paid mutator transaction binding the contract method 0xeca0ba80.
//
// Solidity: function cancelProposeCollaborator(uint256 seriesID, address proposedArtistAddress) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) CancelProposeCollaborator(opts *bind.TransactOpts, seriesID *big.Int, proposedArtistAddress common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "cancelProposeCollaborator", seriesID, proposedArtistAddress)
}

// CancelProposeCollaborator is a paid mutator transaction binding the contract method 0xeca0ba80.
//
// Solidity: function cancelProposeCollaborator(uint256 seriesID, address proposedArtistAddress) returns()
func (_SeriesRegistry *SeriesRegistrySession) CancelProposeCollaborator(seriesID *big.Int, proposedArtistAddress common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.CancelProposeCollaborator(&_SeriesRegistry.TransactOpts, seriesID, proposedArtistAddress)
}

// CancelProposeCollaborator is a paid mutator transaction binding the contract method 0xeca0ba80.
//
// Solidity: function cancelProposeCollaborator(uint256 seriesID, address proposedArtistAddress) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) CancelProposeCollaborator(seriesID *big.Int, proposedArtistAddress common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.CancelProposeCollaborator(&_SeriesRegistry.TransactOpts, seriesID, proposedArtistAddress)
}

// ConfirmAsCollaborator is a paid mutator transaction binding the contract method 0xec209207.
//
// Solidity: function confirmAsCollaborator(uint256 seriesID) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) ConfirmAsCollaborator(opts *bind.TransactOpts, seriesID *big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "confirmAsCollaborator", seriesID)
}

// ConfirmAsCollaborator is a paid mutator transaction binding the contract method 0xec209207.
//
// Solidity: function confirmAsCollaborator(uint256 seriesID) returns()
func (_SeriesRegistry *SeriesRegistrySession) ConfirmAsCollaborator(seriesID *big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.ConfirmAsCollaborator(&_SeriesRegistry.TransactOpts, seriesID)
}

// ConfirmAsCollaborator is a paid mutator transaction binding the contract method 0xec209207.
//
// Solidity: function confirmAsCollaborator(uint256 seriesID) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) ConfirmAsCollaborator(seriesID *big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.ConfirmAsCollaborator(&_SeriesRegistry.TransactOpts, seriesID)
}

// DeleteSeries is a paid mutator transaction binding the contract method 0x0cc2bc8d.
//
// Solidity: function deleteSeries(uint256 seriesID) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) DeleteSeries(opts *bind.TransactOpts, seriesID *big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "deleteSeries", seriesID)
}

// DeleteSeries is a paid mutator transaction binding the contract method 0x0cc2bc8d.
//
// Solidity: function deleteSeries(uint256 seriesID) returns()
func (_SeriesRegistry *SeriesRegistrySession) DeleteSeries(seriesID *big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.DeleteSeries(&_SeriesRegistry.TransactOpts, seriesID)
}

// DeleteSeries is a paid mutator transaction binding the contract method 0x0cc2bc8d.
//
// Solidity: function deleteSeries(uint256 seriesID) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) DeleteSeries(seriesID *big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.DeleteSeries(&_SeriesRegistry.TransactOpts, seriesID)
}

// OwnerUpdateSeriesArtists is a paid mutator transaction binding the contract method 0xf1b660fe.
//
// Solidity: function ownerUpdateSeriesArtists(uint256 seriesID, address[] artistAddresses) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) OwnerUpdateSeriesArtists(opts *bind.TransactOpts, seriesID *big.Int, artistAddresses []common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "ownerUpdateSeriesArtists", seriesID, artistAddresses)
}

// OwnerUpdateSeriesArtists is a paid mutator transaction binding the contract method 0xf1b660fe.
//
// Solidity: function ownerUpdateSeriesArtists(uint256 seriesID, address[] artistAddresses) returns()
func (_SeriesRegistry *SeriesRegistrySession) OwnerUpdateSeriesArtists(seriesID *big.Int, artistAddresses []common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.OwnerUpdateSeriesArtists(&_SeriesRegistry.TransactOpts, seriesID, artistAddresses)
}

// OwnerUpdateSeriesArtists is a paid mutator transaction binding the contract method 0xf1b660fe.
//
// Solidity: function ownerUpdateSeriesArtists(uint256 seriesID, address[] artistAddresses) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) OwnerUpdateSeriesArtists(seriesID *big.Int, artistAddresses []common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.OwnerUpdateSeriesArtists(&_SeriesRegistry.TransactOpts, seriesID, artistAddresses)
}

// ProposeCollaborator is a paid mutator transaction binding the contract method 0xecd0279b.
//
// Solidity: function proposeCollaborator(uint256 seriesID, address proposedArtistAddress) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) ProposeCollaborator(opts *bind.TransactOpts, seriesID *big.Int, proposedArtistAddress common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "proposeCollaborator", seriesID, proposedArtistAddress)
}

// ProposeCollaborator is a paid mutator transaction binding the contract method 0xecd0279b.
//
// Solidity: function proposeCollaborator(uint256 seriesID, address proposedArtistAddress) returns()
func (_SeriesRegistry *SeriesRegistrySession) ProposeCollaborator(seriesID *big.Int, proposedArtistAddress common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.ProposeCollaborator(&_SeriesRegistry.TransactOpts, seriesID, proposedArtistAddress)
}

// ProposeCollaborator is a paid mutator transaction binding the contract method 0xecd0279b.
//
// Solidity: function proposeCollaborator(uint256 seriesID, address proposedArtistAddress) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) ProposeCollaborator(seriesID *big.Int, proposedArtistAddress common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.ProposeCollaborator(&_SeriesRegistry.TransactOpts, seriesID, proposedArtistAddress)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SeriesRegistry *SeriesRegistryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SeriesRegistry *SeriesRegistrySession) RenounceOwnership() (*types.Transaction, error) {
	return _SeriesRegistry.Contract.RenounceOwnership(&_SeriesRegistry.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _SeriesRegistry.Contract.RenounceOwnership(&_SeriesRegistry.TransactOpts)
}

// ResignFromSeries is a paid mutator transaction binding the contract method 0xd03904db.
//
// Solidity: function resignFromSeries(uint256 seriesID) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) ResignFromSeries(opts *bind.TransactOpts, seriesID *big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "resignFromSeries", seriesID)
}

// ResignFromSeries is a paid mutator transaction binding the contract method 0xd03904db.
//
// Solidity: function resignFromSeries(uint256 seriesID) returns()
func (_SeriesRegistry *SeriesRegistrySession) ResignFromSeries(seriesID *big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.ResignFromSeries(&_SeriesRegistry.TransactOpts, seriesID)
}

// ResignFromSeries is a paid mutator transaction binding the contract method 0xd03904db.
//
// Solidity: function resignFromSeries(uint256 seriesID) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) ResignFromSeries(seriesID *big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.ResignFromSeries(&_SeriesRegistry.TransactOpts, seriesID)
}

// RevokeContractOwnerRights is a paid mutator transaction binding the contract method 0x8b2dfed0.
//
// Solidity: function revokeContractOwnerRights() returns()
func (_SeriesRegistry *SeriesRegistryTransactor) RevokeContractOwnerRights(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "revokeContractOwnerRights")
}

// RevokeContractOwnerRights is a paid mutator transaction binding the contract method 0x8b2dfed0.
//
// Solidity: function revokeContractOwnerRights() returns()
func (_SeriesRegistry *SeriesRegistrySession) RevokeContractOwnerRights() (*types.Transaction, error) {
	return _SeriesRegistry.Contract.RevokeContractOwnerRights(&_SeriesRegistry.TransactOpts)
}

// RevokeContractOwnerRights is a paid mutator transaction binding the contract method 0x8b2dfed0.
//
// Solidity: function revokeContractOwnerRights() returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) RevokeContractOwnerRights() (*types.Transaction, error) {
	return _SeriesRegistry.Contract.RevokeContractOwnerRights(&_SeriesRegistry.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SeriesRegistry *SeriesRegistrySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.TransferOwnership(&_SeriesRegistry.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.TransferOwnership(&_SeriesRegistry.TransactOpts, newOwner)
}

// UpdateArtistAddress is a paid mutator transaction binding the contract method 0xc86e7a19.
//
// Solidity: function updateArtistAddress(uint256 artistID, address newAddress) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) UpdateArtistAddress(opts *bind.TransactOpts, artistID *big.Int, newAddress common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "updateArtistAddress", artistID, newAddress)
}

// UpdateArtistAddress is a paid mutator transaction binding the contract method 0xc86e7a19.
//
// Solidity: function updateArtistAddress(uint256 artistID, address newAddress) returns()
func (_SeriesRegistry *SeriesRegistrySession) UpdateArtistAddress(artistID *big.Int, newAddress common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.UpdateArtistAddress(&_SeriesRegistry.TransactOpts, artistID, newAddress)
}

// UpdateArtistAddress is a paid mutator transaction binding the contract method 0xc86e7a19.
//
// Solidity: function updateArtistAddress(uint256 artistID, address newAddress) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) UpdateArtistAddress(artistID *big.Int, newAddress common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.UpdateArtistAddress(&_SeriesRegistry.TransactOpts, artistID, newAddress)
}

// UpdateSeries is a paid mutator transaction binding the contract method 0x1a1751b9.
//
// Solidity: function updateSeries(uint256 seriesID, string metadataURI, string tokenIDsMapURI) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) UpdateSeries(opts *bind.TransactOpts, seriesID *big.Int, metadataURI string, tokenIDsMapURI string) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "updateSeries", seriesID, metadataURI, tokenIDsMapURI)
}

// UpdateSeries is a paid mutator transaction binding the contract method 0x1a1751b9.
//
// Solidity: function updateSeries(uint256 seriesID, string metadataURI, string tokenIDsMapURI) returns()
func (_SeriesRegistry *SeriesRegistrySession) UpdateSeries(seriesID *big.Int, metadataURI string, tokenIDsMapURI string) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.UpdateSeries(&_SeriesRegistry.TransactOpts, seriesID, metadataURI, tokenIDsMapURI)
}

// UpdateSeries is a paid mutator transaction binding the contract method 0x1a1751b9.
//
// Solidity: function updateSeries(uint256 seriesID, string metadataURI, string tokenIDsMapURI) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) UpdateSeries(seriesID *big.Int, metadataURI string, tokenIDsMapURI string) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.UpdateSeries(&_SeriesRegistry.TransactOpts, seriesID, metadataURI, tokenIDsMapURI)
}

// SeriesRegistryArtistAddressUpdatedIterator is returned from FilterArtistAddressUpdated and is used to iterate over the raw logs and unpacked data for ArtistAddressUpdated events raised by the SeriesRegistry contract.
type SeriesRegistryArtistAddressUpdatedIterator struct {
	Event *SeriesRegistryArtistAddressUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SeriesRegistryArtistAddressUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SeriesRegistryArtistAddressUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SeriesRegistryArtistAddressUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SeriesRegistryArtistAddressUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SeriesRegistryArtistAddressUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SeriesRegistryArtistAddressUpdated represents a ArtistAddressUpdated event raised by the SeriesRegistry contract.
type SeriesRegistryArtistAddressUpdated struct {
	ArtistID   *big.Int
	OldAddress common.Address
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterArtistAddressUpdated is a free log retrieval operation binding the contract event 0xe50ea9c5a98bed1c3d7745e9d87287f7c4d2965769ff76f8c3767e46ce935935.
//
// Solidity: event ArtistAddressUpdated(uint256 indexed artistID, address indexed oldAddress, address indexed newAddress)
func (_SeriesRegistry *SeriesRegistryFilterer) FilterArtistAddressUpdated(opts *bind.FilterOpts, artistID []*big.Int, oldAddress []common.Address, newAddress []common.Address) (*SeriesRegistryArtistAddressUpdatedIterator, error) {

	var artistIDRule []interface{}
	for _, artistIDItem := range artistID {
		artistIDRule = append(artistIDRule, artistIDItem)
	}
	var oldAddressRule []interface{}
	for _, oldAddressItem := range oldAddress {
		oldAddressRule = append(oldAddressRule, oldAddressItem)
	}
	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _SeriesRegistry.contract.FilterLogs(opts, "ArtistAddressUpdated", artistIDRule, oldAddressRule, newAddressRule)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistryArtistAddressUpdatedIterator{contract: _SeriesRegistry.contract, event: "ArtistAddressUpdated", logs: logs, sub: sub}, nil
}

// WatchArtistAddressUpdated is a free log subscription operation binding the contract event 0xe50ea9c5a98bed1c3d7745e9d87287f7c4d2965769ff76f8c3767e46ce935935.
//
// Solidity: event ArtistAddressUpdated(uint256 indexed artistID, address indexed oldAddress, address indexed newAddress)
func (_SeriesRegistry *SeriesRegistryFilterer) WatchArtistAddressUpdated(opts *bind.WatchOpts, sink chan<- *SeriesRegistryArtistAddressUpdated, artistID []*big.Int, oldAddress []common.Address, newAddress []common.Address) (event.Subscription, error) {

	var artistIDRule []interface{}
	for _, artistIDItem := range artistID {
		artistIDRule = append(artistIDRule, artistIDItem)
	}
	var oldAddressRule []interface{}
	for _, oldAddressItem := range oldAddress {
		oldAddressRule = append(oldAddressRule, oldAddressItem)
	}
	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _SeriesRegistry.contract.WatchLogs(opts, "ArtistAddressUpdated", artistIDRule, oldAddressRule, newAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SeriesRegistryArtistAddressUpdated)
				if err := _SeriesRegistry.contract.UnpackLog(event, "ArtistAddressUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseArtistAddressUpdated is a log parse operation binding the contract event 0xe50ea9c5a98bed1c3d7745e9d87287f7c4d2965769ff76f8c3767e46ce935935.
//
// Solidity: event ArtistAddressUpdated(uint256 indexed artistID, address indexed oldAddress, address indexed newAddress)
func (_SeriesRegistry *SeriesRegistryFilterer) ParseArtistAddressUpdated(log types.Log) (*SeriesRegistryArtistAddressUpdated, error) {
	event := new(SeriesRegistryArtistAddressUpdated)
	if err := _SeriesRegistry.contract.UnpackLog(event, "ArtistAddressUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SeriesRegistryCollaboratorConfirmedIterator is returned from FilterCollaboratorConfirmed and is used to iterate over the raw logs and unpacked data for CollaboratorConfirmed events raised by the SeriesRegistry contract.
type SeriesRegistryCollaboratorConfirmedIterator struct {
	Event *SeriesRegistryCollaboratorConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SeriesRegistryCollaboratorConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SeriesRegistryCollaboratorConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SeriesRegistryCollaboratorConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SeriesRegistryCollaboratorConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SeriesRegistryCollaboratorConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SeriesRegistryCollaboratorConfirmed represents a CollaboratorConfirmed event raised by the SeriesRegistry contract.
type SeriesRegistryCollaboratorConfirmed struct {
	SeriesID          *big.Int
	ConfirmedArtistID *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterCollaboratorConfirmed is a free log retrieval operation binding the contract event 0x80cdb6c0478d89b3e023f6165f91dedd19b306d4731d8b552b6513ba375e160a.
//
// Solidity: event CollaboratorConfirmed(uint256 indexed seriesID, uint256 indexed confirmedArtistID)
func (_SeriesRegistry *SeriesRegistryFilterer) FilterCollaboratorConfirmed(opts *bind.FilterOpts, seriesID []*big.Int, confirmedArtistID []*big.Int) (*SeriesRegistryCollaboratorConfirmedIterator, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}
	var confirmedArtistIDRule []interface{}
	for _, confirmedArtistIDItem := range confirmedArtistID {
		confirmedArtistIDRule = append(confirmedArtistIDRule, confirmedArtistIDItem)
	}

	logs, sub, err := _SeriesRegistry.contract.FilterLogs(opts, "CollaboratorConfirmed", seriesIDRule, confirmedArtistIDRule)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistryCollaboratorConfirmedIterator{contract: _SeriesRegistry.contract, event: "CollaboratorConfirmed", logs: logs, sub: sub}, nil
}

// WatchCollaboratorConfirmed is a free log subscription operation binding the contract event 0x80cdb6c0478d89b3e023f6165f91dedd19b306d4731d8b552b6513ba375e160a.
//
// Solidity: event CollaboratorConfirmed(uint256 indexed seriesID, uint256 indexed confirmedArtistID)
func (_SeriesRegistry *SeriesRegistryFilterer) WatchCollaboratorConfirmed(opts *bind.WatchOpts, sink chan<- *SeriesRegistryCollaboratorConfirmed, seriesID []*big.Int, confirmedArtistID []*big.Int) (event.Subscription, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}
	var confirmedArtistIDRule []interface{}
	for _, confirmedArtistIDItem := range confirmedArtistID {
		confirmedArtistIDRule = append(confirmedArtistIDRule, confirmedArtistIDItem)
	}

	logs, sub, err := _SeriesRegistry.contract.WatchLogs(opts, "CollaboratorConfirmed", seriesIDRule, confirmedArtistIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SeriesRegistryCollaboratorConfirmed)
				if err := _SeriesRegistry.contract.UnpackLog(event, "CollaboratorConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCollaboratorConfirmed is a log parse operation binding the contract event 0x80cdb6c0478d89b3e023f6165f91dedd19b306d4731d8b552b6513ba375e160a.
//
// Solidity: event CollaboratorConfirmed(uint256 indexed seriesID, uint256 indexed confirmedArtistID)
func (_SeriesRegistry *SeriesRegistryFilterer) ParseCollaboratorConfirmed(log types.Log) (*SeriesRegistryCollaboratorConfirmed, error) {
	event := new(SeriesRegistryCollaboratorConfirmed)
	if err := _SeriesRegistry.contract.UnpackLog(event, "CollaboratorConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SeriesRegistryCollaboratorProposalCancelledIterator is returned from FilterCollaboratorProposalCancelled and is used to iterate over the raw logs and unpacked data for CollaboratorProposalCancelled events raised by the SeriesRegistry contract.
type SeriesRegistryCollaboratorProposalCancelledIterator struct {
	Event *SeriesRegistryCollaboratorProposalCancelled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SeriesRegistryCollaboratorProposalCancelledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SeriesRegistryCollaboratorProposalCancelled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SeriesRegistryCollaboratorProposalCancelled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SeriesRegistryCollaboratorProposalCancelledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SeriesRegistryCollaboratorProposalCancelledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SeriesRegistryCollaboratorProposalCancelled represents a CollaboratorProposalCancelled event raised by the SeriesRegistry contract.
type SeriesRegistryCollaboratorProposalCancelled struct {
	SeriesID          *big.Int
	ProposerArtistID  *big.Int
	CancelledArtistID *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterCollaboratorProposalCancelled is a free log retrieval operation binding the contract event 0x0f29b8a779c6b715ba37c103fcddfa19cff82ccf4c7197a3d57548500f2ded66.
//
// Solidity: event CollaboratorProposalCancelled(uint256 indexed seriesID, uint256 indexed proposerArtistID, uint256 indexed cancelledArtistID)
func (_SeriesRegistry *SeriesRegistryFilterer) FilterCollaboratorProposalCancelled(opts *bind.FilterOpts, seriesID []*big.Int, proposerArtistID []*big.Int, cancelledArtistID []*big.Int) (*SeriesRegistryCollaboratorProposalCancelledIterator, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}
	var proposerArtistIDRule []interface{}
	for _, proposerArtistIDItem := range proposerArtistID {
		proposerArtistIDRule = append(proposerArtistIDRule, proposerArtistIDItem)
	}
	var cancelledArtistIDRule []interface{}
	for _, cancelledArtistIDItem := range cancelledArtistID {
		cancelledArtistIDRule = append(cancelledArtistIDRule, cancelledArtistIDItem)
	}

	logs, sub, err := _SeriesRegistry.contract.FilterLogs(opts, "CollaboratorProposalCancelled", seriesIDRule, proposerArtistIDRule, cancelledArtistIDRule)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistryCollaboratorProposalCancelledIterator{contract: _SeriesRegistry.contract, event: "CollaboratorProposalCancelled", logs: logs, sub: sub}, nil
}

// WatchCollaboratorProposalCancelled is a free log subscription operation binding the contract event 0x0f29b8a779c6b715ba37c103fcddfa19cff82ccf4c7197a3d57548500f2ded66.
//
// Solidity: event CollaboratorProposalCancelled(uint256 indexed seriesID, uint256 indexed proposerArtistID, uint256 indexed cancelledArtistID)
func (_SeriesRegistry *SeriesRegistryFilterer) WatchCollaboratorProposalCancelled(opts *bind.WatchOpts, sink chan<- *SeriesRegistryCollaboratorProposalCancelled, seriesID []*big.Int, proposerArtistID []*big.Int, cancelledArtistID []*big.Int) (event.Subscription, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}
	var proposerArtistIDRule []interface{}
	for _, proposerArtistIDItem := range proposerArtistID {
		proposerArtistIDRule = append(proposerArtistIDRule, proposerArtistIDItem)
	}
	var cancelledArtistIDRule []interface{}
	for _, cancelledArtistIDItem := range cancelledArtistID {
		cancelledArtistIDRule = append(cancelledArtistIDRule, cancelledArtistIDItem)
	}

	logs, sub, err := _SeriesRegistry.contract.WatchLogs(opts, "CollaboratorProposalCancelled", seriesIDRule, proposerArtistIDRule, cancelledArtistIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SeriesRegistryCollaboratorProposalCancelled)
				if err := _SeriesRegistry.contract.UnpackLog(event, "CollaboratorProposalCancelled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCollaboratorProposalCancelled is a log parse operation binding the contract event 0x0f29b8a779c6b715ba37c103fcddfa19cff82ccf4c7197a3d57548500f2ded66.
//
// Solidity: event CollaboratorProposalCancelled(uint256 indexed seriesID, uint256 indexed proposerArtistID, uint256 indexed cancelledArtistID)
func (_SeriesRegistry *SeriesRegistryFilterer) ParseCollaboratorProposalCancelled(log types.Log) (*SeriesRegistryCollaboratorProposalCancelled, error) {
	event := new(SeriesRegistryCollaboratorProposalCancelled)
	if err := _SeriesRegistry.contract.UnpackLog(event, "CollaboratorProposalCancelled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SeriesRegistryCollaboratorProposedIterator is returned from FilterCollaboratorProposed and is used to iterate over the raw logs and unpacked data for CollaboratorProposed events raised by the SeriesRegistry contract.
type SeriesRegistryCollaboratorProposedIterator struct {
	Event *SeriesRegistryCollaboratorProposed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SeriesRegistryCollaboratorProposedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SeriesRegistryCollaboratorProposed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SeriesRegistryCollaboratorProposed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SeriesRegistryCollaboratorProposedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SeriesRegistryCollaboratorProposedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SeriesRegistryCollaboratorProposed represents a CollaboratorProposed event raised by the SeriesRegistry contract.
type SeriesRegistryCollaboratorProposed struct {
	SeriesID         *big.Int
	ProposedArtistID *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterCollaboratorProposed is a free log retrieval operation binding the contract event 0x9a800b772a9056b3e8522e27a8285c97612e8486a5ac77b1771afd8fb3bfcde5.
//
// Solidity: event CollaboratorProposed(uint256 indexed seriesID, uint256 indexed proposedArtistID)
func (_SeriesRegistry *SeriesRegistryFilterer) FilterCollaboratorProposed(opts *bind.FilterOpts, seriesID []*big.Int, proposedArtistID []*big.Int) (*SeriesRegistryCollaboratorProposedIterator, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}
	var proposedArtistIDRule []interface{}
	for _, proposedArtistIDItem := range proposedArtistID {
		proposedArtistIDRule = append(proposedArtistIDRule, proposedArtistIDItem)
	}

	logs, sub, err := _SeriesRegistry.contract.FilterLogs(opts, "CollaboratorProposed", seriesIDRule, proposedArtistIDRule)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistryCollaboratorProposedIterator{contract: _SeriesRegistry.contract, event: "CollaboratorProposed", logs: logs, sub: sub}, nil
}

// WatchCollaboratorProposed is a free log subscription operation binding the contract event 0x9a800b772a9056b3e8522e27a8285c97612e8486a5ac77b1771afd8fb3bfcde5.
//
// Solidity: event CollaboratorProposed(uint256 indexed seriesID, uint256 indexed proposedArtistID)
func (_SeriesRegistry *SeriesRegistryFilterer) WatchCollaboratorProposed(opts *bind.WatchOpts, sink chan<- *SeriesRegistryCollaboratorProposed, seriesID []*big.Int, proposedArtistID []*big.Int) (event.Subscription, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}
	var proposedArtistIDRule []interface{}
	for _, proposedArtistIDItem := range proposedArtistID {
		proposedArtistIDRule = append(proposedArtistIDRule, proposedArtistIDItem)
	}

	logs, sub, err := _SeriesRegistry.contract.WatchLogs(opts, "CollaboratorProposed", seriesIDRule, proposedArtistIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SeriesRegistryCollaboratorProposed)
				if err := _SeriesRegistry.contract.UnpackLog(event, "CollaboratorProposed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCollaboratorProposed is a log parse operation binding the contract event 0x9a800b772a9056b3e8522e27a8285c97612e8486a5ac77b1771afd8fb3bfcde5.
//
// Solidity: event CollaboratorProposed(uint256 indexed seriesID, uint256 indexed proposedArtistID)
func (_SeriesRegistry *SeriesRegistryFilterer) ParseCollaboratorProposed(log types.Log) (*SeriesRegistryCollaboratorProposed, error) {
	event := new(SeriesRegistryCollaboratorProposed)
	if err := _SeriesRegistry.contract.UnpackLog(event, "CollaboratorProposed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SeriesRegistryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the SeriesRegistry contract.
type SeriesRegistryOwnershipTransferredIterator struct {
	Event *SeriesRegistryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SeriesRegistryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SeriesRegistryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SeriesRegistryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SeriesRegistryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SeriesRegistryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SeriesRegistryOwnershipTransferred represents a OwnershipTransferred event raised by the SeriesRegistry contract.
type SeriesRegistryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SeriesRegistry *SeriesRegistryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*SeriesRegistryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _SeriesRegistry.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistryOwnershipTransferredIterator{contract: _SeriesRegistry.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SeriesRegistry *SeriesRegistryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SeriesRegistryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _SeriesRegistry.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SeriesRegistryOwnershipTransferred)
				if err := _SeriesRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SeriesRegistry *SeriesRegistryFilterer) ParseOwnershipTransferred(log types.Log) (*SeriesRegistryOwnershipTransferred, error) {
	event := new(SeriesRegistryOwnershipTransferred)
	if err := _SeriesRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SeriesRegistrySeriesDeletedIterator is returned from FilterSeriesDeleted and is used to iterate over the raw logs and unpacked data for SeriesDeleted events raised by the SeriesRegistry contract.
type SeriesRegistrySeriesDeletedIterator struct {
	Event *SeriesRegistrySeriesDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SeriesRegistrySeriesDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SeriesRegistrySeriesDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SeriesRegistrySeriesDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SeriesRegistrySeriesDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SeriesRegistrySeriesDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SeriesRegistrySeriesDeleted represents a SeriesDeleted event raised by the SeriesRegistry contract.
type SeriesRegistrySeriesDeleted struct {
	SeriesID *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSeriesDeleted is a free log retrieval operation binding the contract event 0x818454d74e409fb3c80f48282172c975b5e4d44f6c96b4463d34e43bb0fd1d8f.
//
// Solidity: event SeriesDeleted(uint256 indexed seriesID)
func (_SeriesRegistry *SeriesRegistryFilterer) FilterSeriesDeleted(opts *bind.FilterOpts, seriesID []*big.Int) (*SeriesRegistrySeriesDeletedIterator, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}

	logs, sub, err := _SeriesRegistry.contract.FilterLogs(opts, "SeriesDeleted", seriesIDRule)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistrySeriesDeletedIterator{contract: _SeriesRegistry.contract, event: "SeriesDeleted", logs: logs, sub: sub}, nil
}

// WatchSeriesDeleted is a free log subscription operation binding the contract event 0x818454d74e409fb3c80f48282172c975b5e4d44f6c96b4463d34e43bb0fd1d8f.
//
// Solidity: event SeriesDeleted(uint256 indexed seriesID)
func (_SeriesRegistry *SeriesRegistryFilterer) WatchSeriesDeleted(opts *bind.WatchOpts, sink chan<- *SeriesRegistrySeriesDeleted, seriesID []*big.Int) (event.Subscription, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}

	logs, sub, err := _SeriesRegistry.contract.WatchLogs(opts, "SeriesDeleted", seriesIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SeriesRegistrySeriesDeleted)
				if err := _SeriesRegistry.contract.UnpackLog(event, "SeriesDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSeriesDeleted is a log parse operation binding the contract event 0x818454d74e409fb3c80f48282172c975b5e4d44f6c96b4463d34e43bb0fd1d8f.
//
// Solidity: event SeriesDeleted(uint256 indexed seriesID)
func (_SeriesRegistry *SeriesRegistryFilterer) ParseSeriesDeleted(log types.Log) (*SeriesRegistrySeriesDeleted, error) {
	event := new(SeriesRegistrySeriesDeleted)
	if err := _SeriesRegistry.contract.UnpackLog(event, "SeriesDeleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SeriesRegistrySeriesRegisteredIterator is returned from FilterSeriesRegistered and is used to iterate over the raw logs and unpacked data for SeriesRegistered events raised by the SeriesRegistry contract.
type SeriesRegistrySeriesRegisteredIterator struct {
	Event *SeriesRegistrySeriesRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SeriesRegistrySeriesRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SeriesRegistrySeriesRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SeriesRegistrySeriesRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SeriesRegistrySeriesRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SeriesRegistrySeriesRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SeriesRegistrySeriesRegistered represents a SeriesRegistered event raised by the SeriesRegistry contract.
type SeriesRegistrySeriesRegistered struct {
	SeriesID *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSeriesRegistered is a free log retrieval operation binding the contract event 0x8cb83a447339d417e797ed5f819a21204e33c5b170b902a398847cda747e6c08.
//
// Solidity: event SeriesRegistered(uint256 indexed seriesID)
func (_SeriesRegistry *SeriesRegistryFilterer) FilterSeriesRegistered(opts *bind.FilterOpts, seriesID []*big.Int) (*SeriesRegistrySeriesRegisteredIterator, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}

	logs, sub, err := _SeriesRegistry.contract.FilterLogs(opts, "SeriesRegistered", seriesIDRule)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistrySeriesRegisteredIterator{contract: _SeriesRegistry.contract, event: "SeriesRegistered", logs: logs, sub: sub}, nil
}

// WatchSeriesRegistered is a free log subscription operation binding the contract event 0x8cb83a447339d417e797ed5f819a21204e33c5b170b902a398847cda747e6c08.
//
// Solidity: event SeriesRegistered(uint256 indexed seriesID)
func (_SeriesRegistry *SeriesRegistryFilterer) WatchSeriesRegistered(opts *bind.WatchOpts, sink chan<- *SeriesRegistrySeriesRegistered, seriesID []*big.Int) (event.Subscription, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}

	logs, sub, err := _SeriesRegistry.contract.WatchLogs(opts, "SeriesRegistered", seriesIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SeriesRegistrySeriesRegistered)
				if err := _SeriesRegistry.contract.UnpackLog(event, "SeriesRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSeriesRegistered is a log parse operation binding the contract event 0x8cb83a447339d417e797ed5f819a21204e33c5b170b902a398847cda747e6c08.
//
// Solidity: event SeriesRegistered(uint256 indexed seriesID)
func (_SeriesRegistry *SeriesRegistryFilterer) ParseSeriesRegistered(log types.Log) (*SeriesRegistrySeriesRegistered, error) {
	event := new(SeriesRegistrySeriesRegistered)
	if err := _SeriesRegistry.contract.UnpackLog(event, "SeriesRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SeriesRegistrySeriesUpdatedIterator is returned from FilterSeriesUpdated and is used to iterate over the raw logs and unpacked data for SeriesUpdated events raised by the SeriesRegistry contract.
type SeriesRegistrySeriesUpdatedIterator struct {
	Event *SeriesRegistrySeriesUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SeriesRegistrySeriesUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SeriesRegistrySeriesUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SeriesRegistrySeriesUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SeriesRegistrySeriesUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SeriesRegistrySeriesUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SeriesRegistrySeriesUpdated represents a SeriesUpdated event raised by the SeriesRegistry contract.
type SeriesRegistrySeriesUpdated struct {
	SeriesID *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSeriesUpdated is a free log retrieval operation binding the contract event 0xa7a8846ec5f767e9af26f5b715c7968b0a1e927db3ee708b284cad2eea6e36bd.
//
// Solidity: event SeriesUpdated(uint256 indexed seriesID)
func (_SeriesRegistry *SeriesRegistryFilterer) FilterSeriesUpdated(opts *bind.FilterOpts, seriesID []*big.Int) (*SeriesRegistrySeriesUpdatedIterator, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}

	logs, sub, err := _SeriesRegistry.contract.FilterLogs(opts, "SeriesUpdated", seriesIDRule)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistrySeriesUpdatedIterator{contract: _SeriesRegistry.contract, event: "SeriesUpdated", logs: logs, sub: sub}, nil
}

// WatchSeriesUpdated is a free log subscription operation binding the contract event 0xa7a8846ec5f767e9af26f5b715c7968b0a1e927db3ee708b284cad2eea6e36bd.
//
// Solidity: event SeriesUpdated(uint256 indexed seriesID)
func (_SeriesRegistry *SeriesRegistryFilterer) WatchSeriesUpdated(opts *bind.WatchOpts, sink chan<- *SeriesRegistrySeriesUpdated, seriesID []*big.Int) (event.Subscription, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}

	logs, sub, err := _SeriesRegistry.contract.WatchLogs(opts, "SeriesUpdated", seriesIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SeriesRegistrySeriesUpdated)
				if err := _SeriesRegistry.contract.UnpackLog(event, "SeriesUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSeriesUpdated is a log parse operation binding the contract event 0xa7a8846ec5f767e9af26f5b715c7968b0a1e927db3ee708b284cad2eea6e36bd.
//
// Solidity: event SeriesUpdated(uint256 indexed seriesID)
func (_SeriesRegistry *SeriesRegistryFilterer) ParseSeriesUpdated(log types.Log) (*SeriesRegistrySeriesUpdated, error) {
	event := new(SeriesRegistrySeriesUpdated)
	if err := _SeriesRegistry.contract.UnpackLog(event, "SeriesUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
