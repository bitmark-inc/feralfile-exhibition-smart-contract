// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package seriesregistry

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// SeriesRegistryMetaData contains all meta data concerning the SeriesRegistry contract.
var SeriesRegistryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AdministratorCannotSelfAssignError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"ArtistExistsError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegatee\",\"type\":\"address\"}],\"name\":\"DuplicateDelegateeError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seriesID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_inviteeAddress\",\"type\":\"address\"}],\"name\":\"DuplicateInvitationError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"GenericError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seriesID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_inviteeAddress\",\"type\":\"address\"}],\"name\":\"InvitationNotExistsError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seriesID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"NotAdministratorError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"NotArtistError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"NotAuthorizedError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"NotCollaborationInviterError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seriesID\",\"type\":\"uint256\"}],\"name\":\"NotCollaborativeSeriesError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegatee\",\"type\":\"address\"}],\"name\":\"NotDelegateeError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seriesID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_inviteeAddress\",\"type\":\"address\"}],\"name\":\"NotPendingInvitationError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seriesID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"NotSeriesArtistError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SameAddressError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seriesID\",\"type\":\"uint256\"}],\"name\":\"SeriesNotExistsError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"AddDelegatee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assigneeAddress\",\"type\":\"address\"}],\"name\":\"AssignAdministrator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assignerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assigneeAddress\",\"type\":\"address\"}],\"name\":\"AssignSeries\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inviteeAddress\",\"type\":\"address\"}],\"name\":\"CancelCollaborationInvitation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"}],\"name\":\"DeleteSeries\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inviterAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inviteeAddress\",\"type\":\"address\"}],\"name\":\"InviteCollaborator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collaboratorAddress\",\"type\":\"address\"}],\"name\":\"OptInCollaboration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"artistAddress\",\"type\":\"address\"}],\"name\":\"OptOutSeries\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"}],\"name\":\"RegisterSeries\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"RemoveDelegatee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UpdateArtistAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seriesID\",\"type\":\"uint256\"}],\"name\":\"UpdateSeries\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_BATCH_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_artistAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenDataURI\",\"type\":\"string\"}],\"name\":\"registerSeries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_seriesArtists\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_metadataURIs\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_tokenDataURIs\",\"type\":\"string[]\"}],\"name\":\"batchRegisterSeries\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seriesID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenDataURI\",\"type\":\"string\"}],\"name\":\"updateSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_seriesIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_metadataURIs\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_tokenDataURIs\",\"type\":\"string[]\"}],\"name\":\"batchUpdateSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seriesID\",\"type\":\"uint256\"}],\"name\":\"deleteSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_seriesIDs\",\"type\":\"uint256[]\"}],\"name\":\"batchDeleteSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seriesID\",\"type\":\"uint256\"}],\"name\":\"optOutSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seriesID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_assigneeAddress\",\"type\":\"address\"}],\"name\":\"assignSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_seriesIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_assigneeAddresses\",\"type\":\"address[]\"}],\"name\":\"batchAssignSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seriesID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_inviteeAddress\",\"type\":\"address\"}],\"name\":\"inviteCollaborator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_seriesIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_collaboratorAddresses\",\"type\":\"address[]\"}],\"name\":\"batchInviteCollaborators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seriesID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_inviteeAddress\",\"type\":\"address\"}],\"name\":\"cancelCollaborationInvitation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_seriesIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_inviteeAddresses\",\"type\":\"address[]\"}],\"name\":\"batchCancelCollaborationInvitations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seriesID\",\"type\":\"uint256\"}],\"name\":\"optInCollaboration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_seriesIDs\",\"type\":\"uint256[]\"}],\"name\":\"batchOptInCollaboration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateArtistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegatee\",\"type\":\"address\"}],\"name\":\"addDelegatee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_delegatees\",\"type\":\"address[]\"}],\"name\":\"batchAddDelegatees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegatee\",\"type\":\"address\"}],\"name\":\"removeDelegatee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_delegatees\",\"type\":\"address[]\"}],\"name\":\"batchRemoveDelegatees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seriesID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_assigneeAddress\",\"type\":\"address\"}],\"name\":\"assignAdministrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSeriesIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSeries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seriesID\",\"type\":\"uint256\"}],\"name\":\"getSeriesAdministratorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seriesID\",\"type\":\"uint256\"}],\"name\":\"getSeriesAdministratorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seriesID\",\"type\":\"uint256\"}],\"name\":\"getSeriesArtistIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seriesID\",\"type\":\"uint256\"}],\"name\":\"getSeriesArtistAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seriesID\",\"type\":\"uint256\"}],\"name\":\"getSeriesMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seriesID\",\"type\":\"uint256\"}],\"name\":\"getSeriesTokenDataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_artistAddress\",\"type\":\"address\"}],\"name\":\"getArtistSeriesIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_artistAddress\",\"type\":\"address\"}],\"name\":\"getTotalArtistSeries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_artistID\",\"type\":\"uint256\"}],\"name\":\"getArtistAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_artistAddress\",\"type\":\"address\"}],\"name\":\"getArtistID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seriesID\",\"type\":\"uint256\"}],\"name\":\"getCollaborationInvitees\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_invitee\",\"type\":\"address\"}],\"name\":\"getCollaborationInviteeSeriesIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inviter\",\"type\":\"address\"}],\"name\":\"getCollaborationInviterSeriesIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegatorAddress\",\"type\":\"address\"}],\"name\":\"getDelegatees\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seriesID\",\"type\":\"uint256\"}],\"name\":\"getSeriesDelegatees\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405260016000556001805534801561001957600080fd5b50613843806100296000396000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c8063789ba6641161013b578063b2466822116100b8578063d9cf71021161007c578063d9cf71021461054e578063df219b041461056e578063eae2101414610581578063f10f6fb514610594578063f8e40f41146105a757600080fd5b8063b2466822146104fa578063b784c9661461050d578063c7b62eee14610520578063cab0784c14610533578063cfdbf2541461054657600080fd5b8063916b6f2b116100ff578063916b6f2b14610462578063936632351461048b57806396202631146104c15780639888892e146104d45780639d6144dc146104e757600080fd5b8063789ba664146103e05780637baca6cd146103f3578063865ed23f146104345780638a84d445146104475780638c77b1171461044f57600080fd5b80633e1589e5116101c957806361c7c74f1161018d57806361c7c74f1461037457806365753a40146103945780636937b20f146103a757806369ea733e146103ba5780636e716ecb146103cd57600080fd5b80633e1589e51461031557806340595e9d1461032857806343249b4b1461033b57806357367fed1461034e5780635fa54fd31461036157600080fd5b806317a9cffb1161021057806317a9cffb146102a65780631826f230146102b95780631a1751b9146102cf5780632fd455b0146102e2578063360bf7ad1461030257600080fd5b80630548955814610242578063084ac4b5146102575780630cc2bc8d146102805780631417957b14610293575b600080fd5b610255610250366004613094565b6105ba565b005b61026a6102653660046130af565b6105c6565b60405161027791906130c8565b60405180910390f35b61025561028e3660046130af565b6105e9565b6102556102a13660046130af565b6105f2565b61026a6102b4366004613094565b610748565b6102c161076c565b604051908152602001610277565b6102556102dd366004613154565b61077d565b6102f56102f03660046130af565b6107f8565b60405161027791906131cd565b61025561031036600461325f565b61089d565b61025561032336600461325f565b61090c565b6102556103363660046132ca565b610973565b6102556103493660046132f6565b610b33565b61025561035c3660046132f6565b610b86565b61025561036f3660046132ca565b610bd3565b6103876103823660046130af565b610be1565b6040516102779190613337565b6102556103a2366004613378565b610bfb565b61026a6103b5366004613094565b610d0b565b61026a6103c8366004613378565b610d2f565b6102556103db366004613094565b610eb0565b6102556103ee36600461325f565b610eb9565b61041c6104013660046130af565b6000908152600360205260409020546001600160a01b031690565b6040516001600160a01b039091168152602001610277565b610387610442366004613094565b610f21565b61026a610f45565b61025561045d3660046132f6565b610f51565b6102c1610470366004613094565b6001600160a01b031660009081526002602052604090205490565b61041c6104993660046130af565b600090815260076020908152604080832054835260039091529020546001600160a01b031690565b61026a6104cf366004613094565b610fca565b6103876104e23660046130af565b611005565b6102c16104f5366004613094565b6110f2565b6103876105083660046130af565b611121565b61025561051b366004613094565b61113b565b61025561052e3660046130af565b61116b565b6102556105413660046132ca565b611174565b6102c1603281565b6102c161055c3660046130af565b60009081526007602052604090205490565b61025561057c3660046132ca565b61117e565b6102f561058f3660046130af565b611189565b6102c16105a2366004613411565b6111a9565b6102556105b53660046132f6565b611229565b6105c3816112a2565b50565b60008181526007602052604090206060906105e390600101611414565b92915050565b6105c381611421565b600081815260076020526040902060030180548291906106119061344e565b905060000361063b576040516334467b3f60e01b8152600481018290526024015b60405180910390fd5b8161064581611569565b610664576040516307e44e0560e41b8152336004820152602401610632565b3360008181526002602052604090205480158061069b57506000818152600460209081526040808320888452600101909152902054155b156106c4576040516307e44e0560e41b81526001600160a01b0383166004820152602401610632565b60008581526007602052604090206001906106e09082016115af565b1161070157604051631554b6ab60e21b815260048101869052602401610632565b61070b85826115b9565b6040516001600160a01b0383169086907fea7a51899c6e1e1b64a73aba8ff9ce974a129f879f83343326f6c09d4283462090600090a35050505050565b6001600160a01b0381166000908152600d602052604090206060906105e390611414565b600061077860086115af565b905090565b6107f18585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8901819004810282018101909252878152925087915086908190840183828082843760009201919091525061170292505050565b5050505050565b60008181526007602052604090206004018054606091906108189061344e565b80601f01602080910402602001604051908101604052809291908181526020018280546108449061344e565b80156108915780601f1061086657610100808354040283529160200191610891565b820191906000526020600020905b81548152906001019060200180831161087457829003601f168201915b50505050509050919050565b826108a981848461186f565b60005b81811015610904576108fc8686838181106108c9576108c9613488565b905060200201358585848181106108e2576108e2613488565b90506020020160208101906108f79190613094565b6118fe565b6001016108ac565b505050505050565b8261091881848461186f565b60005b818110156109045761096b86868381811061093857610938613488565b9050602002013585858481811061095157610951613488565b90506020020160208101906109669190613094565b611af1565b60010161091b565b600082815260076020526040902060030180548391906109929061344e565b90506000036109b7576040516334467b3f60e01b815260048101829052602401610632565b826109c181611beb565b6109e75760405163a7d3b4a560e01b815260048101829052336024820152604401610632565b6001600160a01b038316610a3e57604051630313cb6760e61b815260206004820152601d60248201527f61646d696e6973747261746f722061646472657373206973207a65726f0000006044820152606401610632565b336001600160a01b0384168103610a735760405163ae788c0360e01b81526001600160a01b0385166004820152602401610632565b6001600160a01b038416600090815260026020526040902054801580610ab357506000868152600760209081526040808320848452600201909152902054155b15610ae35760405163e2662bbf60e01b8152600481018790526001600160a01b0386166024820152604401610632565b600086815260076020526040808220839055516001600160a01b03808816929085169189917ff1c27996c52001dc65fb53c939a65e9263ff67153f1e734a12c3d3a151ac408391a4505050505050565b610b3d8282611c23565b8060005b81811015610b8057610b78848483818110610b5e57610b5e613488565b9050602002016020810190610b739190613094565b6112a2565b600101610b41565b50505050565b610b908282611c23565b8060005b81811015610b8057610bcb848483818110610bb157610bb1613488565b9050602002016020810190610bc69190613094565b611cc0565b600101610b94565b610bdd8282611af1565b5050565b60008181526006602052604090206060906105e390611414565b84610c1981610c0a86886134e4565b610c1485876134e4565b611e28565b60005b81811015610d0157610cf9888883818110610c3957610c39613488565b90506020020135878784818110610c5257610c52613488565b9050602002810190610c6491906135b8565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250899250889150869050818110610cad57610cad613488565b9050602002810190610cbf91906135b8565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061170292505050565b600101610c1c565b5050505050505050565b6001600160a01b0381166000908152600c602052604090206060906105e390611414565b606085610d4a81610d4087896134e4565b610c1486886134e4565b6000816001600160401b03811115610d6457610d6461349e565b604051908082528060200260200182016040528015610d8d578160200160208202803683370190505b50905060005b82811015610ea357610e7e8a8a83818110610db057610db0613488565b9050602002016020810190610dc59190613094565b898984818110610dd757610dd7613488565b9050602002810190610de991906135b8565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a9150869050818110610e3257610e32613488565b9050602002810190610e4491906135b8565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ec192505050565b828281518110610e9057610e90613488565b6020908102919091010152600101610d93565b5098975050505050505050565b6105c381611cc0565b82610ec581848461186f565b60005b8181101561090457610f19868683818110610ee557610ee5613488565b9050602002013533868685818110610eff57610eff613488565b9050602002016020810190610f149190613094565b612111565b600101610ec8565b6001600160a01b03811660009081526005602052604090206060906105e390611414565b60606107786008611414565b806000819003610f7457604051630313cb6760e61b8152600401610632906135fe565b6032811115610f9657604051630313cb6760e61b81526004016106329061362b565b60005b81811015610b8057610fc2848483818110610fb657610fb6613488565b90506020020135611421565b600101610f99565b6001600160a01b038116600090815260026020908152604080832054808452600490925290912060609190610ffe90611414565b9392505050565b60008181526007602052604081206060919061102390600101611414565b9050600081516001600160401b038111156110405761104061349e565b604051908082528060200260200182016040528015611069578160200160208202803683370190505b50905060005b82518110156110ea576003600084838151811061108e5761108e613488565b6020026020010151815260200190815260200160002060009054906101000a90046001600160a01b03168282815181106110ca576110ca613488565b6001600160a01b039092166020928302919091019091015260010161106f565b509392505050565b6001600160a01b03811660009081526002602090815260408083205480845260049092528220610ffe906115af565b6000818152600b602052604090206060906105e390611414565b6001600160a01b03811660009081526002602052604090205415611162576105c38161233e565b6105c381612423565b6105c381612677565b610bdd82826118fe565b610bdd823383612111565b60008181526007602052604090206003018054606091906108189061344e565b600061121f8686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881529250889150879081908401838280828437600092019190915250611ec192505050565b9695505050505050565b80600081900361124c57604051630313cb6760e61b8152600401610632906135fe565b603281111561126e57604051630313cb6760e61b81526004016106329061362b565b60005b81811015610b805761129a84848381811061128e5761128e613488565b90506020020135612677565b600101611271565b6001600160a01b0381166112f557604051630313cb6760e61b815260206004820152601960248201527864656c6567617465652061646472657373206973207a65726f60381b6044820152606401610632565b33600081815260056020526040812061130e9084612716565b9050806113415760405163d4f09fb760e01b81526001600160a01b03808416600483015284166024820152604401610632565b6001600160a01b03821660009081526002602052604090205480156113ce576000818152600460205260408120611377906115af565b905060005b818110156113cb57600083815260046020526040812061139c908361272b565b60008181526006602052604090209091506113b79088612716565b506113c28188612737565b5060010161137c565b50505b836001600160a01b0316836001600160a01b03167f8732c78d676602017c04aba5c294355b037bbb1e67979ccbcada1f54b4c2238f60405160405180910390a350505050565b60606000610ffe8361284b565b600081815260076020526040902060030180548291906114409061344e565b9050600003611465576040516334467b3f60e01b815260048101829052602401610632565b8161146f81611beb565b6114955760405163a7d3b4a560e01b815260048101829052336024820152604401610632565b61149e836128a6565b60008381526006602052604081209081816114b9828261300b565b50505060008481526007602052604081209091506114d990600101611414565b90506114e5848261298a565b60008481526007602052604081208181559060018201818181611508828261300b565b5061151b92505050600383016000613029565b611529600483016000613029565b5061153790506008856129c2565b5060405184907fd1cb5d9dfefdfe2dda1152786a83292f2b48e6c71981358d0f8b9eb7dd92d6f490600090a250505050565b336000908152600260205260408120548015801590610ffe57506000818152600460205260409020610ffe90845b60009081526001919091016020526040902054151590565b60006105e3825490565b806000036115fd57604051630313cb6760e61b815260206004820152601060248201526f185c9d1a5cdd081b9bdd08199bdd5b9960821b6044820152606401610632565b60008181526003602090815260408083205485845260079092529091206001600160a01b039091169060010161163381846129c2565b50600083815260046020526040902061164c90856129c2565b506000848152600760205260409020548390036116a357600061166e826115af565b11156116935761167f81600061272b565b6000858152600760205260409020556116a3565b6000848152600760205260408120555b60008381526004602052604090206116ba906115af565b6000036116f8576001600160a01b03821660009081526002602090815260408083208390558583526003909152902080546001600160a01b03191690555b610b808483612737565b600083815260076020526040902060030180548491906117219061344e565b9050600003611746576040516334467b3f60e01b815260048101829052602401610632565b8361175081611569565b1580156117635750611761816129ce565b155b156117835760405163458a16af60e01b8152336004820152602401610632565b83516000036117c957604051630313cb6760e61b8152602060048201526011602482015270656d707479206d6574616461746155524960781b6044820152606401610632565b825160000361181057604051630313cb6760e61b8152602060048201526012602482015271656d70747920746f6b656e4461746155524960701b6044820152606401610632565b60008581526007602052604090206003810161182c86826136a8565b506004810161183b85826136a8565b5060405186907f799805152d6bdc2303ac0dbac07df8ecbd5946b3f66426ab316f5f367087609690600090a2505050505050565b8260000361189057604051630313cb6760e61b8152600401610632906135fe565b60328311156118b257604051630313cb6760e61b81526004016106329061362b565b8083146118f957604051630313cb6760e61b81526020600482015260146024820152730c2e4e4c2f298cadccee8d040dad2e6dac2e8c6d60631b6044820152606401610632565b505050565b8161190881611569565b611927576040516307e44e0560e41b8152336004820152602401610632565b6001600160a01b03821661197957604051630313cb6760e61b815260206004820152601860248201527761737369676e65652061646472657373206973207a65726f60401b6044820152606401610632565b33600081815260026020526040812054908190036119b5576040516307e44e0560e41b81526001600160a01b0383166004820152602401610632565b836001600160a01b0316826001600160a01b0316036119f257604051633102d3f560e21b81526001600160a01b0383166004820152602401610632565b6001600160a01b0384166000908152600260205260409020548015801590611a355750600086815260076020908152604080832084845260020190915290205415155b15611a5e5760405163e548b3a560e01b81526001600160a01b0386166004820152602401610632565b611a6886866129e6565b600087815260076020526040902054909150829003611a935760008681526007602052604090208190555b611a9d86836115b9565b611aa8868487612a8a565b846001600160a01b0316836001600160a01b0316877f848e74caa538f5af05a1af3c186cca1e9d0c6f0c25995648face20eea1e930c760405160405180910390a4505050505050565b60008281526007602052604090206003018054839190611b109061344e565b9050600003611b35576040516334467b3f60e01b815260048101829052602401610632565b82826001600160a01b038116611b5e57604051630313cb6760e61b815260040161063290613767565b6000828152600a602090815260408083206001600160a01b038086168552925290912054163314611ba457604051639f5eac0560e01b8152336004820152602401610632565b611bae8585612b62565b6040516001600160a01b0385169086907f7d11c384ca33a803f892b9fa58805d58d316b4eea4c5850cdb2663653a317aaa90600090a35050505050565b33600090815260026020526040812054808203611c0b5750600092915050565b60009283526007602052604090922054909114919050565b6000819003611c6e57604051630313cb6760e61b815260206004820152601660248201527564656c656761746565436f756e74206973207a65726f60501b6044820152606401610632565b6032811115610bdd57604051630313cb6760e61b815260206004820152601b60248201527f64656c656761746565436f756e7420697320746f6f206c6172676500000000006044820152606401610632565b6001600160a01b038116611d1357604051630313cb6760e61b815260206004820152601960248201527864656c6567617465652061646472657373206973207a65726f60381b6044820152606401610632565b336000818152600560205260408120611d2c9084612c32565b905080611d5f576040516325f98aa960e11b81526001600160a01b03808416600483015284166024820152604401610632565b6001600160a01b0382166000908152600260205260409020548015611de2576000818152600460205260408120611d95906115af565b905060005b81811015611ddf576000838152600460205260408120611dba908361272b565b6000818152600660205260409020909150611dd59088612c32565b5050600101611d9a565b50505b836001600160a01b0316836001600160a01b03167f1c4fb51b751d47c5288bd6a3f62304d662450ff9536b133db14845985c44db6960405160405180910390a350505050565b82600003611e4957604051630313cb6760e61b8152600401610632906135fe565b6032831115611e6b57604051630313cb6760e61b81526004016106329061362b565b815183141580611e7c575080518314155b156118f957604051630313cb6760e61b81526020600482015260146024820152730c2e4e4c2f298cadccee8d040dad2e6dac2e8c6d60631b6044820152606401610632565b60006001600160a01b038416611f1357604051630313cb6760e61b81526020600482015260166024820152756172746973742061646472657373206973207a65726f60501b6044820152606401610632565b8251600003611f5957604051630313cb6760e61b8152602060048201526011602482015270656d707479206d6574616461746155524960781b6044820152606401610632565b8151600003611fa057604051630313cb6760e61b8152602060048201526012602482015271656d70747920746f6b656e4461746155524960701b6044820152606401610632565b6001600160a01b0384163314158015611fbf5750611fbd84612c47565b155b15611fdf5760405163458a16af60e01b8152336004820152602401610632565b600080548180611fee836137b4565b9091555060008181526007602052604090209091506003810161201186826136a8565b506004810161202085826136a8565b5061202c600883612c69565b50600061203983886129e6565b8083556001600160a01b038816600090815260056020526040812091925090612061906115af565b11156120db576001600160a01b0387166000908152600560205260408120612088906115af565b905060005b818110156120d8576001600160a01b03891660009081526005602052604090206120cf906120bb908361272b565b600087815260066020526040902090612c32565b5060010161208d565b50505b60405183907f55d82c1e0fbf557aad06476685a2e64309e639e7b9763ffc3cffce16cb33f68990600090a2509095945050505050565b600083815260076020526040902060030180548491906121309061344e565b9050600003612155576040516334467b3f60e01b815260048101829052602401610632565b8361215f81611569565b1580156121725750612170816129ce565b155b156121925760405163458a16af60e01b8152336004820152602401610632565b6001600160a01b0383166121b957604051630313cb6760e61b815260040161063290613767565b6000858152600b602052604090206121d19084612c75565b1561220157604051630f520f3b60e21b8152600481018690526001600160a01b0384166024820152604401610632565b6001600160a01b03831660009081526002602052604090205480158015906122445750600081815260046020908152604080832089845260010190915290205415155b1561226d5760405163e548b3a560e01b81526001600160a01b0385166004820152602401610632565b6001600160a01b0384166000908152600c6020526040902061228f9087612c69565b506000868152600b602052604090206122a89085612c32565b506000868152600a602090815260408083206001600160a01b03888116855290835281842080546001600160a01b031916918a1691821790558352600d90915290206122f49087612c69565b50836001600160a01b0316856001600160a01b0316877f069f1ecfa7d3970ee2c71ac390ebf45d40b6532982dc5e879b449dfc2470416a60405160405180910390a4505050505050565b6001600160a01b03811661239057604051630313cb6760e61b815260206004820152601860248201527761737369676e65652061646472657373206973207a65726f60401b6044820152606401610632565b33600081815260026020526040812054908190036123cc576040516307e44e0560e41b81526001600160a01b0383166004820152602401610632565b6000818152600460205260408120906123e4826115af565b90505b80156107f15760006124046123fd6001846137cd565b849061272b565b905061241081876118fe565b508061241b816137e0565b9150506123e7565b336000818152600260205260408120549081900361245f576040516307e44e0560e41b81526001600160a01b0383166004820152602401610632565b826001600160a01b0316826001600160a01b03160361249c57604051633102d3f560e21b81526001600160a01b0383166004820152602401610632565b6001600160a01b0383166124e957604051630313cb6760e61b81526020600482015260136024820152726e65772061646472657373206973207a65726f60681b6044820152606401610632565b6001600160a01b0380831660009081526002602090815260408083208390559286168083528383208590558483526003825283832080546001600160a01b03191690911790556004905290812061253f90611414565b905060005b815181101561263057600082828151811061256157612561613488565b60200260200101519050612576818688612a8a565b612581818688612c97565b6001600160a01b03851660009081526005602052604081206125a290611414565b905060005b81518110156126255760008282815181106125c4576125c4613488565b6020026020010151905061260584600d6000846001600160a01b03166001600160a01b0316815260200190815260200160002061159790919063ffffffff16565b61261257506001016125a7565b61261c8482612737565b506001016125a7565b505050600101612544565b50836001600160a01b0316836001600160a01b03167f4908f8df298e29e82b08d2367b89cc9e0a041d1fa94df05fb14872975cd5659760405160405180910390a350505050565b600081815260076020526040902060030180548291906126969061344e565b90506000036126bb576040516334467b3f60e01b815260048101829052602401610632565b336126c68382612d91565b6126d083826129e6565b506126db8382612b62565b6040516001600160a01b0382169084907ff1be82cf03ce2483decce6c97c3580b7298a5d3ba618b98bc41e7c208007f22f90600090a3505050565b6000610ffe836001600160a01b038416612dff565b6000610ffe8383612ef2565b6000828152600b6020526040812061274e90611414565b80519091505b8015612828576000826127686001846137cd565b8151811061277857612778613488565b6020908102919091018101516000878152600a835260408082206001600160a01b038085168452945290205490925081861691160361281e576001600160a01b0381166000908152600c602052604090206127d390866129c2565b506000858152600b602052604090206127ec9082612716565b506000858152600a602090815260408083206001600160a01b0385168452909152902080546001600160a01b03191690555b5060001901612754565b506001600160a01b0382166000908152600d60205260409020610b8090846129c2565b60608160000180548060200260200160405190810160405280929190818152602001828054801561089157602002820191906000526020600020905b8154815260200190600101908083116128875750505050509050919050565b6000818152600b60205260408120906128be826115af565b905060005b818110156129655760006128d7848361272b565b6000868152600a602090815260408083206001600160a01b03808616855290835281842054600c9093529220929350169061291290876129c2565b506000868152600a602090815260408083206001600160a01b03808716855290835281842080546001600160a01b031916905584168352600d909152902061295a90876129c2565b5050506001016128c3565b506000838152600b60205260408120908181612981828261300b565b50505050505050565b805160005b81811015610b80576129ba848483815181106129ad576129ad613488565b60200260200101516115b9565b60010161298f565b6000610ffe8383612dff565b60008181526006602052604081206105e39033612c75565b6001600160a01b038116600090815260026020526040812054808203612a565760018054906000612a16836137b4565b909155506001600160a01b03841660008181526002602090815260408083208590558483526003909152902080546001600160a01b031916909117905590505b6000818152600460205260409020612a6e9085612c69565b5060008481526007602052604090206110ea9060010182612c69565b60008381526006602090815260408083206001600160a01b038616845260059092528220909190612aba90611414565b905060005b8151811015612afd57612af4828281518110612add57612add613488565b60200260200101518461271690919063ffffffff16565b50600101612abf565b506001600160a01b0383166000908152600560205260408120612b1f90611414565b905060005b815181101561298157612b59828281518110612b4257612b42613488565b602002602001015185612c3290919063ffffffff16565b50600101612b24565b6000828152600a602090815260408083206001600160a01b03808616855290835281842054600c9093529220911690612b9b90846129c2565b506000838152600b60205260409020612bb49083612716565b506000838152600a602090815260408083206001600160a01b0386168452825280832080546001600160a01b0319169055858352600b9091529020612bf8906115af565b1580612c0b5750612c098382612f1c565b155b156118f9576001600160a01b0381166000908152600d60205260409020610b8090846129c2565b6000610ffe836001600160a01b038416612fbc565b6001600160a01b03811660009081526005602052604081206105e39033612c75565b6000610ffe8383612fbc565b6001600160a01b03811660009081526001830160205260408120541515610ffe565b6000838152600b60205260408120612cae90611414565b905060005b8151811015612d4b576000828281518110612cd057612cd0613488565b6020908102919091018101516000888152600a835260408082206001600160a01b0380851684529452902054909250818716911603612d42576000868152600a602090815260408083206001600160a01b038581168552925290912080546001600160a01b0319169186169190911790555b50600101612cb3565b506001600160a01b0383166000908152600d60205260409020612d6e90856129c2565b506001600160a01b0382166000908152600d602052604090206107f19085612c69565b6001600160a01b038116612db857604051630313cb6760e61b815260040161063290613767565b6000828152600b60205260409020612dd09082612c75565b610bdd57604051634f30ed2560e01b8152600481018390526001600160a01b0382166024820152604401610632565b60008181526001830160205260408120548015612ee8576000612e236001836137cd565b8554909150600090612e37906001906137cd565b9050818114612e9c576000866000018281548110612e5757612e57613488565b9060005260206000200154905080876000018481548110612e7a57612e7a613488565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612ead57612ead6137f7565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105e3565b60009150506105e3565b6000826000018281548110612f0957612f09613488565b9060005260206000200154905092915050565b6000828152600b602052604081208190612f3590611414565b905060005b8151811015612fb1576000858152600a6020526040812083516001600160a01b0387169290859085908110612f7157612f71613488565b6020908102919091018101516001600160a01b03908116835290820192909252604001600020541603612fa9576001925050506105e3565b600101612f3a565b506000949350505050565b6000818152600183016020526040812054613003575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105e3565b5060006105e3565b50805460008255906000526020600020908101906105c3919061305f565b5080546130359061344e565b6000825580601f10613045575050565b601f0160209004906000526020600020908101906105c391905b5b808211156130745760008155600101613060565b5090565b80356001600160a01b038116811461308f57600080fd5b919050565b6000602082840312156130a657600080fd5b610ffe82613078565b6000602082840312156130c157600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015613100578351835292840192918401916001016130e4565b50909695505050505050565b60008083601f84011261311e57600080fd5b5081356001600160401b0381111561313557600080fd5b60208301915083602082850101111561314d57600080fd5b9250929050565b60008060008060006060868803121561316c57600080fd5b8535945060208601356001600160401b038082111561318a57600080fd5b61319689838a0161310c565b909650945060408801359150808211156131af57600080fd5b506131bc8882890161310c565b969995985093965092949392505050565b600060208083528351808285015260005b818110156131fa578581018301518582016040015282016131de565b506000604082860101526040601f19601f8301168501019250505092915050565b60008083601f84011261322d57600080fd5b5081356001600160401b0381111561324457600080fd5b6020830191508360208260051b850101111561314d57600080fd5b6000806000806040858703121561327557600080fd5b84356001600160401b038082111561328c57600080fd5b6132988883890161321b565b909650945060208701359150808211156132b157600080fd5b506132be8782880161321b565b95989497509550505050565b600080604083850312156132dd57600080fd5b823591506132ed60208401613078565b90509250929050565b6000806020838503121561330957600080fd5b82356001600160401b0381111561331f57600080fd5b61332b8582860161321b565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156131005783516001600160a01b031683529284019291840191600101613353565b6000806000806000806060878903121561339157600080fd5b86356001600160401b03808211156133a857600080fd5b6133b48a838b0161321b565b909850965060208901359150808211156133cd57600080fd5b6133d98a838b0161321b565b909650945060408901359150808211156133f257600080fd5b506133ff89828a0161321b565b979a9699509497509295939492505050565b60008060008060006060868803121561342957600080fd5b61343286613078565b945060208601356001600160401b038082111561318a57600080fd5b600181811c9082168061346257607f821691505b60208210810361348257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156134dc576134dc61349e565b604052919050565b60006001600160401b03808411156134fe576134fe61349e565b8360051b602061350f8183016134b4565b86815291850191818101903684111561352757600080fd5b865b848110156135ac578035868111156135415760008081fd5b8801601f36818301126135545760008081fd5b8135888111156135665761356661349e565b613577818301601f191688016134b4565b9150808252368782850101111561358e5760008081fd5b80878401888401376000908201870152845250918301918301613529565b50979650505050505050565b6000808335601e198436030181126135cf57600080fd5b8301803591506001600160401b038211156135e957600080fd5b60200191503681900382131561314d57600080fd5b602080825260139082015272736572696573436f756e74206973207a65726f60681b604082015260600190565b60208082526018908201527f736572696573436f756e7420697320746f6f206c617267650000000000000000604082015260600190565b601f8211156118f957600081815260208120601f850160051c810160208610156136895750805b601f850160051c820191505b8181101561090457828155600101613695565b81516001600160401b038111156136c1576136c161349e565b6136d5816136cf845461344e565b84613662565b602080601f83116001811461370a57600084156136f25750858301515b600019600386901b1c1916600185901b178555610904565b600085815260208120601f198616915b828110156137395788860151825594840194600190910190840161371a565b50858210156137575787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526017908201527f696e76697465652061646472657373206973207a65726f000000000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000600182016137c6576137c661379e565b5060010190565b818103818111156105e3576105e361379e565b6000816137ef576137ef61379e565b506000190190565b634e487b7160e01b600052603160045260246000fdfea26469706673582212205c22bcc3989bc827314cdb535c728df05af3a1391757889d0a2b62a36011034a64736f6c63430008110033",
}

// SeriesRegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use SeriesRegistryMetaData.ABI instead.
var SeriesRegistryABI = SeriesRegistryMetaData.ABI

// SeriesRegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SeriesRegistryMetaData.Bin instead.
var SeriesRegistryBin = SeriesRegistryMetaData.Bin

// DeploySeriesRegistry deploys a new Ethereum contract, binding an instance of SeriesRegistry to it.
func DeploySeriesRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SeriesRegistry, error) {
	parsed, err := SeriesRegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SeriesRegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SeriesRegistry{SeriesRegistryCaller: SeriesRegistryCaller{contract: contract}, SeriesRegistryTransactor: SeriesRegistryTransactor{contract: contract}, SeriesRegistryFilterer: SeriesRegistryFilterer{contract: contract}}, nil
}

// SeriesRegistry is an auto generated Go binding around an Ethereum contract.
type SeriesRegistry struct {
	SeriesRegistryCaller     // Read-only binding to the contract
	SeriesRegistryTransactor // Write-only binding to the contract
	SeriesRegistryFilterer   // Log filterer for contract events
}

// SeriesRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type SeriesRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SeriesRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SeriesRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SeriesRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SeriesRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SeriesRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SeriesRegistrySession struct {
	Contract     *SeriesRegistry   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SeriesRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SeriesRegistryCallerSession struct {
	Contract *SeriesRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// SeriesRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SeriesRegistryTransactorSession struct {
	Contract     *SeriesRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// SeriesRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type SeriesRegistryRaw struct {
	Contract *SeriesRegistry // Generic contract binding to access the raw methods on
}

// SeriesRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SeriesRegistryCallerRaw struct {
	Contract *SeriesRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// SeriesRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SeriesRegistryTransactorRaw struct {
	Contract *SeriesRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSeriesRegistry creates a new instance of SeriesRegistry, bound to a specific deployed contract.
func NewSeriesRegistry(address common.Address, backend bind.ContractBackend) (*SeriesRegistry, error) {
	contract, err := bindSeriesRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistry{SeriesRegistryCaller: SeriesRegistryCaller{contract: contract}, SeriesRegistryTransactor: SeriesRegistryTransactor{contract: contract}, SeriesRegistryFilterer: SeriesRegistryFilterer{contract: contract}}, nil
}

// NewSeriesRegistryCaller creates a new read-only instance of SeriesRegistry, bound to a specific deployed contract.
func NewSeriesRegistryCaller(address common.Address, caller bind.ContractCaller) (*SeriesRegistryCaller, error) {
	contract, err := bindSeriesRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistryCaller{contract: contract}, nil
}

// NewSeriesRegistryTransactor creates a new write-only instance of SeriesRegistry, bound to a specific deployed contract.
func NewSeriesRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*SeriesRegistryTransactor, error) {
	contract, err := bindSeriesRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistryTransactor{contract: contract}, nil
}

// NewSeriesRegistryFilterer creates a new log filterer instance of SeriesRegistry, bound to a specific deployed contract.
func NewSeriesRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*SeriesRegistryFilterer, error) {
	contract, err := bindSeriesRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistryFilterer{contract: contract}, nil
}

// bindSeriesRegistry binds a generic wrapper to an already deployed contract.
func bindSeriesRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SeriesRegistryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SeriesRegistry *SeriesRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SeriesRegistry.Contract.SeriesRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SeriesRegistry *SeriesRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.SeriesRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SeriesRegistry *SeriesRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.SeriesRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SeriesRegistry *SeriesRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SeriesRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SeriesRegistry *SeriesRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SeriesRegistry *SeriesRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.contract.Transact(opts, method, params...)
}

// MAXBATCHSIZE is a free data retrieval call binding the contract method 0xcfdbf254.
//
// Solidity: function MAX_BATCH_SIZE() view returns(uint256)
func (_SeriesRegistry *SeriesRegistryCaller) MAXBATCHSIZE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "MAX_BATCH_SIZE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXBATCHSIZE is a free data retrieval call binding the contract method 0xcfdbf254.
//
// Solidity: function MAX_BATCH_SIZE() view returns(uint256)
func (_SeriesRegistry *SeriesRegistrySession) MAXBATCHSIZE() (*big.Int, error) {
	return _SeriesRegistry.Contract.MAXBATCHSIZE(&_SeriesRegistry.CallOpts)
}

// MAXBATCHSIZE is a free data retrieval call binding the contract method 0xcfdbf254.
//
// Solidity: function MAX_BATCH_SIZE() view returns(uint256)
func (_SeriesRegistry *SeriesRegistryCallerSession) MAXBATCHSIZE() (*big.Int, error) {
	return _SeriesRegistry.Contract.MAXBATCHSIZE(&_SeriesRegistry.CallOpts)
}

// GetArtistAddress is a free data retrieval call binding the contract method 0x7baca6cd.
//
// Solidity: function getArtistAddress(uint256 _artistID) view returns(address)
func (_SeriesRegistry *SeriesRegistryCaller) GetArtistAddress(opts *bind.CallOpts, _artistID *big.Int) (common.Address, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "getArtistAddress", _artistID)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetArtistAddress is a free data retrieval call binding the contract method 0x7baca6cd.
//
// Solidity: function getArtistAddress(uint256 _artistID) view returns(address)
func (_SeriesRegistry *SeriesRegistrySession) GetArtistAddress(_artistID *big.Int) (common.Address, error) {
	return _SeriesRegistry.Contract.GetArtistAddress(&_SeriesRegistry.CallOpts, _artistID)
}

// GetArtistAddress is a free data retrieval call binding the contract method 0x7baca6cd.
//
// Solidity: function getArtistAddress(uint256 _artistID) view returns(address)
func (_SeriesRegistry *SeriesRegistryCallerSession) GetArtistAddress(_artistID *big.Int) (common.Address, error) {
	return _SeriesRegistry.Contract.GetArtistAddress(&_SeriesRegistry.CallOpts, _artistID)
}

// GetArtistID is a free data retrieval call binding the contract method 0x916b6f2b.
//
// Solidity: function getArtistID(address _artistAddress) view returns(uint256)
func (_SeriesRegistry *SeriesRegistryCaller) GetArtistID(opts *bind.CallOpts, _artistAddress common.Address) (*big.Int, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "getArtistID", _artistAddress)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetArtistID is a free data retrieval call binding the contract method 0x916b6f2b.
//
// Solidity: function getArtistID(address _artistAddress) view returns(uint256)
func (_SeriesRegistry *SeriesRegistrySession) GetArtistID(_artistAddress common.Address) (*big.Int, error) {
	return _SeriesRegistry.Contract.GetArtistID(&_SeriesRegistry.CallOpts, _artistAddress)
}

// GetArtistID is a free data retrieval call binding the contract method 0x916b6f2b.
//
// Solidity: function getArtistID(address _artistAddress) view returns(uint256)
func (_SeriesRegistry *SeriesRegistryCallerSession) GetArtistID(_artistAddress common.Address) (*big.Int, error) {
	return _SeriesRegistry.Contract.GetArtistID(&_SeriesRegistry.CallOpts, _artistAddress)
}

// GetArtistSeriesIDs is a free data retrieval call binding the contract method 0x96202631.
//
// Solidity: function getArtistSeriesIDs(address _artistAddress) view returns(uint256[])
func (_SeriesRegistry *SeriesRegistryCaller) GetArtistSeriesIDs(opts *bind.CallOpts, _artistAddress common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "getArtistSeriesIDs", _artistAddress)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetArtistSeriesIDs is a free data retrieval call binding the contract method 0x96202631.
//
// Solidity: function getArtistSeriesIDs(address _artistAddress) view returns(uint256[])
func (_SeriesRegistry *SeriesRegistrySession) GetArtistSeriesIDs(_artistAddress common.Address) ([]*big.Int, error) {
	return _SeriesRegistry.Contract.GetArtistSeriesIDs(&_SeriesRegistry.CallOpts, _artistAddress)
}

// GetArtistSeriesIDs is a free data retrieval call binding the contract method 0x96202631.
//
// Solidity: function getArtistSeriesIDs(address _artistAddress) view returns(uint256[])
func (_SeriesRegistry *SeriesRegistryCallerSession) GetArtistSeriesIDs(_artistAddress common.Address) ([]*big.Int, error) {
	return _SeriesRegistry.Contract.GetArtistSeriesIDs(&_SeriesRegistry.CallOpts, _artistAddress)
}

// GetCollaborationInviteeSeriesIDs is a free data retrieval call binding the contract method 0x6937b20f.
//
// Solidity: function getCollaborationInviteeSeriesIDs(address _invitee) view returns(uint256[])
func (_SeriesRegistry *SeriesRegistryCaller) GetCollaborationInviteeSeriesIDs(opts *bind.CallOpts, _invitee common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "getCollaborationInviteeSeriesIDs", _invitee)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetCollaborationInviteeSeriesIDs is a free data retrieval call binding the contract method 0x6937b20f.
//
// Solidity: function getCollaborationInviteeSeriesIDs(address _invitee) view returns(uint256[])
func (_SeriesRegistry *SeriesRegistrySession) GetCollaborationInviteeSeriesIDs(_invitee common.Address) ([]*big.Int, error) {
	return _SeriesRegistry.Contract.GetCollaborationInviteeSeriesIDs(&_SeriesRegistry.CallOpts, _invitee)
}

// GetCollaborationInviteeSeriesIDs is a free data retrieval call binding the contract method 0x6937b20f.
//
// Solidity: function getCollaborationInviteeSeriesIDs(address _invitee) view returns(uint256[])
func (_SeriesRegistry *SeriesRegistryCallerSession) GetCollaborationInviteeSeriesIDs(_invitee common.Address) ([]*big.Int, error) {
	return _SeriesRegistry.Contract.GetCollaborationInviteeSeriesIDs(&_SeriesRegistry.CallOpts, _invitee)
}

// GetCollaborationInvitees is a free data retrieval call binding the contract method 0xb2466822.
//
// Solidity: function getCollaborationInvitees(uint256 _seriesID) view returns(address[])
func (_SeriesRegistry *SeriesRegistryCaller) GetCollaborationInvitees(opts *bind.CallOpts, _seriesID *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "getCollaborationInvitees", _seriesID)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetCollaborationInvitees is a free data retrieval call binding the contract method 0xb2466822.
//
// Solidity: function getCollaborationInvitees(uint256 _seriesID) view returns(address[])
func (_SeriesRegistry *SeriesRegistrySession) GetCollaborationInvitees(_seriesID *big.Int) ([]common.Address, error) {
	return _SeriesRegistry.Contract.GetCollaborationInvitees(&_SeriesRegistry.CallOpts, _seriesID)
}

// GetCollaborationInvitees is a free data retrieval call binding the contract method 0xb2466822.
//
// Solidity: function getCollaborationInvitees(uint256 _seriesID) view returns(address[])
func (_SeriesRegistry *SeriesRegistryCallerSession) GetCollaborationInvitees(_seriesID *big.Int) ([]common.Address, error) {
	return _SeriesRegistry.Contract.GetCollaborationInvitees(&_SeriesRegistry.CallOpts, _seriesID)
}

// GetCollaborationInviterSeriesIDs is a free data retrieval call binding the contract method 0x17a9cffb.
//
// Solidity: function getCollaborationInviterSeriesIDs(address _inviter) view returns(uint256[])
func (_SeriesRegistry *SeriesRegistryCaller) GetCollaborationInviterSeriesIDs(opts *bind.CallOpts, _inviter common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "getCollaborationInviterSeriesIDs", _inviter)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetCollaborationInviterSeriesIDs is a free data retrieval call binding the contract method 0x17a9cffb.
//
// Solidity: function getCollaborationInviterSeriesIDs(address _inviter) view returns(uint256[])
func (_SeriesRegistry *SeriesRegistrySession) GetCollaborationInviterSeriesIDs(_inviter common.Address) ([]*big.Int, error) {
	return _SeriesRegistry.Contract.GetCollaborationInviterSeriesIDs(&_SeriesRegistry.CallOpts, _inviter)
}

// GetCollaborationInviterSeriesIDs is a free data retrieval call binding the contract method 0x17a9cffb.
//
// Solidity: function getCollaborationInviterSeriesIDs(address _inviter) view returns(uint256[])
func (_SeriesRegistry *SeriesRegistryCallerSession) GetCollaborationInviterSeriesIDs(_inviter common.Address) ([]*big.Int, error) {
	return _SeriesRegistry.Contract.GetCollaborationInviterSeriesIDs(&_SeriesRegistry.CallOpts, _inviter)
}

// GetDelegatees is a free data retrieval call binding the contract method 0x865ed23f.
//
// Solidity: function getDelegatees(address _delegatorAddress) view returns(address[])
func (_SeriesRegistry *SeriesRegistryCaller) GetDelegatees(opts *bind.CallOpts, _delegatorAddress common.Address) ([]common.Address, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "getDelegatees", _delegatorAddress)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetDelegatees is a free data retrieval call binding the contract method 0x865ed23f.
//
// Solidity: function getDelegatees(address _delegatorAddress) view returns(address[])
func (_SeriesRegistry *SeriesRegistrySession) GetDelegatees(_delegatorAddress common.Address) ([]common.Address, error) {
	return _SeriesRegistry.Contract.GetDelegatees(&_SeriesRegistry.CallOpts, _delegatorAddress)
}

// GetDelegatees is a free data retrieval call binding the contract method 0x865ed23f.
//
// Solidity: function getDelegatees(address _delegatorAddress) view returns(address[])
func (_SeriesRegistry *SeriesRegistryCallerSession) GetDelegatees(_delegatorAddress common.Address) ([]common.Address, error) {
	return _SeriesRegistry.Contract.GetDelegatees(&_SeriesRegistry.CallOpts, _delegatorAddress)
}

// GetSeriesAdministratorAddress is a free data retrieval call binding the contract method 0x93663235.
//
// Solidity: function getSeriesAdministratorAddress(uint256 _seriesID) view returns(address)
func (_SeriesRegistry *SeriesRegistryCaller) GetSeriesAdministratorAddress(opts *bind.CallOpts, _seriesID *big.Int) (common.Address, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "getSeriesAdministratorAddress", _seriesID)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetSeriesAdministratorAddress is a free data retrieval call binding the contract method 0x93663235.
//
// Solidity: function getSeriesAdministratorAddress(uint256 _seriesID) view returns(address)
func (_SeriesRegistry *SeriesRegistrySession) GetSeriesAdministratorAddress(_seriesID *big.Int) (common.Address, error) {
	return _SeriesRegistry.Contract.GetSeriesAdministratorAddress(&_SeriesRegistry.CallOpts, _seriesID)
}

// GetSeriesAdministratorAddress is a free data retrieval call binding the contract method 0x93663235.
//
// Solidity: function getSeriesAdministratorAddress(uint256 _seriesID) view returns(address)
func (_SeriesRegistry *SeriesRegistryCallerSession) GetSeriesAdministratorAddress(_seriesID *big.Int) (common.Address, error) {
	return _SeriesRegistry.Contract.GetSeriesAdministratorAddress(&_SeriesRegistry.CallOpts, _seriesID)
}

// GetSeriesAdministratorID is a free data retrieval call binding the contract method 0xd9cf7102.
//
// Solidity: function getSeriesAdministratorID(uint256 _seriesID) view returns(uint256)
func (_SeriesRegistry *SeriesRegistryCaller) GetSeriesAdministratorID(opts *bind.CallOpts, _seriesID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "getSeriesAdministratorID", _seriesID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSeriesAdministratorID is a free data retrieval call binding the contract method 0xd9cf7102.
//
// Solidity: function getSeriesAdministratorID(uint256 _seriesID) view returns(uint256)
func (_SeriesRegistry *SeriesRegistrySession) GetSeriesAdministratorID(_seriesID *big.Int) (*big.Int, error) {
	return _SeriesRegistry.Contract.GetSeriesAdministratorID(&_SeriesRegistry.CallOpts, _seriesID)
}

// GetSeriesAdministratorID is a free data retrieval call binding the contract method 0xd9cf7102.
//
// Solidity: function getSeriesAdministratorID(uint256 _seriesID) view returns(uint256)
func (_SeriesRegistry *SeriesRegistryCallerSession) GetSeriesAdministratorID(_seriesID *big.Int) (*big.Int, error) {
	return _SeriesRegistry.Contract.GetSeriesAdministratorID(&_SeriesRegistry.CallOpts, _seriesID)
}

// GetSeriesArtistAddresses is a free data retrieval call binding the contract method 0x9888892e.
//
// Solidity: function getSeriesArtistAddresses(uint256 _seriesID) view returns(address[])
func (_SeriesRegistry *SeriesRegistryCaller) GetSeriesArtistAddresses(opts *bind.CallOpts, _seriesID *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "getSeriesArtistAddresses", _seriesID)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetSeriesArtistAddresses is a free data retrieval call binding the contract method 0x9888892e.
//
// Solidity: function getSeriesArtistAddresses(uint256 _seriesID) view returns(address[])
func (_SeriesRegistry *SeriesRegistrySession) GetSeriesArtistAddresses(_seriesID *big.Int) ([]common.Address, error) {
	return _SeriesRegistry.Contract.GetSeriesArtistAddresses(&_SeriesRegistry.CallOpts, _seriesID)
}

// GetSeriesArtistAddresses is a free data retrieval call binding the contract method 0x9888892e.
//
// Solidity: function getSeriesArtistAddresses(uint256 _seriesID) view returns(address[])
func (_SeriesRegistry *SeriesRegistryCallerSession) GetSeriesArtistAddresses(_seriesID *big.Int) ([]common.Address, error) {
	return _SeriesRegistry.Contract.GetSeriesArtistAddresses(&_SeriesRegistry.CallOpts, _seriesID)
}

// GetSeriesArtistIDs is a free data retrieval call binding the contract method 0x084ac4b5.
//
// Solidity: function getSeriesArtistIDs(uint256 _seriesID) view returns(uint256[])
func (_SeriesRegistry *SeriesRegistryCaller) GetSeriesArtistIDs(opts *bind.CallOpts, _seriesID *big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "getSeriesArtistIDs", _seriesID)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetSeriesArtistIDs is a free data retrieval call binding the contract method 0x084ac4b5.
//
// Solidity: function getSeriesArtistIDs(uint256 _seriesID) view returns(uint256[])
func (_SeriesRegistry *SeriesRegistrySession) GetSeriesArtistIDs(_seriesID *big.Int) ([]*big.Int, error) {
	return _SeriesRegistry.Contract.GetSeriesArtistIDs(&_SeriesRegistry.CallOpts, _seriesID)
}

// GetSeriesArtistIDs is a free data retrieval call binding the contract method 0x084ac4b5.
//
// Solidity: function getSeriesArtistIDs(uint256 _seriesID) view returns(uint256[])
func (_SeriesRegistry *SeriesRegistryCallerSession) GetSeriesArtistIDs(_seriesID *big.Int) ([]*big.Int, error) {
	return _SeriesRegistry.Contract.GetSeriesArtistIDs(&_SeriesRegistry.CallOpts, _seriesID)
}

// GetSeriesDelegatees is a free data retrieval call binding the contract method 0x61c7c74f.
//
// Solidity: function getSeriesDelegatees(uint256 _seriesID) view returns(address[])
func (_SeriesRegistry *SeriesRegistryCaller) GetSeriesDelegatees(opts *bind.CallOpts, _seriesID *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "getSeriesDelegatees", _seriesID)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetSeriesDelegatees is a free data retrieval call binding the contract method 0x61c7c74f.
//
// Solidity: function getSeriesDelegatees(uint256 _seriesID) view returns(address[])
func (_SeriesRegistry *SeriesRegistrySession) GetSeriesDelegatees(_seriesID *big.Int) ([]common.Address, error) {
	return _SeriesRegistry.Contract.GetSeriesDelegatees(&_SeriesRegistry.CallOpts, _seriesID)
}

// GetSeriesDelegatees is a free data retrieval call binding the contract method 0x61c7c74f.
//
// Solidity: function getSeriesDelegatees(uint256 _seriesID) view returns(address[])
func (_SeriesRegistry *SeriesRegistryCallerSession) GetSeriesDelegatees(_seriesID *big.Int) ([]common.Address, error) {
	return _SeriesRegistry.Contract.GetSeriesDelegatees(&_SeriesRegistry.CallOpts, _seriesID)
}

// GetSeriesIDs is a free data retrieval call binding the contract method 0x8a84d445.
//
// Solidity: function getSeriesIDs() view returns(uint256[])
func (_SeriesRegistry *SeriesRegistryCaller) GetSeriesIDs(opts *bind.CallOpts) ([]*big.Int, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "getSeriesIDs")

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetSeriesIDs is a free data retrieval call binding the contract method 0x8a84d445.
//
// Solidity: function getSeriesIDs() view returns(uint256[])
func (_SeriesRegistry *SeriesRegistrySession) GetSeriesIDs() ([]*big.Int, error) {
	return _SeriesRegistry.Contract.GetSeriesIDs(&_SeriesRegistry.CallOpts)
}

// GetSeriesIDs is a free data retrieval call binding the contract method 0x8a84d445.
//
// Solidity: function getSeriesIDs() view returns(uint256[])
func (_SeriesRegistry *SeriesRegistryCallerSession) GetSeriesIDs() ([]*big.Int, error) {
	return _SeriesRegistry.Contract.GetSeriesIDs(&_SeriesRegistry.CallOpts)
}

// GetSeriesMetadataURI is a free data retrieval call binding the contract method 0xeae21014.
//
// Solidity: function getSeriesMetadataURI(uint256 _seriesID) view returns(string)
func (_SeriesRegistry *SeriesRegistryCaller) GetSeriesMetadataURI(opts *bind.CallOpts, _seriesID *big.Int) (string, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "getSeriesMetadataURI", _seriesID)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetSeriesMetadataURI is a free data retrieval call binding the contract method 0xeae21014.
//
// Solidity: function getSeriesMetadataURI(uint256 _seriesID) view returns(string)
func (_SeriesRegistry *SeriesRegistrySession) GetSeriesMetadataURI(_seriesID *big.Int) (string, error) {
	return _SeriesRegistry.Contract.GetSeriesMetadataURI(&_SeriesRegistry.CallOpts, _seriesID)
}

// GetSeriesMetadataURI is a free data retrieval call binding the contract method 0xeae21014.
//
// Solidity: function getSeriesMetadataURI(uint256 _seriesID) view returns(string)
func (_SeriesRegistry *SeriesRegistryCallerSession) GetSeriesMetadataURI(_seriesID *big.Int) (string, error) {
	return _SeriesRegistry.Contract.GetSeriesMetadataURI(&_SeriesRegistry.CallOpts, _seriesID)
}

// GetSeriesTokenDataURI is a free data retrieval call binding the contract method 0x2fd455b0.
//
// Solidity: function getSeriesTokenDataURI(uint256 _seriesID) view returns(string)
func (_SeriesRegistry *SeriesRegistryCaller) GetSeriesTokenDataURI(opts *bind.CallOpts, _seriesID *big.Int) (string, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "getSeriesTokenDataURI", _seriesID)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetSeriesTokenDataURI is a free data retrieval call binding the contract method 0x2fd455b0.
//
// Solidity: function getSeriesTokenDataURI(uint256 _seriesID) view returns(string)
func (_SeriesRegistry *SeriesRegistrySession) GetSeriesTokenDataURI(_seriesID *big.Int) (string, error) {
	return _SeriesRegistry.Contract.GetSeriesTokenDataURI(&_SeriesRegistry.CallOpts, _seriesID)
}

// GetSeriesTokenDataURI is a free data retrieval call binding the contract method 0x2fd455b0.
//
// Solidity: function getSeriesTokenDataURI(uint256 _seriesID) view returns(string)
func (_SeriesRegistry *SeriesRegistryCallerSession) GetSeriesTokenDataURI(_seriesID *big.Int) (string, error) {
	return _SeriesRegistry.Contract.GetSeriesTokenDataURI(&_SeriesRegistry.CallOpts, _seriesID)
}

// GetTotalArtistSeries is a free data retrieval call binding the contract method 0x9d6144dc.
//
// Solidity: function getTotalArtistSeries(address _artistAddress) view returns(uint256)
func (_SeriesRegistry *SeriesRegistryCaller) GetTotalArtistSeries(opts *bind.CallOpts, _artistAddress common.Address) (*big.Int, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "getTotalArtistSeries", _artistAddress)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalArtistSeries is a free data retrieval call binding the contract method 0x9d6144dc.
//
// Solidity: function getTotalArtistSeries(address _artistAddress) view returns(uint256)
func (_SeriesRegistry *SeriesRegistrySession) GetTotalArtistSeries(_artistAddress common.Address) (*big.Int, error) {
	return _SeriesRegistry.Contract.GetTotalArtistSeries(&_SeriesRegistry.CallOpts, _artistAddress)
}

// GetTotalArtistSeries is a free data retrieval call binding the contract method 0x9d6144dc.
//
// Solidity: function getTotalArtistSeries(address _artistAddress) view returns(uint256)
func (_SeriesRegistry *SeriesRegistryCallerSession) GetTotalArtistSeries(_artistAddress common.Address) (*big.Int, error) {
	return _SeriesRegistry.Contract.GetTotalArtistSeries(&_SeriesRegistry.CallOpts, _artistAddress)
}

// GetTotalSeries is a free data retrieval call binding the contract method 0x1826f230.
//
// Solidity: function getTotalSeries() view returns(uint256)
func (_SeriesRegistry *SeriesRegistryCaller) GetTotalSeries(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SeriesRegistry.contract.Call(opts, &out, "getTotalSeries")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalSeries is a free data retrieval call binding the contract method 0x1826f230.
//
// Solidity: function getTotalSeries() view returns(uint256)
func (_SeriesRegistry *SeriesRegistrySession) GetTotalSeries() (*big.Int, error) {
	return _SeriesRegistry.Contract.GetTotalSeries(&_SeriesRegistry.CallOpts)
}

// GetTotalSeries is a free data retrieval call binding the contract method 0x1826f230.
//
// Solidity: function getTotalSeries() view returns(uint256)
func (_SeriesRegistry *SeriesRegistryCallerSession) GetTotalSeries() (*big.Int, error) {
	return _SeriesRegistry.Contract.GetTotalSeries(&_SeriesRegistry.CallOpts)
}

// AddDelegatee is a paid mutator transaction binding the contract method 0x6e716ecb.
//
// Solidity: function addDelegatee(address _delegatee) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) AddDelegatee(opts *bind.TransactOpts, _delegatee common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "addDelegatee", _delegatee)
}

// AddDelegatee is a paid mutator transaction binding the contract method 0x6e716ecb.
//
// Solidity: function addDelegatee(address _delegatee) returns()
func (_SeriesRegistry *SeriesRegistrySession) AddDelegatee(_delegatee common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.AddDelegatee(&_SeriesRegistry.TransactOpts, _delegatee)
}

// AddDelegatee is a paid mutator transaction binding the contract method 0x6e716ecb.
//
// Solidity: function addDelegatee(address _delegatee) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) AddDelegatee(_delegatee common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.AddDelegatee(&_SeriesRegistry.TransactOpts, _delegatee)
}

// AssignAdministrator is a paid mutator transaction binding the contract method 0x40595e9d.
//
// Solidity: function assignAdministrator(uint256 _seriesID, address _assigneeAddress) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) AssignAdministrator(opts *bind.TransactOpts, _seriesID *big.Int, _assigneeAddress common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "assignAdministrator", _seriesID, _assigneeAddress)
}

// AssignAdministrator is a paid mutator transaction binding the contract method 0x40595e9d.
//
// Solidity: function assignAdministrator(uint256 _seriesID, address _assigneeAddress) returns()
func (_SeriesRegistry *SeriesRegistrySession) AssignAdministrator(_seriesID *big.Int, _assigneeAddress common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.AssignAdministrator(&_SeriesRegistry.TransactOpts, _seriesID, _assigneeAddress)
}

// AssignAdministrator is a paid mutator transaction binding the contract method 0x40595e9d.
//
// Solidity: function assignAdministrator(uint256 _seriesID, address _assigneeAddress) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) AssignAdministrator(_seriesID *big.Int, _assigneeAddress common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.AssignAdministrator(&_SeriesRegistry.TransactOpts, _seriesID, _assigneeAddress)
}

// AssignSeries is a paid mutator transaction binding the contract method 0xcab0784c.
//
// Solidity: function assignSeries(uint256 _seriesID, address _assigneeAddress) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) AssignSeries(opts *bind.TransactOpts, _seriesID *big.Int, _assigneeAddress common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "assignSeries", _seriesID, _assigneeAddress)
}

// AssignSeries is a paid mutator transaction binding the contract method 0xcab0784c.
//
// Solidity: function assignSeries(uint256 _seriesID, address _assigneeAddress) returns()
func (_SeriesRegistry *SeriesRegistrySession) AssignSeries(_seriesID *big.Int, _assigneeAddress common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.AssignSeries(&_SeriesRegistry.TransactOpts, _seriesID, _assigneeAddress)
}

// AssignSeries is a paid mutator transaction binding the contract method 0xcab0784c.
//
// Solidity: function assignSeries(uint256 _seriesID, address _assigneeAddress) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) AssignSeries(_seriesID *big.Int, _assigneeAddress common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.AssignSeries(&_SeriesRegistry.TransactOpts, _seriesID, _assigneeAddress)
}

// BatchAddDelegatees is a paid mutator transaction binding the contract method 0x57367fed.
//
// Solidity: function batchAddDelegatees(address[] _delegatees) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) BatchAddDelegatees(opts *bind.TransactOpts, _delegatees []common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "batchAddDelegatees", _delegatees)
}

// BatchAddDelegatees is a paid mutator transaction binding the contract method 0x57367fed.
//
// Solidity: function batchAddDelegatees(address[] _delegatees) returns()
func (_SeriesRegistry *SeriesRegistrySession) BatchAddDelegatees(_delegatees []common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.BatchAddDelegatees(&_SeriesRegistry.TransactOpts, _delegatees)
}

// BatchAddDelegatees is a paid mutator transaction binding the contract method 0x57367fed.
//
// Solidity: function batchAddDelegatees(address[] _delegatees) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) BatchAddDelegatees(_delegatees []common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.BatchAddDelegatees(&_SeriesRegistry.TransactOpts, _delegatees)
}

// BatchAssignSeries is a paid mutator transaction binding the contract method 0x360bf7ad.
//
// Solidity: function batchAssignSeries(uint256[] _seriesIDs, address[] _assigneeAddresses) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) BatchAssignSeries(opts *bind.TransactOpts, _seriesIDs []*big.Int, _assigneeAddresses []common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "batchAssignSeries", _seriesIDs, _assigneeAddresses)
}

// BatchAssignSeries is a paid mutator transaction binding the contract method 0x360bf7ad.
//
// Solidity: function batchAssignSeries(uint256[] _seriesIDs, address[] _assigneeAddresses) returns()
func (_SeriesRegistry *SeriesRegistrySession) BatchAssignSeries(_seriesIDs []*big.Int, _assigneeAddresses []common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.BatchAssignSeries(&_SeriesRegistry.TransactOpts, _seriesIDs, _assigneeAddresses)
}

// BatchAssignSeries is a paid mutator transaction binding the contract method 0x360bf7ad.
//
// Solidity: function batchAssignSeries(uint256[] _seriesIDs, address[] _assigneeAddresses) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) BatchAssignSeries(_seriesIDs []*big.Int, _assigneeAddresses []common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.BatchAssignSeries(&_SeriesRegistry.TransactOpts, _seriesIDs, _assigneeAddresses)
}

// BatchCancelCollaborationInvitations is a paid mutator transaction binding the contract method 0x3e1589e5.
//
// Solidity: function batchCancelCollaborationInvitations(uint256[] _seriesIDs, address[] _inviteeAddresses) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) BatchCancelCollaborationInvitations(opts *bind.TransactOpts, _seriesIDs []*big.Int, _inviteeAddresses []common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "batchCancelCollaborationInvitations", _seriesIDs, _inviteeAddresses)
}

// BatchCancelCollaborationInvitations is a paid mutator transaction binding the contract method 0x3e1589e5.
//
// Solidity: function batchCancelCollaborationInvitations(uint256[] _seriesIDs, address[] _inviteeAddresses) returns()
func (_SeriesRegistry *SeriesRegistrySession) BatchCancelCollaborationInvitations(_seriesIDs []*big.Int, _inviteeAddresses []common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.BatchCancelCollaborationInvitations(&_SeriesRegistry.TransactOpts, _seriesIDs, _inviteeAddresses)
}

// BatchCancelCollaborationInvitations is a paid mutator transaction binding the contract method 0x3e1589e5.
//
// Solidity: function batchCancelCollaborationInvitations(uint256[] _seriesIDs, address[] _inviteeAddresses) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) BatchCancelCollaborationInvitations(_seriesIDs []*big.Int, _inviteeAddresses []common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.BatchCancelCollaborationInvitations(&_SeriesRegistry.TransactOpts, _seriesIDs, _inviteeAddresses)
}

// BatchDeleteSeries is a paid mutator transaction binding the contract method 0x8c77b117.
//
// Solidity: function batchDeleteSeries(uint256[] _seriesIDs) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) BatchDeleteSeries(opts *bind.TransactOpts, _seriesIDs []*big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "batchDeleteSeries", _seriesIDs)
}

// BatchDeleteSeries is a paid mutator transaction binding the contract method 0x8c77b117.
//
// Solidity: function batchDeleteSeries(uint256[] _seriesIDs) returns()
func (_SeriesRegistry *SeriesRegistrySession) BatchDeleteSeries(_seriesIDs []*big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.BatchDeleteSeries(&_SeriesRegistry.TransactOpts, _seriesIDs)
}

// BatchDeleteSeries is a paid mutator transaction binding the contract method 0x8c77b117.
//
// Solidity: function batchDeleteSeries(uint256[] _seriesIDs) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) BatchDeleteSeries(_seriesIDs []*big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.BatchDeleteSeries(&_SeriesRegistry.TransactOpts, _seriesIDs)
}

// BatchInviteCollaborators is a paid mutator transaction binding the contract method 0x789ba664.
//
// Solidity: function batchInviteCollaborators(uint256[] _seriesIDs, address[] _collaboratorAddresses) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) BatchInviteCollaborators(opts *bind.TransactOpts, _seriesIDs []*big.Int, _collaboratorAddresses []common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "batchInviteCollaborators", _seriesIDs, _collaboratorAddresses)
}

// BatchInviteCollaborators is a paid mutator transaction binding the contract method 0x789ba664.
//
// Solidity: function batchInviteCollaborators(uint256[] _seriesIDs, address[] _collaboratorAddresses) returns()
func (_SeriesRegistry *SeriesRegistrySession) BatchInviteCollaborators(_seriesIDs []*big.Int, _collaboratorAddresses []common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.BatchInviteCollaborators(&_SeriesRegistry.TransactOpts, _seriesIDs, _collaboratorAddresses)
}

// BatchInviteCollaborators is a paid mutator transaction binding the contract method 0x789ba664.
//
// Solidity: function batchInviteCollaborators(uint256[] _seriesIDs, address[] _collaboratorAddresses) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) BatchInviteCollaborators(_seriesIDs []*big.Int, _collaboratorAddresses []common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.BatchInviteCollaborators(&_SeriesRegistry.TransactOpts, _seriesIDs, _collaboratorAddresses)
}

// BatchOptInCollaboration is a paid mutator transaction binding the contract method 0xf8e40f41.
//
// Solidity: function batchOptInCollaboration(uint256[] _seriesIDs) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) BatchOptInCollaboration(opts *bind.TransactOpts, _seriesIDs []*big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "batchOptInCollaboration", _seriesIDs)
}

// BatchOptInCollaboration is a paid mutator transaction binding the contract method 0xf8e40f41.
//
// Solidity: function batchOptInCollaboration(uint256[] _seriesIDs) returns()
func (_SeriesRegistry *SeriesRegistrySession) BatchOptInCollaboration(_seriesIDs []*big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.BatchOptInCollaboration(&_SeriesRegistry.TransactOpts, _seriesIDs)
}

// BatchOptInCollaboration is a paid mutator transaction binding the contract method 0xf8e40f41.
//
// Solidity: function batchOptInCollaboration(uint256[] _seriesIDs) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) BatchOptInCollaboration(_seriesIDs []*big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.BatchOptInCollaboration(&_SeriesRegistry.TransactOpts, _seriesIDs)
}

// BatchRegisterSeries is a paid mutator transaction binding the contract method 0x69ea733e.
//
// Solidity: function batchRegisterSeries(address[] _seriesArtists, string[] _metadataURIs, string[] _tokenDataURIs) returns(uint256[])
func (_SeriesRegistry *SeriesRegistryTransactor) BatchRegisterSeries(opts *bind.TransactOpts, _seriesArtists []common.Address, _metadataURIs []string, _tokenDataURIs []string) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "batchRegisterSeries", _seriesArtists, _metadataURIs, _tokenDataURIs)
}

// BatchRegisterSeries is a paid mutator transaction binding the contract method 0x69ea733e.
//
// Solidity: function batchRegisterSeries(address[] _seriesArtists, string[] _metadataURIs, string[] _tokenDataURIs) returns(uint256[])
func (_SeriesRegistry *SeriesRegistrySession) BatchRegisterSeries(_seriesArtists []common.Address, _metadataURIs []string, _tokenDataURIs []string) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.BatchRegisterSeries(&_SeriesRegistry.TransactOpts, _seriesArtists, _metadataURIs, _tokenDataURIs)
}

// BatchRegisterSeries is a paid mutator transaction binding the contract method 0x69ea733e.
//
// Solidity: function batchRegisterSeries(address[] _seriesArtists, string[] _metadataURIs, string[] _tokenDataURIs) returns(uint256[])
func (_SeriesRegistry *SeriesRegistryTransactorSession) BatchRegisterSeries(_seriesArtists []common.Address, _metadataURIs []string, _tokenDataURIs []string) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.BatchRegisterSeries(&_SeriesRegistry.TransactOpts, _seriesArtists, _metadataURIs, _tokenDataURIs)
}

// BatchRemoveDelegatees is a paid mutator transaction binding the contract method 0x43249b4b.
//
// Solidity: function batchRemoveDelegatees(address[] _delegatees) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) BatchRemoveDelegatees(opts *bind.TransactOpts, _delegatees []common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "batchRemoveDelegatees", _delegatees)
}

// BatchRemoveDelegatees is a paid mutator transaction binding the contract method 0x43249b4b.
//
// Solidity: function batchRemoveDelegatees(address[] _delegatees) returns()
func (_SeriesRegistry *SeriesRegistrySession) BatchRemoveDelegatees(_delegatees []common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.BatchRemoveDelegatees(&_SeriesRegistry.TransactOpts, _delegatees)
}

// BatchRemoveDelegatees is a paid mutator transaction binding the contract method 0x43249b4b.
//
// Solidity: function batchRemoveDelegatees(address[] _delegatees) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) BatchRemoveDelegatees(_delegatees []common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.BatchRemoveDelegatees(&_SeriesRegistry.TransactOpts, _delegatees)
}

// BatchUpdateSeries is a paid mutator transaction binding the contract method 0x65753a40.
//
// Solidity: function batchUpdateSeries(uint256[] _seriesIDs, string[] _metadataURIs, string[] _tokenDataURIs) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) BatchUpdateSeries(opts *bind.TransactOpts, _seriesIDs []*big.Int, _metadataURIs []string, _tokenDataURIs []string) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "batchUpdateSeries", _seriesIDs, _metadataURIs, _tokenDataURIs)
}

// BatchUpdateSeries is a paid mutator transaction binding the contract method 0x65753a40.
//
// Solidity: function batchUpdateSeries(uint256[] _seriesIDs, string[] _metadataURIs, string[] _tokenDataURIs) returns()
func (_SeriesRegistry *SeriesRegistrySession) BatchUpdateSeries(_seriesIDs []*big.Int, _metadataURIs []string, _tokenDataURIs []string) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.BatchUpdateSeries(&_SeriesRegistry.TransactOpts, _seriesIDs, _metadataURIs, _tokenDataURIs)
}

// BatchUpdateSeries is a paid mutator transaction binding the contract method 0x65753a40.
//
// Solidity: function batchUpdateSeries(uint256[] _seriesIDs, string[] _metadataURIs, string[] _tokenDataURIs) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) BatchUpdateSeries(_seriesIDs []*big.Int, _metadataURIs []string, _tokenDataURIs []string) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.BatchUpdateSeries(&_SeriesRegistry.TransactOpts, _seriesIDs, _metadataURIs, _tokenDataURIs)
}

// CancelCollaborationInvitation is a paid mutator transaction binding the contract method 0x5fa54fd3.
//
// Solidity: function cancelCollaborationInvitation(uint256 _seriesID, address _inviteeAddress) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) CancelCollaborationInvitation(opts *bind.TransactOpts, _seriesID *big.Int, _inviteeAddress common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "cancelCollaborationInvitation", _seriesID, _inviteeAddress)
}

// CancelCollaborationInvitation is a paid mutator transaction binding the contract method 0x5fa54fd3.
//
// Solidity: function cancelCollaborationInvitation(uint256 _seriesID, address _inviteeAddress) returns()
func (_SeriesRegistry *SeriesRegistrySession) CancelCollaborationInvitation(_seriesID *big.Int, _inviteeAddress common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.CancelCollaborationInvitation(&_SeriesRegistry.TransactOpts, _seriesID, _inviteeAddress)
}

// CancelCollaborationInvitation is a paid mutator transaction binding the contract method 0x5fa54fd3.
//
// Solidity: function cancelCollaborationInvitation(uint256 _seriesID, address _inviteeAddress) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) CancelCollaborationInvitation(_seriesID *big.Int, _inviteeAddress common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.CancelCollaborationInvitation(&_SeriesRegistry.TransactOpts, _seriesID, _inviteeAddress)
}

// DeleteSeries is a paid mutator transaction binding the contract method 0x0cc2bc8d.
//
// Solidity: function deleteSeries(uint256 _seriesID) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) DeleteSeries(opts *bind.TransactOpts, _seriesID *big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "deleteSeries", _seriesID)
}

// DeleteSeries is a paid mutator transaction binding the contract method 0x0cc2bc8d.
//
// Solidity: function deleteSeries(uint256 _seriesID) returns()
func (_SeriesRegistry *SeriesRegistrySession) DeleteSeries(_seriesID *big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.DeleteSeries(&_SeriesRegistry.TransactOpts, _seriesID)
}

// DeleteSeries is a paid mutator transaction binding the contract method 0x0cc2bc8d.
//
// Solidity: function deleteSeries(uint256 _seriesID) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) DeleteSeries(_seriesID *big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.DeleteSeries(&_SeriesRegistry.TransactOpts, _seriesID)
}

// InviteCollaborator is a paid mutator transaction binding the contract method 0xdf219b04.
//
// Solidity: function inviteCollaborator(uint256 _seriesID, address _inviteeAddress) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) InviteCollaborator(opts *bind.TransactOpts, _seriesID *big.Int, _inviteeAddress common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "inviteCollaborator", _seriesID, _inviteeAddress)
}

// InviteCollaborator is a paid mutator transaction binding the contract method 0xdf219b04.
//
// Solidity: function inviteCollaborator(uint256 _seriesID, address _inviteeAddress) returns()
func (_SeriesRegistry *SeriesRegistrySession) InviteCollaborator(_seriesID *big.Int, _inviteeAddress common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.InviteCollaborator(&_SeriesRegistry.TransactOpts, _seriesID, _inviteeAddress)
}

// InviteCollaborator is a paid mutator transaction binding the contract method 0xdf219b04.
//
// Solidity: function inviteCollaborator(uint256 _seriesID, address _inviteeAddress) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) InviteCollaborator(_seriesID *big.Int, _inviteeAddress common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.InviteCollaborator(&_SeriesRegistry.TransactOpts, _seriesID, _inviteeAddress)
}

// OptInCollaboration is a paid mutator transaction binding the contract method 0xc7b62eee.
//
// Solidity: function optInCollaboration(uint256 _seriesID) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) OptInCollaboration(opts *bind.TransactOpts, _seriesID *big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "optInCollaboration", _seriesID)
}

// OptInCollaboration is a paid mutator transaction binding the contract method 0xc7b62eee.
//
// Solidity: function optInCollaboration(uint256 _seriesID) returns()
func (_SeriesRegistry *SeriesRegistrySession) OptInCollaboration(_seriesID *big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.OptInCollaboration(&_SeriesRegistry.TransactOpts, _seriesID)
}

// OptInCollaboration is a paid mutator transaction binding the contract method 0xc7b62eee.
//
// Solidity: function optInCollaboration(uint256 _seriesID) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) OptInCollaboration(_seriesID *big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.OptInCollaboration(&_SeriesRegistry.TransactOpts, _seriesID)
}

// OptOutSeries is a paid mutator transaction binding the contract method 0x1417957b.
//
// Solidity: function optOutSeries(uint256 _seriesID) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) OptOutSeries(opts *bind.TransactOpts, _seriesID *big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "optOutSeries", _seriesID)
}

// OptOutSeries is a paid mutator transaction binding the contract method 0x1417957b.
//
// Solidity: function optOutSeries(uint256 _seriesID) returns()
func (_SeriesRegistry *SeriesRegistrySession) OptOutSeries(_seriesID *big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.OptOutSeries(&_SeriesRegistry.TransactOpts, _seriesID)
}

// OptOutSeries is a paid mutator transaction binding the contract method 0x1417957b.
//
// Solidity: function optOutSeries(uint256 _seriesID) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) OptOutSeries(_seriesID *big.Int) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.OptOutSeries(&_SeriesRegistry.TransactOpts, _seriesID)
}

// RegisterSeries is a paid mutator transaction binding the contract method 0xf10f6fb5.
//
// Solidity: function registerSeries(address _artistAddress, string _metadataURI, string _tokenDataURI) returns(uint256)
func (_SeriesRegistry *SeriesRegistryTransactor) RegisterSeries(opts *bind.TransactOpts, _artistAddress common.Address, _metadataURI string, _tokenDataURI string) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "registerSeries", _artistAddress, _metadataURI, _tokenDataURI)
}

// RegisterSeries is a paid mutator transaction binding the contract method 0xf10f6fb5.
//
// Solidity: function registerSeries(address _artistAddress, string _metadataURI, string _tokenDataURI) returns(uint256)
func (_SeriesRegistry *SeriesRegistrySession) RegisterSeries(_artistAddress common.Address, _metadataURI string, _tokenDataURI string) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.RegisterSeries(&_SeriesRegistry.TransactOpts, _artistAddress, _metadataURI, _tokenDataURI)
}

// RegisterSeries is a paid mutator transaction binding the contract method 0xf10f6fb5.
//
// Solidity: function registerSeries(address _artistAddress, string _metadataURI, string _tokenDataURI) returns(uint256)
func (_SeriesRegistry *SeriesRegistryTransactorSession) RegisterSeries(_artistAddress common.Address, _metadataURI string, _tokenDataURI string) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.RegisterSeries(&_SeriesRegistry.TransactOpts, _artistAddress, _metadataURI, _tokenDataURI)
}

// RemoveDelegatee is a paid mutator transaction binding the contract method 0x05489558.
//
// Solidity: function removeDelegatee(address _delegatee) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) RemoveDelegatee(opts *bind.TransactOpts, _delegatee common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "removeDelegatee", _delegatee)
}

// RemoveDelegatee is a paid mutator transaction binding the contract method 0x05489558.
//
// Solidity: function removeDelegatee(address _delegatee) returns()
func (_SeriesRegistry *SeriesRegistrySession) RemoveDelegatee(_delegatee common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.RemoveDelegatee(&_SeriesRegistry.TransactOpts, _delegatee)
}

// RemoveDelegatee is a paid mutator transaction binding the contract method 0x05489558.
//
// Solidity: function removeDelegatee(address _delegatee) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) RemoveDelegatee(_delegatee common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.RemoveDelegatee(&_SeriesRegistry.TransactOpts, _delegatee)
}

// UpdateArtistAddress is a paid mutator transaction binding the contract method 0xb784c966.
//
// Solidity: function updateArtistAddress(address _newAddress) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) UpdateArtistAddress(opts *bind.TransactOpts, _newAddress common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "updateArtistAddress", _newAddress)
}

// UpdateArtistAddress is a paid mutator transaction binding the contract method 0xb784c966.
//
// Solidity: function updateArtistAddress(address _newAddress) returns()
func (_SeriesRegistry *SeriesRegistrySession) UpdateArtistAddress(_newAddress common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.UpdateArtistAddress(&_SeriesRegistry.TransactOpts, _newAddress)
}

// UpdateArtistAddress is a paid mutator transaction binding the contract method 0xb784c966.
//
// Solidity: function updateArtistAddress(address _newAddress) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) UpdateArtistAddress(_newAddress common.Address) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.UpdateArtistAddress(&_SeriesRegistry.TransactOpts, _newAddress)
}

// UpdateSeries is a paid mutator transaction binding the contract method 0x1a1751b9.
//
// Solidity: function updateSeries(uint256 _seriesID, string _metadataURI, string _tokenDataURI) returns()
func (_SeriesRegistry *SeriesRegistryTransactor) UpdateSeries(opts *bind.TransactOpts, _seriesID *big.Int, _metadataURI string, _tokenDataURI string) (*types.Transaction, error) {
	return _SeriesRegistry.contract.Transact(opts, "updateSeries", _seriesID, _metadataURI, _tokenDataURI)
}

// UpdateSeries is a paid mutator transaction binding the contract method 0x1a1751b9.
//
// Solidity: function updateSeries(uint256 _seriesID, string _metadataURI, string _tokenDataURI) returns()
func (_SeriesRegistry *SeriesRegistrySession) UpdateSeries(_seriesID *big.Int, _metadataURI string, _tokenDataURI string) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.UpdateSeries(&_SeriesRegistry.TransactOpts, _seriesID, _metadataURI, _tokenDataURI)
}

// UpdateSeries is a paid mutator transaction binding the contract method 0x1a1751b9.
//
// Solidity: function updateSeries(uint256 _seriesID, string _metadataURI, string _tokenDataURI) returns()
func (_SeriesRegistry *SeriesRegistryTransactorSession) UpdateSeries(_seriesID *big.Int, _metadataURI string, _tokenDataURI string) (*types.Transaction, error) {
	return _SeriesRegistry.Contract.UpdateSeries(&_SeriesRegistry.TransactOpts, _seriesID, _metadataURI, _tokenDataURI)
}

// SeriesRegistryAddDelegateeIterator is returned from FilterAddDelegatee and is used to iterate over the raw logs and unpacked data for AddDelegatee events raised by the SeriesRegistry contract.
type SeriesRegistryAddDelegateeIterator struct {
	Event *SeriesRegistryAddDelegatee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SeriesRegistryAddDelegateeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SeriesRegistryAddDelegatee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SeriesRegistryAddDelegatee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SeriesRegistryAddDelegateeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SeriesRegistryAddDelegateeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SeriesRegistryAddDelegatee represents a AddDelegatee event raised by the SeriesRegistry contract.
type SeriesRegistryAddDelegatee struct {
	Delegator common.Address
	Delegatee common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddDelegatee is a free log retrieval operation binding the contract event 0x1c4fb51b751d47c5288bd6a3f62304d662450ff9536b133db14845985c44db69.
//
// Solidity: event AddDelegatee(address indexed delegator, address indexed delegatee)
func (_SeriesRegistry *SeriesRegistryFilterer) FilterAddDelegatee(opts *bind.FilterOpts, delegator []common.Address, delegatee []common.Address) (*SeriesRegistryAddDelegateeIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var delegateeRule []interface{}
	for _, delegateeItem := range delegatee {
		delegateeRule = append(delegateeRule, delegateeItem)
	}

	logs, sub, err := _SeriesRegistry.contract.FilterLogs(opts, "AddDelegatee", delegatorRule, delegateeRule)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistryAddDelegateeIterator{contract: _SeriesRegistry.contract, event: "AddDelegatee", logs: logs, sub: sub}, nil
}

// WatchAddDelegatee is a free log subscription operation binding the contract event 0x1c4fb51b751d47c5288bd6a3f62304d662450ff9536b133db14845985c44db69.
//
// Solidity: event AddDelegatee(address indexed delegator, address indexed delegatee)
func (_SeriesRegistry *SeriesRegistryFilterer) WatchAddDelegatee(opts *bind.WatchOpts, sink chan<- *SeriesRegistryAddDelegatee, delegator []common.Address, delegatee []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var delegateeRule []interface{}
	for _, delegateeItem := range delegatee {
		delegateeRule = append(delegateeRule, delegateeItem)
	}

	logs, sub, err := _SeriesRegistry.contract.WatchLogs(opts, "AddDelegatee", delegatorRule, delegateeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SeriesRegistryAddDelegatee)
				if err := _SeriesRegistry.contract.UnpackLog(event, "AddDelegatee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddDelegatee is a log parse operation binding the contract event 0x1c4fb51b751d47c5288bd6a3f62304d662450ff9536b133db14845985c44db69.
//
// Solidity: event AddDelegatee(address indexed delegator, address indexed delegatee)
func (_SeriesRegistry *SeriesRegistryFilterer) ParseAddDelegatee(log types.Log) (*SeriesRegistryAddDelegatee, error) {
	event := new(SeriesRegistryAddDelegatee)
	if err := _SeriesRegistry.contract.UnpackLog(event, "AddDelegatee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SeriesRegistryAssignAdministratorIterator is returned from FilterAssignAdministrator and is used to iterate over the raw logs and unpacked data for AssignAdministrator events raised by the SeriesRegistry contract.
type SeriesRegistryAssignAdministratorIterator struct {
	Event *SeriesRegistryAssignAdministrator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SeriesRegistryAssignAdministratorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SeriesRegistryAssignAdministrator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SeriesRegistryAssignAdministrator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SeriesRegistryAssignAdministratorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SeriesRegistryAssignAdministratorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SeriesRegistryAssignAdministrator represents a AssignAdministrator event raised by the SeriesRegistry contract.
type SeriesRegistryAssignAdministrator struct {
	SeriesID        *big.Int
	AssignerAddress common.Address
	AssigneeAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterAssignAdministrator is a free log retrieval operation binding the contract event 0xf1c27996c52001dc65fb53c939a65e9263ff67153f1e734a12c3d3a151ac4083.
//
// Solidity: event AssignAdministrator(uint256 indexed seriesID, address indexed assignerAddress, address indexed assigneeAddress)
func (_SeriesRegistry *SeriesRegistryFilterer) FilterAssignAdministrator(opts *bind.FilterOpts, seriesID []*big.Int, assignerAddress []common.Address, assigneeAddress []common.Address) (*SeriesRegistryAssignAdministratorIterator, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}
	var assignerAddressRule []interface{}
	for _, assignerAddressItem := range assignerAddress {
		assignerAddressRule = append(assignerAddressRule, assignerAddressItem)
	}
	var assigneeAddressRule []interface{}
	for _, assigneeAddressItem := range assigneeAddress {
		assigneeAddressRule = append(assigneeAddressRule, assigneeAddressItem)
	}

	logs, sub, err := _SeriesRegistry.contract.FilterLogs(opts, "AssignAdministrator", seriesIDRule, assignerAddressRule, assigneeAddressRule)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistryAssignAdministratorIterator{contract: _SeriesRegistry.contract, event: "AssignAdministrator", logs: logs, sub: sub}, nil
}

// WatchAssignAdministrator is a free log subscription operation binding the contract event 0xf1c27996c52001dc65fb53c939a65e9263ff67153f1e734a12c3d3a151ac4083.
//
// Solidity: event AssignAdministrator(uint256 indexed seriesID, address indexed assignerAddress, address indexed assigneeAddress)
func (_SeriesRegistry *SeriesRegistryFilterer) WatchAssignAdministrator(opts *bind.WatchOpts, sink chan<- *SeriesRegistryAssignAdministrator, seriesID []*big.Int, assignerAddress []common.Address, assigneeAddress []common.Address) (event.Subscription, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}
	var assignerAddressRule []interface{}
	for _, assignerAddressItem := range assignerAddress {
		assignerAddressRule = append(assignerAddressRule, assignerAddressItem)
	}
	var assigneeAddressRule []interface{}
	for _, assigneeAddressItem := range assigneeAddress {
		assigneeAddressRule = append(assigneeAddressRule, assigneeAddressItem)
	}

	logs, sub, err := _SeriesRegistry.contract.WatchLogs(opts, "AssignAdministrator", seriesIDRule, assignerAddressRule, assigneeAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SeriesRegistryAssignAdministrator)
				if err := _SeriesRegistry.contract.UnpackLog(event, "AssignAdministrator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssignAdministrator is a log parse operation binding the contract event 0xf1c27996c52001dc65fb53c939a65e9263ff67153f1e734a12c3d3a151ac4083.
//
// Solidity: event AssignAdministrator(uint256 indexed seriesID, address indexed assignerAddress, address indexed assigneeAddress)
func (_SeriesRegistry *SeriesRegistryFilterer) ParseAssignAdministrator(log types.Log) (*SeriesRegistryAssignAdministrator, error) {
	event := new(SeriesRegistryAssignAdministrator)
	if err := _SeriesRegistry.contract.UnpackLog(event, "AssignAdministrator", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SeriesRegistryAssignSeriesIterator is returned from FilterAssignSeries and is used to iterate over the raw logs and unpacked data for AssignSeries events raised by the SeriesRegistry contract.
type SeriesRegistryAssignSeriesIterator struct {
	Event *SeriesRegistryAssignSeries // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SeriesRegistryAssignSeriesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SeriesRegistryAssignSeries)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SeriesRegistryAssignSeries)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SeriesRegistryAssignSeriesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SeriesRegistryAssignSeriesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SeriesRegistryAssignSeries represents a AssignSeries event raised by the SeriesRegistry contract.
type SeriesRegistryAssignSeries struct {
	SeriesID        *big.Int
	AssignerAddress common.Address
	AssigneeAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterAssignSeries is a free log retrieval operation binding the contract event 0x848e74caa538f5af05a1af3c186cca1e9d0c6f0c25995648face20eea1e930c7.
//
// Solidity: event AssignSeries(uint256 indexed seriesID, address indexed assignerAddress, address indexed assigneeAddress)
func (_SeriesRegistry *SeriesRegistryFilterer) FilterAssignSeries(opts *bind.FilterOpts, seriesID []*big.Int, assignerAddress []common.Address, assigneeAddress []common.Address) (*SeriesRegistryAssignSeriesIterator, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}
	var assignerAddressRule []interface{}
	for _, assignerAddressItem := range assignerAddress {
		assignerAddressRule = append(assignerAddressRule, assignerAddressItem)
	}
	var assigneeAddressRule []interface{}
	for _, assigneeAddressItem := range assigneeAddress {
		assigneeAddressRule = append(assigneeAddressRule, assigneeAddressItem)
	}

	logs, sub, err := _SeriesRegistry.contract.FilterLogs(opts, "AssignSeries", seriesIDRule, assignerAddressRule, assigneeAddressRule)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistryAssignSeriesIterator{contract: _SeriesRegistry.contract, event: "AssignSeries", logs: logs, sub: sub}, nil
}

// WatchAssignSeries is a free log subscription operation binding the contract event 0x848e74caa538f5af05a1af3c186cca1e9d0c6f0c25995648face20eea1e930c7.
//
// Solidity: event AssignSeries(uint256 indexed seriesID, address indexed assignerAddress, address indexed assigneeAddress)
func (_SeriesRegistry *SeriesRegistryFilterer) WatchAssignSeries(opts *bind.WatchOpts, sink chan<- *SeriesRegistryAssignSeries, seriesID []*big.Int, assignerAddress []common.Address, assigneeAddress []common.Address) (event.Subscription, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}
	var assignerAddressRule []interface{}
	for _, assignerAddressItem := range assignerAddress {
		assignerAddressRule = append(assignerAddressRule, assignerAddressItem)
	}
	var assigneeAddressRule []interface{}
	for _, assigneeAddressItem := range assigneeAddress {
		assigneeAddressRule = append(assigneeAddressRule, assigneeAddressItem)
	}

	logs, sub, err := _SeriesRegistry.contract.WatchLogs(opts, "AssignSeries", seriesIDRule, assignerAddressRule, assigneeAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SeriesRegistryAssignSeries)
				if err := _SeriesRegistry.contract.UnpackLog(event, "AssignSeries", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssignSeries is a log parse operation binding the contract event 0x848e74caa538f5af05a1af3c186cca1e9d0c6f0c25995648face20eea1e930c7.
//
// Solidity: event AssignSeries(uint256 indexed seriesID, address indexed assignerAddress, address indexed assigneeAddress)
func (_SeriesRegistry *SeriesRegistryFilterer) ParseAssignSeries(log types.Log) (*SeriesRegistryAssignSeries, error) {
	event := new(SeriesRegistryAssignSeries)
	if err := _SeriesRegistry.contract.UnpackLog(event, "AssignSeries", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SeriesRegistryCancelCollaborationInvitationIterator is returned from FilterCancelCollaborationInvitation and is used to iterate over the raw logs and unpacked data for CancelCollaborationInvitation events raised by the SeriesRegistry contract.
type SeriesRegistryCancelCollaborationInvitationIterator struct {
	Event *SeriesRegistryCancelCollaborationInvitation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SeriesRegistryCancelCollaborationInvitationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SeriesRegistryCancelCollaborationInvitation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SeriesRegistryCancelCollaborationInvitation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SeriesRegistryCancelCollaborationInvitationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SeriesRegistryCancelCollaborationInvitationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SeriesRegistryCancelCollaborationInvitation represents a CancelCollaborationInvitation event raised by the SeriesRegistry contract.
type SeriesRegistryCancelCollaborationInvitation struct {
	SeriesID       *big.Int
	InviteeAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterCancelCollaborationInvitation is a free log retrieval operation binding the contract event 0x7d11c384ca33a803f892b9fa58805d58d316b4eea4c5850cdb2663653a317aaa.
//
// Solidity: event CancelCollaborationInvitation(uint256 indexed seriesID, address indexed inviteeAddress)
func (_SeriesRegistry *SeriesRegistryFilterer) FilterCancelCollaborationInvitation(opts *bind.FilterOpts, seriesID []*big.Int, inviteeAddress []common.Address) (*SeriesRegistryCancelCollaborationInvitationIterator, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}
	var inviteeAddressRule []interface{}
	for _, inviteeAddressItem := range inviteeAddress {
		inviteeAddressRule = append(inviteeAddressRule, inviteeAddressItem)
	}

	logs, sub, err := _SeriesRegistry.contract.FilterLogs(opts, "CancelCollaborationInvitation", seriesIDRule, inviteeAddressRule)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistryCancelCollaborationInvitationIterator{contract: _SeriesRegistry.contract, event: "CancelCollaborationInvitation", logs: logs, sub: sub}, nil
}

// WatchCancelCollaborationInvitation is a free log subscription operation binding the contract event 0x7d11c384ca33a803f892b9fa58805d58d316b4eea4c5850cdb2663653a317aaa.
//
// Solidity: event CancelCollaborationInvitation(uint256 indexed seriesID, address indexed inviteeAddress)
func (_SeriesRegistry *SeriesRegistryFilterer) WatchCancelCollaborationInvitation(opts *bind.WatchOpts, sink chan<- *SeriesRegistryCancelCollaborationInvitation, seriesID []*big.Int, inviteeAddress []common.Address) (event.Subscription, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}
	var inviteeAddressRule []interface{}
	for _, inviteeAddressItem := range inviteeAddress {
		inviteeAddressRule = append(inviteeAddressRule, inviteeAddressItem)
	}

	logs, sub, err := _SeriesRegistry.contract.WatchLogs(opts, "CancelCollaborationInvitation", seriesIDRule, inviteeAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SeriesRegistryCancelCollaborationInvitation)
				if err := _SeriesRegistry.contract.UnpackLog(event, "CancelCollaborationInvitation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCancelCollaborationInvitation is a log parse operation binding the contract event 0x7d11c384ca33a803f892b9fa58805d58d316b4eea4c5850cdb2663653a317aaa.
//
// Solidity: event CancelCollaborationInvitation(uint256 indexed seriesID, address indexed inviteeAddress)
func (_SeriesRegistry *SeriesRegistryFilterer) ParseCancelCollaborationInvitation(log types.Log) (*SeriesRegistryCancelCollaborationInvitation, error) {
	event := new(SeriesRegistryCancelCollaborationInvitation)
	if err := _SeriesRegistry.contract.UnpackLog(event, "CancelCollaborationInvitation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SeriesRegistryDeleteSeriesIterator is returned from FilterDeleteSeries and is used to iterate over the raw logs and unpacked data for DeleteSeries events raised by the SeriesRegistry contract.
type SeriesRegistryDeleteSeriesIterator struct {
	Event *SeriesRegistryDeleteSeries // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SeriesRegistryDeleteSeriesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SeriesRegistryDeleteSeries)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SeriesRegistryDeleteSeries)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SeriesRegistryDeleteSeriesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SeriesRegistryDeleteSeriesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SeriesRegistryDeleteSeries represents a DeleteSeries event raised by the SeriesRegistry contract.
type SeriesRegistryDeleteSeries struct {
	SeriesID *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterDeleteSeries is a free log retrieval operation binding the contract event 0xd1cb5d9dfefdfe2dda1152786a83292f2b48e6c71981358d0f8b9eb7dd92d6f4.
//
// Solidity: event DeleteSeries(uint256 indexed seriesID)
func (_SeriesRegistry *SeriesRegistryFilterer) FilterDeleteSeries(opts *bind.FilterOpts, seriesID []*big.Int) (*SeriesRegistryDeleteSeriesIterator, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}

	logs, sub, err := _SeriesRegistry.contract.FilterLogs(opts, "DeleteSeries", seriesIDRule)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistryDeleteSeriesIterator{contract: _SeriesRegistry.contract, event: "DeleteSeries", logs: logs, sub: sub}, nil
}

// WatchDeleteSeries is a free log subscription operation binding the contract event 0xd1cb5d9dfefdfe2dda1152786a83292f2b48e6c71981358d0f8b9eb7dd92d6f4.
//
// Solidity: event DeleteSeries(uint256 indexed seriesID)
func (_SeriesRegistry *SeriesRegistryFilterer) WatchDeleteSeries(opts *bind.WatchOpts, sink chan<- *SeriesRegistryDeleteSeries, seriesID []*big.Int) (event.Subscription, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}

	logs, sub, err := _SeriesRegistry.contract.WatchLogs(opts, "DeleteSeries", seriesIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SeriesRegistryDeleteSeries)
				if err := _SeriesRegistry.contract.UnpackLog(event, "DeleteSeries", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeleteSeries is a log parse operation binding the contract event 0xd1cb5d9dfefdfe2dda1152786a83292f2b48e6c71981358d0f8b9eb7dd92d6f4.
//
// Solidity: event DeleteSeries(uint256 indexed seriesID)
func (_SeriesRegistry *SeriesRegistryFilterer) ParseDeleteSeries(log types.Log) (*SeriesRegistryDeleteSeries, error) {
	event := new(SeriesRegistryDeleteSeries)
	if err := _SeriesRegistry.contract.UnpackLog(event, "DeleteSeries", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SeriesRegistryInviteCollaboratorIterator is returned from FilterInviteCollaborator and is used to iterate over the raw logs and unpacked data for InviteCollaborator events raised by the SeriesRegistry contract.
type SeriesRegistryInviteCollaboratorIterator struct {
	Event *SeriesRegistryInviteCollaborator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SeriesRegistryInviteCollaboratorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SeriesRegistryInviteCollaborator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SeriesRegistryInviteCollaborator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SeriesRegistryInviteCollaboratorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SeriesRegistryInviteCollaboratorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SeriesRegistryInviteCollaborator represents a InviteCollaborator event raised by the SeriesRegistry contract.
type SeriesRegistryInviteCollaborator struct {
	SeriesID       *big.Int
	InviterAddress common.Address
	InviteeAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterInviteCollaborator is a free log retrieval operation binding the contract event 0x069f1ecfa7d3970ee2c71ac390ebf45d40b6532982dc5e879b449dfc2470416a.
//
// Solidity: event InviteCollaborator(uint256 indexed seriesID, address indexed inviterAddress, address indexed inviteeAddress)
func (_SeriesRegistry *SeriesRegistryFilterer) FilterInviteCollaborator(opts *bind.FilterOpts, seriesID []*big.Int, inviterAddress []common.Address, inviteeAddress []common.Address) (*SeriesRegistryInviteCollaboratorIterator, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}
	var inviterAddressRule []interface{}
	for _, inviterAddressItem := range inviterAddress {
		inviterAddressRule = append(inviterAddressRule, inviterAddressItem)
	}
	var inviteeAddressRule []interface{}
	for _, inviteeAddressItem := range inviteeAddress {
		inviteeAddressRule = append(inviteeAddressRule, inviteeAddressItem)
	}

	logs, sub, err := _SeriesRegistry.contract.FilterLogs(opts, "InviteCollaborator", seriesIDRule, inviterAddressRule, inviteeAddressRule)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistryInviteCollaboratorIterator{contract: _SeriesRegistry.contract, event: "InviteCollaborator", logs: logs, sub: sub}, nil
}

// WatchInviteCollaborator is a free log subscription operation binding the contract event 0x069f1ecfa7d3970ee2c71ac390ebf45d40b6532982dc5e879b449dfc2470416a.
//
// Solidity: event InviteCollaborator(uint256 indexed seriesID, address indexed inviterAddress, address indexed inviteeAddress)
func (_SeriesRegistry *SeriesRegistryFilterer) WatchInviteCollaborator(opts *bind.WatchOpts, sink chan<- *SeriesRegistryInviteCollaborator, seriesID []*big.Int, inviterAddress []common.Address, inviteeAddress []common.Address) (event.Subscription, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}
	var inviterAddressRule []interface{}
	for _, inviterAddressItem := range inviterAddress {
		inviterAddressRule = append(inviterAddressRule, inviterAddressItem)
	}
	var inviteeAddressRule []interface{}
	for _, inviteeAddressItem := range inviteeAddress {
		inviteeAddressRule = append(inviteeAddressRule, inviteeAddressItem)
	}

	logs, sub, err := _SeriesRegistry.contract.WatchLogs(opts, "InviteCollaborator", seriesIDRule, inviterAddressRule, inviteeAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SeriesRegistryInviteCollaborator)
				if err := _SeriesRegistry.contract.UnpackLog(event, "InviteCollaborator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInviteCollaborator is a log parse operation binding the contract event 0x069f1ecfa7d3970ee2c71ac390ebf45d40b6532982dc5e879b449dfc2470416a.
//
// Solidity: event InviteCollaborator(uint256 indexed seriesID, address indexed inviterAddress, address indexed inviteeAddress)
func (_SeriesRegistry *SeriesRegistryFilterer) ParseInviteCollaborator(log types.Log) (*SeriesRegistryInviteCollaborator, error) {
	event := new(SeriesRegistryInviteCollaborator)
	if err := _SeriesRegistry.contract.UnpackLog(event, "InviteCollaborator", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SeriesRegistryOptInCollaborationIterator is returned from FilterOptInCollaboration and is used to iterate over the raw logs and unpacked data for OptInCollaboration events raised by the SeriesRegistry contract.
type SeriesRegistryOptInCollaborationIterator struct {
	Event *SeriesRegistryOptInCollaboration // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SeriesRegistryOptInCollaborationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SeriesRegistryOptInCollaboration)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SeriesRegistryOptInCollaboration)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SeriesRegistryOptInCollaborationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SeriesRegistryOptInCollaborationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SeriesRegistryOptInCollaboration represents a OptInCollaboration event raised by the SeriesRegistry contract.
type SeriesRegistryOptInCollaboration struct {
	SeriesID            *big.Int
	CollaboratorAddress common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterOptInCollaboration is a free log retrieval operation binding the contract event 0xf1be82cf03ce2483decce6c97c3580b7298a5d3ba618b98bc41e7c208007f22f.
//
// Solidity: event OptInCollaboration(uint256 indexed seriesID, address indexed collaboratorAddress)
func (_SeriesRegistry *SeriesRegistryFilterer) FilterOptInCollaboration(opts *bind.FilterOpts, seriesID []*big.Int, collaboratorAddress []common.Address) (*SeriesRegistryOptInCollaborationIterator, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}
	var collaboratorAddressRule []interface{}
	for _, collaboratorAddressItem := range collaboratorAddress {
		collaboratorAddressRule = append(collaboratorAddressRule, collaboratorAddressItem)
	}

	logs, sub, err := _SeriesRegistry.contract.FilterLogs(opts, "OptInCollaboration", seriesIDRule, collaboratorAddressRule)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistryOptInCollaborationIterator{contract: _SeriesRegistry.contract, event: "OptInCollaboration", logs: logs, sub: sub}, nil
}

// WatchOptInCollaboration is a free log subscription operation binding the contract event 0xf1be82cf03ce2483decce6c97c3580b7298a5d3ba618b98bc41e7c208007f22f.
//
// Solidity: event OptInCollaboration(uint256 indexed seriesID, address indexed collaboratorAddress)
func (_SeriesRegistry *SeriesRegistryFilterer) WatchOptInCollaboration(opts *bind.WatchOpts, sink chan<- *SeriesRegistryOptInCollaboration, seriesID []*big.Int, collaboratorAddress []common.Address) (event.Subscription, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}
	var collaboratorAddressRule []interface{}
	for _, collaboratorAddressItem := range collaboratorAddress {
		collaboratorAddressRule = append(collaboratorAddressRule, collaboratorAddressItem)
	}

	logs, sub, err := _SeriesRegistry.contract.WatchLogs(opts, "OptInCollaboration", seriesIDRule, collaboratorAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SeriesRegistryOptInCollaboration)
				if err := _SeriesRegistry.contract.UnpackLog(event, "OptInCollaboration", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOptInCollaboration is a log parse operation binding the contract event 0xf1be82cf03ce2483decce6c97c3580b7298a5d3ba618b98bc41e7c208007f22f.
//
// Solidity: event OptInCollaboration(uint256 indexed seriesID, address indexed collaboratorAddress)
func (_SeriesRegistry *SeriesRegistryFilterer) ParseOptInCollaboration(log types.Log) (*SeriesRegistryOptInCollaboration, error) {
	event := new(SeriesRegistryOptInCollaboration)
	if err := _SeriesRegistry.contract.UnpackLog(event, "OptInCollaboration", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SeriesRegistryOptOutSeriesIterator is returned from FilterOptOutSeries and is used to iterate over the raw logs and unpacked data for OptOutSeries events raised by the SeriesRegistry contract.
type SeriesRegistryOptOutSeriesIterator struct {
	Event *SeriesRegistryOptOutSeries // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SeriesRegistryOptOutSeriesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SeriesRegistryOptOutSeries)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SeriesRegistryOptOutSeries)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SeriesRegistryOptOutSeriesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SeriesRegistryOptOutSeriesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SeriesRegistryOptOutSeries represents a OptOutSeries event raised by the SeriesRegistry contract.
type SeriesRegistryOptOutSeries struct {
	SeriesID      *big.Int
	ArtistAddress common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOptOutSeries is a free log retrieval operation binding the contract event 0xea7a51899c6e1e1b64a73aba8ff9ce974a129f879f83343326f6c09d42834620.
//
// Solidity: event OptOutSeries(uint256 indexed seriesID, address indexed artistAddress)
func (_SeriesRegistry *SeriesRegistryFilterer) FilterOptOutSeries(opts *bind.FilterOpts, seriesID []*big.Int, artistAddress []common.Address) (*SeriesRegistryOptOutSeriesIterator, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}
	var artistAddressRule []interface{}
	for _, artistAddressItem := range artistAddress {
		artistAddressRule = append(artistAddressRule, artistAddressItem)
	}

	logs, sub, err := _SeriesRegistry.contract.FilterLogs(opts, "OptOutSeries", seriesIDRule, artistAddressRule)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistryOptOutSeriesIterator{contract: _SeriesRegistry.contract, event: "OptOutSeries", logs: logs, sub: sub}, nil
}

// WatchOptOutSeries is a free log subscription operation binding the contract event 0xea7a51899c6e1e1b64a73aba8ff9ce974a129f879f83343326f6c09d42834620.
//
// Solidity: event OptOutSeries(uint256 indexed seriesID, address indexed artistAddress)
func (_SeriesRegistry *SeriesRegistryFilterer) WatchOptOutSeries(opts *bind.WatchOpts, sink chan<- *SeriesRegistryOptOutSeries, seriesID []*big.Int, artistAddress []common.Address) (event.Subscription, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}
	var artistAddressRule []interface{}
	for _, artistAddressItem := range artistAddress {
		artistAddressRule = append(artistAddressRule, artistAddressItem)
	}

	logs, sub, err := _SeriesRegistry.contract.WatchLogs(opts, "OptOutSeries", seriesIDRule, artistAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SeriesRegistryOptOutSeries)
				if err := _SeriesRegistry.contract.UnpackLog(event, "OptOutSeries", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOptOutSeries is a log parse operation binding the contract event 0xea7a51899c6e1e1b64a73aba8ff9ce974a129f879f83343326f6c09d42834620.
//
// Solidity: event OptOutSeries(uint256 indexed seriesID, address indexed artistAddress)
func (_SeriesRegistry *SeriesRegistryFilterer) ParseOptOutSeries(log types.Log) (*SeriesRegistryOptOutSeries, error) {
	event := new(SeriesRegistryOptOutSeries)
	if err := _SeriesRegistry.contract.UnpackLog(event, "OptOutSeries", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SeriesRegistryRegisterSeriesIterator is returned from FilterRegisterSeries and is used to iterate over the raw logs and unpacked data for RegisterSeries events raised by the SeriesRegistry contract.
type SeriesRegistryRegisterSeriesIterator struct {
	Event *SeriesRegistryRegisterSeries // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SeriesRegistryRegisterSeriesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SeriesRegistryRegisterSeries)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SeriesRegistryRegisterSeries)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SeriesRegistryRegisterSeriesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SeriesRegistryRegisterSeriesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SeriesRegistryRegisterSeries represents a RegisterSeries event raised by the SeriesRegistry contract.
type SeriesRegistryRegisterSeries struct {
	SeriesID *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterRegisterSeries is a free log retrieval operation binding the contract event 0x55d82c1e0fbf557aad06476685a2e64309e639e7b9763ffc3cffce16cb33f689.
//
// Solidity: event RegisterSeries(uint256 indexed seriesID)
func (_SeriesRegistry *SeriesRegistryFilterer) FilterRegisterSeries(opts *bind.FilterOpts, seriesID []*big.Int) (*SeriesRegistryRegisterSeriesIterator, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}

	logs, sub, err := _SeriesRegistry.contract.FilterLogs(opts, "RegisterSeries", seriesIDRule)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistryRegisterSeriesIterator{contract: _SeriesRegistry.contract, event: "RegisterSeries", logs: logs, sub: sub}, nil
}

// WatchRegisterSeries is a free log subscription operation binding the contract event 0x55d82c1e0fbf557aad06476685a2e64309e639e7b9763ffc3cffce16cb33f689.
//
// Solidity: event RegisterSeries(uint256 indexed seriesID)
func (_SeriesRegistry *SeriesRegistryFilterer) WatchRegisterSeries(opts *bind.WatchOpts, sink chan<- *SeriesRegistryRegisterSeries, seriesID []*big.Int) (event.Subscription, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}

	logs, sub, err := _SeriesRegistry.contract.WatchLogs(opts, "RegisterSeries", seriesIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SeriesRegistryRegisterSeries)
				if err := _SeriesRegistry.contract.UnpackLog(event, "RegisterSeries", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegisterSeries is a log parse operation binding the contract event 0x55d82c1e0fbf557aad06476685a2e64309e639e7b9763ffc3cffce16cb33f689.
//
// Solidity: event RegisterSeries(uint256 indexed seriesID)
func (_SeriesRegistry *SeriesRegistryFilterer) ParseRegisterSeries(log types.Log) (*SeriesRegistryRegisterSeries, error) {
	event := new(SeriesRegistryRegisterSeries)
	if err := _SeriesRegistry.contract.UnpackLog(event, "RegisterSeries", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SeriesRegistryRemoveDelegateeIterator is returned from FilterRemoveDelegatee and is used to iterate over the raw logs and unpacked data for RemoveDelegatee events raised by the SeriesRegistry contract.
type SeriesRegistryRemoveDelegateeIterator struct {
	Event *SeriesRegistryRemoveDelegatee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SeriesRegistryRemoveDelegateeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SeriesRegistryRemoveDelegatee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SeriesRegistryRemoveDelegatee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SeriesRegistryRemoveDelegateeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SeriesRegistryRemoveDelegateeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SeriesRegistryRemoveDelegatee represents a RemoveDelegatee event raised by the SeriesRegistry contract.
type SeriesRegistryRemoveDelegatee struct {
	Delegator common.Address
	Delegatee common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRemoveDelegatee is a free log retrieval operation binding the contract event 0x8732c78d676602017c04aba5c294355b037bbb1e67979ccbcada1f54b4c2238f.
//
// Solidity: event RemoveDelegatee(address indexed delegator, address indexed delegatee)
func (_SeriesRegistry *SeriesRegistryFilterer) FilterRemoveDelegatee(opts *bind.FilterOpts, delegator []common.Address, delegatee []common.Address) (*SeriesRegistryRemoveDelegateeIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var delegateeRule []interface{}
	for _, delegateeItem := range delegatee {
		delegateeRule = append(delegateeRule, delegateeItem)
	}

	logs, sub, err := _SeriesRegistry.contract.FilterLogs(opts, "RemoveDelegatee", delegatorRule, delegateeRule)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistryRemoveDelegateeIterator{contract: _SeriesRegistry.contract, event: "RemoveDelegatee", logs: logs, sub: sub}, nil
}

// WatchRemoveDelegatee is a free log subscription operation binding the contract event 0x8732c78d676602017c04aba5c294355b037bbb1e67979ccbcada1f54b4c2238f.
//
// Solidity: event RemoveDelegatee(address indexed delegator, address indexed delegatee)
func (_SeriesRegistry *SeriesRegistryFilterer) WatchRemoveDelegatee(opts *bind.WatchOpts, sink chan<- *SeriesRegistryRemoveDelegatee, delegator []common.Address, delegatee []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var delegateeRule []interface{}
	for _, delegateeItem := range delegatee {
		delegateeRule = append(delegateeRule, delegateeItem)
	}

	logs, sub, err := _SeriesRegistry.contract.WatchLogs(opts, "RemoveDelegatee", delegatorRule, delegateeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SeriesRegistryRemoveDelegatee)
				if err := _SeriesRegistry.contract.UnpackLog(event, "RemoveDelegatee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveDelegatee is a log parse operation binding the contract event 0x8732c78d676602017c04aba5c294355b037bbb1e67979ccbcada1f54b4c2238f.
//
// Solidity: event RemoveDelegatee(address indexed delegator, address indexed delegatee)
func (_SeriesRegistry *SeriesRegistryFilterer) ParseRemoveDelegatee(log types.Log) (*SeriesRegistryRemoveDelegatee, error) {
	event := new(SeriesRegistryRemoveDelegatee)
	if err := _SeriesRegistry.contract.UnpackLog(event, "RemoveDelegatee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SeriesRegistryUpdateArtistAddressIterator is returned from FilterUpdateArtistAddress and is used to iterate over the raw logs and unpacked data for UpdateArtistAddress events raised by the SeriesRegistry contract.
type SeriesRegistryUpdateArtistAddressIterator struct {
	Event *SeriesRegistryUpdateArtistAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SeriesRegistryUpdateArtistAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SeriesRegistryUpdateArtistAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SeriesRegistryUpdateArtistAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SeriesRegistryUpdateArtistAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SeriesRegistryUpdateArtistAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SeriesRegistryUpdateArtistAddress represents a UpdateArtistAddress event raised by the SeriesRegistry contract.
type SeriesRegistryUpdateArtistAddress struct {
	OldAddress common.Address
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateArtistAddress is a free log retrieval operation binding the contract event 0x4908f8df298e29e82b08d2367b89cc9e0a041d1fa94df05fb14872975cd56597.
//
// Solidity: event UpdateArtistAddress(address indexed oldAddress, address indexed newAddress)
func (_SeriesRegistry *SeriesRegistryFilterer) FilterUpdateArtistAddress(opts *bind.FilterOpts, oldAddress []common.Address, newAddress []common.Address) (*SeriesRegistryUpdateArtistAddressIterator, error) {

	var oldAddressRule []interface{}
	for _, oldAddressItem := range oldAddress {
		oldAddressRule = append(oldAddressRule, oldAddressItem)
	}
	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _SeriesRegistry.contract.FilterLogs(opts, "UpdateArtistAddress", oldAddressRule, newAddressRule)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistryUpdateArtistAddressIterator{contract: _SeriesRegistry.contract, event: "UpdateArtistAddress", logs: logs, sub: sub}, nil
}

// WatchUpdateArtistAddress is a free log subscription operation binding the contract event 0x4908f8df298e29e82b08d2367b89cc9e0a041d1fa94df05fb14872975cd56597.
//
// Solidity: event UpdateArtistAddress(address indexed oldAddress, address indexed newAddress)
func (_SeriesRegistry *SeriesRegistryFilterer) WatchUpdateArtistAddress(opts *bind.WatchOpts, sink chan<- *SeriesRegistryUpdateArtistAddress, oldAddress []common.Address, newAddress []common.Address) (event.Subscription, error) {

	var oldAddressRule []interface{}
	for _, oldAddressItem := range oldAddress {
		oldAddressRule = append(oldAddressRule, oldAddressItem)
	}
	var newAddressRule []interface{}
	for _, newAddressItem := range newAddress {
		newAddressRule = append(newAddressRule, newAddressItem)
	}

	logs, sub, err := _SeriesRegistry.contract.WatchLogs(opts, "UpdateArtistAddress", oldAddressRule, newAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SeriesRegistryUpdateArtistAddress)
				if err := _SeriesRegistry.contract.UnpackLog(event, "UpdateArtistAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateArtistAddress is a log parse operation binding the contract event 0x4908f8df298e29e82b08d2367b89cc9e0a041d1fa94df05fb14872975cd56597.
//
// Solidity: event UpdateArtistAddress(address indexed oldAddress, address indexed newAddress)
func (_SeriesRegistry *SeriesRegistryFilterer) ParseUpdateArtistAddress(log types.Log) (*SeriesRegistryUpdateArtistAddress, error) {
	event := new(SeriesRegistryUpdateArtistAddress)
	if err := _SeriesRegistry.contract.UnpackLog(event, "UpdateArtistAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SeriesRegistryUpdateSeriesIterator is returned from FilterUpdateSeries and is used to iterate over the raw logs and unpacked data for UpdateSeries events raised by the SeriesRegistry contract.
type SeriesRegistryUpdateSeriesIterator struct {
	Event *SeriesRegistryUpdateSeries // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SeriesRegistryUpdateSeriesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SeriesRegistryUpdateSeries)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SeriesRegistryUpdateSeries)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SeriesRegistryUpdateSeriesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SeriesRegistryUpdateSeriesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SeriesRegistryUpdateSeries represents a UpdateSeries event raised by the SeriesRegistry contract.
type SeriesRegistryUpdateSeries struct {
	SeriesID *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterUpdateSeries is a free log retrieval operation binding the contract event 0x799805152d6bdc2303ac0dbac07df8ecbd5946b3f66426ab316f5f3670876096.
//
// Solidity: event UpdateSeries(uint256 indexed seriesID)
func (_SeriesRegistry *SeriesRegistryFilterer) FilterUpdateSeries(opts *bind.FilterOpts, seriesID []*big.Int) (*SeriesRegistryUpdateSeriesIterator, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}

	logs, sub, err := _SeriesRegistry.contract.FilterLogs(opts, "UpdateSeries", seriesIDRule)
	if err != nil {
		return nil, err
	}
	return &SeriesRegistryUpdateSeriesIterator{contract: _SeriesRegistry.contract, event: "UpdateSeries", logs: logs, sub: sub}, nil
}

// WatchUpdateSeries is a free log subscription operation binding the contract event 0x799805152d6bdc2303ac0dbac07df8ecbd5946b3f66426ab316f5f3670876096.
//
// Solidity: event UpdateSeries(uint256 indexed seriesID)
func (_SeriesRegistry *SeriesRegistryFilterer) WatchUpdateSeries(opts *bind.WatchOpts, sink chan<- *SeriesRegistryUpdateSeries, seriesID []*big.Int) (event.Subscription, error) {

	var seriesIDRule []interface{}
	for _, seriesIDItem := range seriesID {
		seriesIDRule = append(seriesIDRule, seriesIDItem)
	}

	logs, sub, err := _SeriesRegistry.contract.WatchLogs(opts, "UpdateSeries", seriesIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SeriesRegistryUpdateSeries)
				if err := _SeriesRegistry.contract.UnpackLog(event, "UpdateSeries", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateSeries is a log parse operation binding the contract event 0x799805152d6bdc2303ac0dbac07df8ecbd5946b3f66426ab316f5f3670876096.
//
// Solidity: event UpdateSeries(uint256 indexed seriesID)
func (_SeriesRegistry *SeriesRegistryFilterer) ParseUpdateSeries(log types.Log) (*SeriesRegistryUpdateSeries, error) {
	event := new(SeriesRegistryUpdateSeries)
	if err := _SeriesRegistry.contract.UnpackLog(event, "UpdateSeries", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
