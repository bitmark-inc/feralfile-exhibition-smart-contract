// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package feralfilev3

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// FeralfileExhibitionV3Artwork is an auto generated low-level Go binding around an user-defined struct.
type FeralfileExhibitionV3Artwork struct {
	Title       string
	ArtistName  string
	Fingerprint string
	EditionSize *big.Int
	AEAmount    *big.Int
	PPAmount    *big.Int
}

// FeralfileExhibitionV3MintArtworkParam is an auto generated low-level Go binding around an user-defined struct.
type FeralfileExhibitionV3MintArtworkParam struct {
	ArtworkID *big.Int
	Edition   *big.Int
	Artist    common.Address
	Owner     common.Address
	IpfsCID   string
}

// FeralfileExhibitionV3TransferArtworkParam is an auto generated low-level Go binding around an user-defined struct.
type FeralfileExhibitionV3TransferArtworkParam struct {
	From       common.Address
	To         common.Address
	TokenID    *big.Int
	ExpireTime *big.Int
	R          [32]byte
	S          [32]byte
	V          uint8
}

// FeralfileExhibitionV3MetaData contains all meta data concerning the FeralfileExhibitionV3 contract.
var FeralfileExhibitionV3MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"secondarySaleRoyaltyBPS_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltyPayoutAddress_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenBaseURI_\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isBurnable_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isBridgeable_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"editionID\",\"type\":\"uint256\"}],\"name\":\"BurnArtworkEdition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"}],\"name\":\"NewArtwork\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"editionID\",\"type\":\"uint256\"}],\"name\":\"NewArtworkEdition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_ROYALITY_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustee\",\"type\":\"address\"}],\"name\":\"addTrustee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artworkEditions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"editionID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsCID\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artworks\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artistName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fingerprint\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"AEAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PPAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"codeVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBridgeable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBurnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustee\",\"type\":\"address\"}],\"name\":\"removeTrustee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyPayoutAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondarySaleRoyaltyBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"trustees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artistName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fingerprint\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"AEAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PPAmount\",\"type\":\"uint256\"}],\"internalType\":\"structFeralfileExhibitionV3.Artwork[]\",\"name\":\"artworks_\",\"type\":\"tuple[]\"}],\"name\":\"createArtworks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalArtworks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getArtworkByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsCID\",\"type\":\"string\"}],\"name\":\"updateArtworkEditionIPFSCid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"royaltyPayoutAddress_\",\"type\":\"address\"}],\"name\":\"setRoyaltyPayoutAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"}],\"name\":\"totalEditionOfArtwork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getArtworkEditionByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setTokenBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"}],\"internalType\":\"structFeralfileExhibitionV3.TransferArtworkParam[]\",\"name\":\"transferParams_\",\"type\":\"tuple[]\"}],\"name\":\"authorizedTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"edition\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ipfsCID\",\"type\":\"string\"}],\"internalType\":\"structFeralfileExhibitionV3.MintArtworkParam[]\",\"name\":\"mintParams_\",\"type\":\"tuple[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"editionIDs_\",\"type\":\"uint256[]\"}],\"name\":\"burnEditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a06040523480156200001157600080fd5b50604051620044d3380380620044d3833981016040819052620000349162000324565b87876000620000448382620004ae565b506001620000538282620004ae565b505050620000706200006a620001db60201b60201c565b620001df565b612710861115620001065760405162461bcd60e51b815260206004820152604f60248201527f726f79616c74792042505320666f72207365636f6e646172792073616c65732060448201527f63616e206e6f742062652067726561746572207468616e20746865206d61786960648201526e6d756d20726f79616c74792042505360881b608482015260a4015b60405180910390fd5b6001600160a01b0385166200015e5760405162461bcd60e51b815260206004820152601e60248201527f696e76616c696420726f79616c7479207061796f7574206164647265737300006044820152606401620000fd565b6080869052600c80546001600160a01b0319166001600160a01b038716179055600e6200018c8582620004ae565b50600d6200019b8482620004ae565b50600c805461ffff60a01b1916600160a01b9315159390930260ff60a81b191692909217600160a81b91151591909102179055506200057a945050505050565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200025957600080fd5b81516001600160401b038082111562000276576200027662000231565b604051601f8301601f19908116603f01168101908282118183101715620002a157620002a162000231565b81604052838152602092508683858801011115620002be57600080fd5b600091505b83821015620002e25785820183015181830184015290820190620002c3565b600093810190920192909252949350505050565b80516001600160a01b03811681146200030e57600080fd5b919050565b805180151581146200030e57600080fd5b600080600080600080600080610100898b0312156200034257600080fd5b88516001600160401b03808211156200035a57600080fd5b620003688c838d0162000247565b995060208b01519150808211156200037f57600080fd5b6200038d8c838d0162000247565b985060408b01519750620003a460608c01620002f6565b965060808b0151915080821115620003bb57600080fd5b620003c98c838d0162000247565b955060a08b0151915080821115620003e057600080fd5b50620003ef8b828c0162000247565b9350506200040060c08a0162000313565b91506200041060e08a0162000313565b90509295985092959890939650565b600181811c908216806200043457607f821691505b6020821081036200045557634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004a957600081815260208120601f850160051c81016020861015620004845750805b601f850160051c820191505b81811015620004a55782815560010162000490565b5050505b505050565b81516001600160401b03811115620004ca57620004ca62000231565b620004e281620004db84546200041f565b846200045b565b602080601f8311600181146200051a5760008415620005015750858301515b600019600386901b1c1916600185901b178555620004a5565b600085815260208120601f198616915b828110156200054b578886015182559484019460019091019084016200052a565b50858210156200056a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051613f366200059d600039600081816105bf0152610b920152613f366000f3fe608060405234801561001057600080fd5b50600436106102695760003560e01c806370a0823111610151578063c87b56dd116100c3578063ea211d7c11610087578063ea211d7c146105ba578063ec9cbb44146105e1578063eee608a4146105ea578063f2fde38b1461060d578063fc05ea6814610620578063fe2a3bf31461063357600080fd5b8063c87b56dd14610548578063dc78ac1c1461055b578063e4a233e11461056e578063e8a3d48514610576578063e985e9c51461057e57600080fd5b80638ef79e91116101155780638ef79e91146104e157806395d89b41146104f45780639fbf39cd146104fc578063a22cb4651461050f578063b488370314610522578063b88d4fde1461053557600080fd5b806370a082311461048d578063715018a6146104a05780637ca5ea89146104a8578063883356d9146104bc5780638da5cb5b146104d057600080fd5b80632f745c59116101ea5780634b602673116101ae5780634b602673146103da5780634f6ccce7146103ff57806362fe2131146104125780636352211e1461043357806363e6023014610446578063641b18e91461047a57600080fd5b80632f745c591461037b5780633f6805ba1461038e57806342842e0e146103a157806343deaf76146103b457806345aeefde146103c757600080fd5b80630cfcb5f1116102315780630cfcb5f1146102fe57806312d907b91461031157806318160ddd1461032457806323b872dd146103365780632a55205a1461034957600080fd5b806301ffc9a71461026e578063031205061461029657806306fdde03146102ab578063081812fc146102c0578063095ea7b3146102eb575b600080fd5b61028161027c3660046131e0565b610653565b60405190151581526020015b60405180910390f35b6102a96102a4366004613220565b61067e565b005b6102b36106a7565b60405161028d919061328b565b6102d36102ce36600461329e565b610739565b6040516001600160a01b03909116815260200161028d565b6102a96102f93660046132b7565b610760565b6102a961030c36600461340a565b61087a565b6102a961031f366004613473565b6109e8565b6008545b60405190815260200161028d565b6102a9610344366004613594565b610ad9565b61035c6103573660046135d0565b610b0a565b604080516001600160a01b03909316835260208301919091520161028d565b6103286103893660046132b7565b610bca565b600c546102d3906001600160a01b031681565b6102a96103af366004613594565b610c60565b6102a96103c23660046135f2565b610c7b565b6102a96103d5366004613220565b610d87565b6103ed6103e836600461329e565b610e30565b60405161028d9695949392919061373e565b61032861040d36600461329e565b610ffc565b61042561042036600461329e565b61108f565b60405161028d929190613796565b6102d361044136600461329e565b611134565b6102b360405180604001604052806015815260200174466572616c66696c6545786869626974696f6e563360581b81525081565b6103286104883660046135d0565b611194565b61032861049b366004613220565b6111e1565b6102a9611267565b600c5461028190600160a81b900460ff1681565b600c5461028190600160a01b900460ff1681565b600a546001600160a01b03166102d3565b6102a96104ef3660046137af565b61127b565b6102b36112b8565b6102a961050a3660046137e3565b6112c7565b6102a961051d3660046138e6565b611338565b61032861053036600461329e565b611343565b6102a9610543366004613922565b6113bb565b6102b361055636600461329e565b6113ed565b6102a9610569366004613220565b611553565b600f54610328565b6102b361157f565b61028161058c36600461399d565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6103287f000000000000000000000000000000000000000000000000000000000000000081565b61032861271081565b6102816105f8366004613220565b600b6020526000908152604090205460ff1681565b6102a961061b366004613220565b61158e565b6102a961062e3660046139c7565b611607565b61032861064136600461329e565b60009081526012602052604090205490565b60006001600160e01b0319821663780e9d6360e01b14806106785750610678826118e9565b92915050565b61068661190e565b6001600160a01b03166000908152600b60205260409020805460ff19169055565b6060600080546106b690613a57565b80601f01602080910402602001604051908101604052809291908181526020018280546106e290613a57565b801561072f5780601f106107045761010080835404028352916020019161072f565b820191906000526020600020905b81548152906001019060200180831161071257829003601f168201915b5050505050905090565b600061074482611968565b506000908152600460205260409020546001600160a01b031690565b600061076b82611134565b9050806001600160a01b0316836001600160a01b0316036107dd5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806107f957506107f9813361058c565b61086b5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016107d4565b61087583836119b8565b505050565b336000908152600b602052604090205460ff16806108a25750600a546001600160a01b031633145b6108ab57600080fd5b6108b482611a26565b6109005760405162461bcd60e51b815260206004820152601c60248201527f617274776f726b2065646974696f6e206973206e6f7420666f756e640000000060448201526064016107d4565b6013816040516109109190613a91565b9081526040519081900360200190205460ff16156109695760405162461bcd60e51b81526020600482015260166024820152751a5c199cc81a59081a185cc81c9959da5cdd195c995960521b60448201526064016107d4565b60008281526011602052604090819020905160139061098c906001840190613b20565b908152604051908190036020018120805460ff191690556001906013906109b4908590613a91565b908152604051908190036020019020805491151560ff19909216919091179055600181016109e28382613b7a565b50505050565b336000908152600b602052604090205460ff1680610a105750600a546001600160a01b031633145b610a1957600080fd5b60005b8151811015610ad557610ac3828281518110610a3a57610a3a613c39565b602002602001015160000151838381518110610a5857610a58613c39565b602002602001015160200151848481518110610a7657610a76613c39565b602002602001015160400151858581518110610a9457610a94613c39565b602002602001015160600151868681518110610ab257610ab2613c39565b602002602001015160800151611a43565b80610acd81613c65565b915050610a1c565b5050565b610ae33382611e4f565b610aff5760405162461bcd60e51b81526004016107d490613c7e565b610875838383611ece565b600080610b1684611a26565b610b7c5760405162461bcd60e51b815260206004820152603160248201527f455243323938313a20717565727920726f79616c747920696e666f20666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b60648201526084016107d4565b600c546001600160a01b03169150612710610bb77f000000000000000000000000000000000000000000000000000000000000000085613ccb565b610bc19190613ce2565b90509250929050565b6000610bd5836111e1565b8210610c375760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016107d4565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b610875838383604051806020016040528060008152506113bb565b336000908152600b602052604090205460ff1680610ca35750600a546001600160a01b031633145b610cac57600080fd5b60005b8151811015610ad557610d74828281518110610ccd57610ccd613c39565b602002602001015160400151838381518110610ceb57610ceb613c39565b602002602001015160000151848481518110610d0957610d09613c39565b602002602001015160200151858581518110610d2757610d27613c39565b602002602001015160600151868681518110610d4557610d45613c39565b602002602001015160800151878781518110610d6357610d63613c39565b602002602001015160a0015161203f565b5080610d7f81613c65565b915050610caf565b336000908152600b602052604090205460ff1680610daf5750600a546001600160a01b031633145b610db857600080fd5b6001600160a01b038116610e0e5760405162461bcd60e51b815260206004820152601e60248201527f696e76616c696420726f79616c7479207061796f75742061646472657373000060448201526064016107d4565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b601060205260009081526040902080548190610e4b90613a57565b80601f0160208091040260200160405190810160405280929190818152602001828054610e7790613a57565b8015610ec45780601f10610e9957610100808354040283529160200191610ec4565b820191906000526020600020905b815481529060010190602001808311610ea757829003601f168201915b505050505090806001018054610ed990613a57565b80601f0160208091040260200160405190810160405280929190818152602001828054610f0590613a57565b8015610f525780601f10610f2757610100808354040283529160200191610f52565b820191906000526020600020905b815481529060010190602001808311610f3557829003601f168201915b505050505090806002018054610f6790613a57565b80601f0160208091040260200160405190810160405280929190818152602001828054610f9390613a57565b8015610fe05780601f10610fb557610100808354040283529160200191610fe0565b820191906000526020600020905b815481529060010190602001808311610fc357829003601f168201915b5050505050908060030154908060040154908060050154905086565b600061100760085490565b821061106a5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016107d4565b6008828154811061107d5761107d613c39565b90600052602060002001549050919050565b601160205260009081526040902080546001820180549192916110b190613a57565b80601f01602080910402602001604051908101604052809291908181526020018280546110dd90613a57565b801561112a5780601f106110ff5761010080835404028352916020019161112a565b820191906000526020600020905b81548152906001019060200180831161110d57829003601f168201915b5050505050905082565b6000818152600260205260408120546001600160a01b0316806106785760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016107d4565b60008281526012602052604081205482106111ae57600080fd5b60008381526012602052604090208054839081106111ce576111ce613c39565b9060005260206000200154905092915050565b60006001600160a01b03821661124b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016107d4565b506001600160a01b031660009081526003602052604090205490565b61126f61190e565b6112796000612348565b565b336000908152600b602052604090205460ff16806112a35750600a546001600160a01b031633145b6112ac57600080fd5b600d610ad58282613b7a565b6060600180546106b690613a57565b336000908152600b602052604090205460ff16806112ef5750600a546001600160a01b031633145b6112f857600080fd5b60005b8151811015610ad55761132682828151811061131957611319613c39565b602002602001015161239a565b8061133081613c65565b9150506112fb565b610ad533838361257f565b600061134e600f5490565b82106113a85760405162461bcd60e51b8152602060048201526024808201527f617274776f726b733a20676c6f62616c20696e646578206f7574206f6620626f604482015263756e647360e01b60648201526084016107d4565b600f828154811061107d5761107d613c39565b6113c53383611e4f565b6113e15760405162461bcd60e51b81526004016107d490613c7e565b6109e28484848461264d565b60606113f882611a26565b61145c5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016107d4565b6000600d805461146b90613a57565b80601f016020809104026020016040519081016040528092919081815260200182805461149790613a57565b80156114e45780601f106114b9576101008083540402835291602001916114e4565b820191906000526020600020905b8154815290600101906020018083116114c757829003601f168201915b5050505050905080516000036115145750604080518082019091526007815266697066733a2f2f60c81b60208201525b806011600085815260200190815260200160002060010160405160200161153c929190613d04565b604051602081830303815290604052915050919050565b61155b61190e565b6001600160a01b03166000908152600b60205260409020805460ff19166001179055565b6060600e80546106b690613a57565b61159661190e565b6001600160a01b0381166115fb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107d4565b61160481612348565b50565b600c54600160a01b900460ff166116765760405162461bcd60e51b815260206004820152602d60248201527f466572616c66696c6545786869626974696f6e56333a206e6f7420616c6c6f7760448201526c10313ab9371032b234ba34b7b760991b60648201526084016107d4565b60005b8151811015610ad5576116a482828151811061169757611697613c39565b6020026020010151611a26565b6116c05760405162461bcd60e51b81526004016107d490613d2b565b6116e3338383815181106116d6576116d6613c39565b6020026020010151611e4f565b6116ff5760405162461bcd60e51b81526004016107d490613d6f565b60006011600084848151811061171757611717613c39565b602002602001015181526020019081526020016000206040518060400160405290816000820154815260200160018201805461175290613a57565b80601f016020809104026020016040519081016040528092919081815260200182805461177e90613a57565b80156117cb5780601f106117a0576101008083540402835291602001916117cb565b820191906000526020600020905b8154815290600101906020018083116117ae57829003601f168201915b5050505050815250509050601381602001516040516117ea9190613a91565b908152604051908190036020019020805460ff19169055825160119060009085908590811061181b5761181b613c39565b6020026020010151815260200190815260200160002060008082016000905560018201600061184a919061317c565b505061186e83838151811061186157611861613c39565b6020026020010151612680565b61189083838151811061188357611883613c39565b602002602001015161286e565b8282815181106118a2576118a2613c39565b60200260200101517fa5a44c7ed36966786612323ee2cb0cb453d4a9282b90c6befe72cde41d83f48860405160405180910390a250806118e181613c65565b915050611679565b60006001600160e01b0319821663780e9d6360e01b1480610678575061067882612911565b600a546001600160a01b031633146112795760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107d4565b61197181611a26565b6116045760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016107d4565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906119ed82611134565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000908152600260205260409020546001600160a01b0316151590565b600085815260106020526040902060030154611ab55760405162461bcd60e51b815260206004820152602b60248201527f466572616c66696c6545786869626974696f6e56333a20617274776f726b206960448201526a1cc81b9bdd08199bdd5b9960aa1b60648201526084016107d4565b6000858152601060205260409020600581015460048201546003909201549091611ade91613dbd565b611ae89190613dbd565b8410611b715760405162461bcd60e51b815260206004820152604c60248201527f466572616c66696c6545786869626974696f6e56333a2065646974696f6e206e60448201527f756d62657220657863656564207468652065646974696f6e2073697a65206f6660648201526b2074686520617274776f726b60a01b608482015260a4016107d4565b6001600160a01b038316611bc05760405162461bcd60e51b8152602060048201526016602482015275696e76616c696420617274697374206164647265737360501b60448201526064016107d4565b6001600160a01b038216611c0e5760405162461bcd60e51b8152602060048201526015602482015274696e76616c6964206f776e6572206164647265737360581b60448201526064016107d4565b601381604051611c1e9190613a91565b9081526040519081900360200190205460ff1615611c775760405162461bcd60e51b81526020600482015260166024820152751a5c199cc81a59081a185cc81c9959da5cdd195c995960521b60448201526064016107d4565b6000611c838587613dbd565b60008181526011602052604090205490915015611cf95760405162461bcd60e51b815260206004820152602e60248201527f466572616c66696c6545786869626974696f6e56333a2074686520656469746960448201526d1bdb881a5cc8195e1a5cdd195b9d60921b60648201526084016107d4565b604080518082018252828152602080820185815260008581526011909252929020815181559151909182916001820190611d339082613b7a565b505050600087815260126020818152604080842080546001818101835582875284872090910188905582518084019093528c8352948c90529282529154919290830191611d809190613dd0565b90526000838152601460209081526040918290208351815592015160019283015551601390611db0908690613a91565b908152604051908190036020019020805491151560ff19909216919091179055611dda8583612961565b836001600160a01b0316856001600160a01b031614611e0e57611e0e8585846040518060200160405280600081525061264d565b8187856001600160a01b03167f4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd460405160405180910390a450505050505050565b600080611e5b83611134565b9050806001600160a01b0316846001600160a01b03161480611ea257506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80611ec65750836001600160a01b0316611ebb84610739565b6001600160a01b0316145b949350505050565b826001600160a01b0316611ee182611134565b6001600160a01b031614611f075760405162461bcd60e51b81526004016107d490613de3565b6001600160a01b038216611f695760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016107d4565b611f76838383600161297b565b826001600160a01b0316611f8982611134565b6001600160a01b031614611faf5760405162461bcd60e51b81526004016107d490613de3565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000855160000361208b5760405162461bcd60e51b81526020600482015260166024820152757469746c652063616e206e6f7420626520656d70747960501b60448201526064016107d4565b84516000036120dc5760405162461bcd60e51b815260206004820152601760248201527f6172746973742063616e206e6f7420626520656d70747900000000000000000060448201526064016107d4565b865160000361212d5760405162461bcd60e51b815260206004820152601c60248201527f66696e6765727072696e742063616e206e6f7420626520656d7074790000000060448201526064016107d4565b600084116121895760405162461bcd60e51b815260206004820152602360248201527f65646974696f6e2073697a65206e6565647320746f206265206174206c65617360448201526274203160e81b60648201526084016107d4565b60008760405160200161219c919061328b565b60408051601f1981840301815291815281516020928301206000818152601090935291206002018054919250906121d290613a57565b1590506122475760405162461bcd60e51b815260206004820152603b60248201527f616e20617274776f726b2077697468207468652073616d652066696e6765727060448201527f72696e742068617320616c72656164792072656769737465726564000000000060648201526084016107d4565b6040805160c08101825288815260208082018990528183018b9052606082018890526080820187905260a08201869052600f8054600181019091557f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802018490556000848152601090915291909120815182919081906122c69082613b7a565b50602082015160018201906122db9082613b7a565b50604082015160028201906122f09082613b7a565b50606082015160038201556080820151600482015560a09091015160059091015560405182907f22350b25f1b72bb3621199a79abefeb4fcd77bb1e65638cd09350666e4db089190600090a250979650505050505050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6123a78160400151611a26565b6123c35760405162461bcd60e51b81526004016107d490613d2b565b6123d581600001518260400151611e4f565b6123f15760405162461bcd60e51b81526004016107d490613d6f565b80606001514211156124645760405162461bcd60e51b815260206004820152603660248201527f466572616c66696c6545786869626974696f6e56333a20746865207472616e7360448201527519995c881c995c5d595cdd081a5cc8195e1c1a5c995960521b60648201526084016107d4565b600081600001518260200151836040015184606001516040516020016124b194939291906001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6040516020818303038152906040528051906020012090506124e681836000015184608001518560a001518660c00151612aaf565b6125585760405162461bcd60e51b815260206004820152603d60248201527f466572616c66696c6545786869626974696f6e56333a20746865207472616e7360448201527f6665722072657175657374206973206e6f7420617574686f72697a656400000060648201526084016107d4565b610ad58260000151836020015184604001516040518060200160405280600081525061264d565b816001600160a01b0316836001600160a01b0316036125e05760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107d4565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612658848484611ece565b61266484848484612b07565b6109e25760405162461bcd60e51b81526004016107d490613e28565b600081815260146020908152604091829020825180840190935280548084526001909101549183019190915261272f5760405162461bcd60e51b815260206004820152604860248201527f466572616c66696c6545786869626974696f6e56333a20617274776f726b494460448201527f206973206e6f20666f756e6420666f722074686520617274776f726b456469746064820152670d2dedc92dcc8caf60c31b608482015260a4016107d4565b8051600090815260126020526040902080546127c45760405162461bcd60e51b815260206004820152604860248201527f466572616c66696c6545786869626974696f6e56333a206e6f2065646974696f60448201527f6e7320696e207468697320617274776f726b206f6620616c6c417274776f726b60648201526745646974696f6e7360c01b608482015260a4016107d4565b805460009082906127d790600190613dd0565b815481106127e7576127e7613c39565b90600052602060002001549050808284602001518154811061280b5761280b613c39565b90600052602060002001819055508180548061282957612829613e7a565b60008281526020808220830160001990810183905590920190925593840151918152601490935260408084206001908101929092559383529282208281559092015550565b600061287982611134565b905061288981600084600161297b565b61289282611134565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60006001600160e01b031982166380ac58cd60e01b148061294257506001600160e01b03198216635b5e139f60e01b145b8061067857506301ffc9a760e01b6001600160e01b0319831614610678565b610ad5828260405180602001604052806000815250612c08565b60018111156129ea5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b60648201526084016107d4565b816001600160a01b038516612a4657612a4181600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612a69565b836001600160a01b0316856001600160a01b031614612a6957612a698582612c3b565b6001600160a01b038416612a8557612a8081612cd8565b612aa8565b846001600160a01b0316846001600160a01b031614612aa857612aa88482612d87565b5050505050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c869052603c81208190612aec90848787612dcb565b6001600160a01b039081169087161491505095945050505050565b60006001600160a01b0384163b15612bfd57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612b4b903390899088908890600401613e90565b6020604051808303816000875af1925050508015612b86575060408051601f3d908101601f19168201909252612b8391810190613ecd565b60015b612be3573d808015612bb4576040519150601f19603f3d011682016040523d82523d6000602084013e612bb9565b606091505b508051600003612bdb5760405162461bcd60e51b81526004016107d490613e28565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611ec6565b506001949350505050565b612c128383612df3565b612c1f6000848484612b07565b6108755760405162461bcd60e51b81526004016107d490613e28565b60006001612c48846111e1565b612c529190613dd0565b600083815260076020526040902054909150808214612ca5576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090612cea90600190613dd0565b60008381526009602052604081205460088054939450909284908110612d1257612d12613c39565b906000526020600020015490508060088381548110612d3357612d33613c39565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612d6b57612d6b613e7a565b6001900381819060005260206000200160009055905550505050565b6000612d92836111e1565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6000806000612ddc87878787612f6e565b91509150612de981613032565b5095945050505050565b6001600160a01b038216612e495760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107d4565b612e5281611a26565b15612e9f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107d4565b612ead60008383600161297b565b612eb681611a26565b15612f035760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107d4565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612fa55750600090506003613029565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612ff9573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661302257600060019250925050613029565b9150600090505b94509492505050565b600081600481111561304657613046613eea565b0361304e5750565b600181600481111561306257613062613eea565b036130af5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016107d4565b60028160048111156130c3576130c3613eea565b036131105760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016107d4565b600381600481111561312457613124613eea565b036116045760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016107d4565b50805461318890613a57565b6000825580601f10613198575050565b601f01602090049060005260206000209081019061160491905b808211156131c657600081556001016131b2565b5090565b6001600160e01b03198116811461160457600080fd5b6000602082840312156131f257600080fd5b81356131fd816131ca565b9392505050565b80356001600160a01b038116811461321b57600080fd5b919050565b60006020828403121561323257600080fd5b6131fd82613204565b60005b8381101561325657818101518382015260200161323e565b50506000910152565b6000815180845261327781602086016020860161323b565b601f01601f19169290920160200192915050565b6020815260006131fd602083018461325f565b6000602082840312156132b057600080fd5b5035919050565b600080604083850312156132ca57600080fd5b6132d383613204565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715613319576133196132e1565b60405290565b60405160c081016001600160401b0381118282101715613319576133196132e1565b60405160e081016001600160401b0381118282101715613319576133196132e1565b604051601f8201601f191681016001600160401b038111828210171561338b5761338b6132e1565b604052919050565b60006001600160401b038311156133ac576133ac6132e1565b6133bf601f8401601f1916602001613363565b90508281528383830111156133d357600080fd5b828260208301376000602084830101529392505050565b600082601f8301126133fb57600080fd5b6131fd83833560208501613393565b6000806040838503121561341d57600080fd5b8235915060208301356001600160401b0381111561343a57600080fd5b613446858286016133ea565b9150509250929050565b60006001600160401b03821115613469576134696132e1565b5060051b60200190565b6000602080838503121561348657600080fd5b82356001600160401b038082111561349d57600080fd5b818501915085601f8301126134b157600080fd5b81356134c46134bf82613450565b613363565b81815260059190911b830184019084810190888311156134e357600080fd5b8585015b83811015613587578035858111156134ff5760008081fd5b860160a0818c03601f19018113156135175760008081fd5b61351f6132f7565b8983013581526040808401358b830152606061353c818601613204565b828401526080915061354f828601613204565b908301529183013591888311156135665760008081fd5b6135748e8c858701016133ea565b90820152855250509186019186016134e7565b5098975050505050505050565b6000806000606084860312156135a957600080fd5b6135b284613204565b92506135c060208501613204565b9150604084013590509250925092565b600080604083850312156135e357600080fd5b50508035926020909101359150565b6000602080838503121561360557600080fd5b82356001600160401b038082111561361c57600080fd5b818501915085601f83011261363057600080fd5b813561363e6134bf82613450565b81815260059190911b8301840190848101908883111561365d57600080fd5b8585015b838110156135875780358581111561367857600080fd5b860160c0818c03601f1901121561368f5760008081fd5b61369761331f565b88820135878111156136a95760008081fd5b6136b78d8b838601016133ea565b825250604080830135888111156136ce5760008081fd5b6136dc8e8c838701016133ea565b8b84015250606080840135898111156136f55760008081fd5b6137038f8d838801016133ea565b83850152506080915081840135818401525060a0808401358284015260c0840135818401525050808552505086830192508681019050613661565b60c08152600061375160c083018961325f565b8281036020840152613763818961325f565b90508281036040840152613777818861325f565b60608401969096525050608081019290925260a0909101529392505050565b828152604060208201526000611ec6604083018461325f565b6000602082840312156137c157600080fd5b81356001600160401b038111156137d757600080fd5b611ec6848285016133ea565b600060208083850312156137f657600080fd5b82356001600160401b0381111561380c57600080fd5b8301601f8101851361381d57600080fd5b803561382b6134bf82613450565b81815260e0918202830184019184820191908884111561384a57600080fd5b938501935b838510156138da5780858a0312156138675760008081fd5b61386f613341565b61387886613204565b8152613885878701613204565b8188015260408681013590820152606080870135908201526080808701359082015260a0808701359082015260c08087013560ff811681146138c75760008081fd5b908201528352938401939185019161384f565b50979650505050505050565b600080604083850312156138f957600080fd5b61390283613204565b91506020830135801515811461391757600080fd5b809150509250929050565b6000806000806080858703121561393857600080fd5b61394185613204565b935061394f60208601613204565b92506040850135915060608501356001600160401b0381111561397157600080fd5b8501601f8101871361398257600080fd5b61399187823560208401613393565b91505092959194509250565b600080604083850312156139b057600080fd5b6139b983613204565b9150610bc160208401613204565b600060208083850312156139da57600080fd5b82356001600160401b038111156139f057600080fd5b8301601f81018513613a0157600080fd5b8035613a0f6134bf82613450565b81815260059190911b82018301908381019087831115613a2e57600080fd5b928401925b82841015613a4c57833582529284019290840190613a33565b979650505050505050565b600181811c90821680613a6b57607f821691505b602082108103613a8b57634e487b7160e01b600052602260045260246000fd5b50919050565b60008251613aa381846020870161323b565b9190910192915050565b60008154613aba81613a57565b60018281168015613ad25760018114613ae757613b16565b60ff1984168752821515830287019450613b16565b8560005260208060002060005b85811015613b0d5781548a820152908401908201613af4565b50505082870194505b5050505092915050565b60006131fd8284613aad565b601f82111561087557600081815260208120601f850160051c81016020861015613b535750805b601f850160051c820191505b81811015613b7257828155600101613b5f565b505050505050565b81516001600160401b03811115613b9357613b936132e1565b613ba781613ba18454613a57565b84613b2c565b602080601f831160018114613bdc5760008415613bc45750858301515b600019600386901b1c1916600185901b178555613b72565b600085815260208120601f198616915b82811015613c0b57888601518255948401946001909101908401613bec565b5085821015613c295787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201613c7757613c77613c4f565b5060010190565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b808202811582820484141761067857610678613c4f565b600082613cff57634e487b7160e01b600052601260045260246000fd5b500490565b60008351613d1681846020880161323b565b613d2281840185613aad565b95945050505050565b60208082526024908201527f4552433732313a20617274776f726b2065646974696f6e206973206e6f7420666040820152631bdd5b9960e21b606082015260800190565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b8082018082111561067857610678613c4f565b8181038181111561067857610678613c4f565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052603160045260246000fd5b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613ec39083018461325f565b9695505050505050565b600060208284031215613edf57600080fd5b81516131fd816131ca565b634e487b7160e01b600052602160045260246000fdfea26469706673582212203e23a50c11a5c366b6e7645be004960f484abb350d5e6d2ee2802c26fdadfd1064736f6c63430008110033",
}

// FeralfileExhibitionV3ABI is the input ABI used to generate the binding from.
// Deprecated: Use FeralfileExhibitionV3MetaData.ABI instead.
var FeralfileExhibitionV3ABI = FeralfileExhibitionV3MetaData.ABI

// FeralfileExhibitionV3Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FeralfileExhibitionV3MetaData.Bin instead.
var FeralfileExhibitionV3Bin = FeralfileExhibitionV3MetaData.Bin

// DeployFeralfileExhibitionV3 deploys a new Ethereum contract, binding an instance of FeralfileExhibitionV3 to it.
func DeployFeralfileExhibitionV3(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string, secondarySaleRoyaltyBPS_ *big.Int, royaltyPayoutAddress_ common.Address, contractURI_ string, tokenBaseURI_ string, isBurnable_ bool, isBridgeable_ bool) (common.Address, *types.Transaction, *FeralfileExhibitionV3, error) {
	parsed, err := FeralfileExhibitionV3MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FeralfileExhibitionV3Bin), backend, name_, symbol_, secondarySaleRoyaltyBPS_, royaltyPayoutAddress_, contractURI_, tokenBaseURI_, isBurnable_, isBridgeable_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FeralfileExhibitionV3{FeralfileExhibitionV3Caller: FeralfileExhibitionV3Caller{contract: contract}, FeralfileExhibitionV3Transactor: FeralfileExhibitionV3Transactor{contract: contract}, FeralfileExhibitionV3Filterer: FeralfileExhibitionV3Filterer{contract: contract}}, nil
}

// FeralfileExhibitionV3 is an auto generated Go binding around an Ethereum contract.
type FeralfileExhibitionV3 struct {
	FeralfileExhibitionV3Caller     // Read-only binding to the contract
	FeralfileExhibitionV3Transactor // Write-only binding to the contract
	FeralfileExhibitionV3Filterer   // Log filterer for contract events
}

// FeralfileExhibitionV3Caller is an auto generated read-only Go binding around an Ethereum contract.
type FeralfileExhibitionV3Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeralfileExhibitionV3Transactor is an auto generated write-only Go binding around an Ethereum contract.
type FeralfileExhibitionV3Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeralfileExhibitionV3Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FeralfileExhibitionV3Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeralfileExhibitionV3Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FeralfileExhibitionV3Session struct {
	Contract     *FeralfileExhibitionV3 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// FeralfileExhibitionV3CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FeralfileExhibitionV3CallerSession struct {
	Contract *FeralfileExhibitionV3Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// FeralfileExhibitionV3TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FeralfileExhibitionV3TransactorSession struct {
	Contract     *FeralfileExhibitionV3Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// FeralfileExhibitionV3Raw is an auto generated low-level Go binding around an Ethereum contract.
type FeralfileExhibitionV3Raw struct {
	Contract *FeralfileExhibitionV3 // Generic contract binding to access the raw methods on
}

// FeralfileExhibitionV3CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FeralfileExhibitionV3CallerRaw struct {
	Contract *FeralfileExhibitionV3Caller // Generic read-only contract binding to access the raw methods on
}

// FeralfileExhibitionV3TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FeralfileExhibitionV3TransactorRaw struct {
	Contract *FeralfileExhibitionV3Transactor // Generic write-only contract binding to access the raw methods on
}

// NewFeralfileExhibitionV3 creates a new instance of FeralfileExhibitionV3, bound to a specific deployed contract.
func NewFeralfileExhibitionV3(address common.Address, backend bind.ContractBackend) (*FeralfileExhibitionV3, error) {
	contract, err := bindFeralfileExhibitionV3(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV3{FeralfileExhibitionV3Caller: FeralfileExhibitionV3Caller{contract: contract}, FeralfileExhibitionV3Transactor: FeralfileExhibitionV3Transactor{contract: contract}, FeralfileExhibitionV3Filterer: FeralfileExhibitionV3Filterer{contract: contract}}, nil
}

// NewFeralfileExhibitionV3Caller creates a new read-only instance of FeralfileExhibitionV3, bound to a specific deployed contract.
func NewFeralfileExhibitionV3Caller(address common.Address, caller bind.ContractCaller) (*FeralfileExhibitionV3Caller, error) {
	contract, err := bindFeralfileExhibitionV3(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV3Caller{contract: contract}, nil
}

// NewFeralfileExhibitionV3Transactor creates a new write-only instance of FeralfileExhibitionV3, bound to a specific deployed contract.
func NewFeralfileExhibitionV3Transactor(address common.Address, transactor bind.ContractTransactor) (*FeralfileExhibitionV3Transactor, error) {
	contract, err := bindFeralfileExhibitionV3(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV3Transactor{contract: contract}, nil
}

// NewFeralfileExhibitionV3Filterer creates a new log filterer instance of FeralfileExhibitionV3, bound to a specific deployed contract.
func NewFeralfileExhibitionV3Filterer(address common.Address, filterer bind.ContractFilterer) (*FeralfileExhibitionV3Filterer, error) {
	contract, err := bindFeralfileExhibitionV3(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV3Filterer{contract: contract}, nil
}

// bindFeralfileExhibitionV3 binds a generic wrapper to an already deployed contract.
func bindFeralfileExhibitionV3(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := FeralfileExhibitionV3MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeralfileExhibitionV3.Contract.FeralfileExhibitionV3Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.FeralfileExhibitionV3Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.FeralfileExhibitionV3Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeralfileExhibitionV3.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.contract.Transact(opts, method, params...)
}

// MAXROYALITYBPS is a free data retrieval call binding the contract method 0xec9cbb44.
//
// Solidity: function MAX_ROYALITY_BPS() view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) MAXROYALITYBPS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "MAX_ROYALITY_BPS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXROYALITYBPS is a free data retrieval call binding the contract method 0xec9cbb44.
//
// Solidity: function MAX_ROYALITY_BPS() view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) MAXROYALITYBPS() (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.MAXROYALITYBPS(&_FeralfileExhibitionV3.CallOpts)
}

// MAXROYALITYBPS is a free data retrieval call binding the contract method 0xec9cbb44.
//
// Solidity: function MAX_ROYALITY_BPS() view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) MAXROYALITYBPS() (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.MAXROYALITYBPS(&_FeralfileExhibitionV3.CallOpts)
}

// ArtworkEditions is a free data retrieval call binding the contract method 0x62fe2131.
//
// Solidity: function artworkEditions(uint256 ) view returns(uint256 editionID, string ipfsCID)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) ArtworkEditions(opts *bind.CallOpts, arg0 *big.Int) (struct {
	EditionID *big.Int
	IpfsCID   string
}, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "artworkEditions", arg0)

	outstruct := new(struct {
		EditionID *big.Int
		IpfsCID   string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.EditionID = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.IpfsCID = *abi.ConvertType(out[1], new(string)).(*string)

	return *outstruct, err

}

// ArtworkEditions is a free data retrieval call binding the contract method 0x62fe2131.
//
// Solidity: function artworkEditions(uint256 ) view returns(uint256 editionID, string ipfsCID)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) ArtworkEditions(arg0 *big.Int) (struct {
	EditionID *big.Int
	IpfsCID   string
}, error) {
	return _FeralfileExhibitionV3.Contract.ArtworkEditions(&_FeralfileExhibitionV3.CallOpts, arg0)
}

// ArtworkEditions is a free data retrieval call binding the contract method 0x62fe2131.
//
// Solidity: function artworkEditions(uint256 ) view returns(uint256 editionID, string ipfsCID)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) ArtworkEditions(arg0 *big.Int) (struct {
	EditionID *big.Int
	IpfsCID   string
}, error) {
	return _FeralfileExhibitionV3.Contract.ArtworkEditions(&_FeralfileExhibitionV3.CallOpts, arg0)
}

// Artworks is a free data retrieval call binding the contract method 0x4b602673.
//
// Solidity: function artworks(uint256 ) view returns(string title, string artistName, string fingerprint, uint256 editionSize, uint256 AEAmount, uint256 PPAmount)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) Artworks(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Title       string
	ArtistName  string
	Fingerprint string
	EditionSize *big.Int
	AEAmount    *big.Int
	PPAmount    *big.Int
}, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "artworks", arg0)

	outstruct := new(struct {
		Title       string
		ArtistName  string
		Fingerprint string
		EditionSize *big.Int
		AEAmount    *big.Int
		PPAmount    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Title = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.ArtistName = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Fingerprint = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.EditionSize = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.AEAmount = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.PPAmount = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Artworks is a free data retrieval call binding the contract method 0x4b602673.
//
// Solidity: function artworks(uint256 ) view returns(string title, string artistName, string fingerprint, uint256 editionSize, uint256 AEAmount, uint256 PPAmount)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) Artworks(arg0 *big.Int) (struct {
	Title       string
	ArtistName  string
	Fingerprint string
	EditionSize *big.Int
	AEAmount    *big.Int
	PPAmount    *big.Int
}, error) {
	return _FeralfileExhibitionV3.Contract.Artworks(&_FeralfileExhibitionV3.CallOpts, arg0)
}

// Artworks is a free data retrieval call binding the contract method 0x4b602673.
//
// Solidity: function artworks(uint256 ) view returns(string title, string artistName, string fingerprint, uint256 editionSize, uint256 AEAmount, uint256 PPAmount)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) Artworks(arg0 *big.Int) (struct {
	Title       string
	ArtistName  string
	Fingerprint string
	EditionSize *big.Int
	AEAmount    *big.Int
	PPAmount    *big.Int
}, error) {
	return _FeralfileExhibitionV3.Contract.Artworks(&_FeralfileExhibitionV3.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) BalanceOf(owner common.Address) (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.BalanceOf(&_FeralfileExhibitionV3.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.BalanceOf(&_FeralfileExhibitionV3.CallOpts, owner)
}

// CodeVersion is a free data retrieval call binding the contract method 0x63e60230.
//
// Solidity: function codeVersion() view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) CodeVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "codeVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CodeVersion is a free data retrieval call binding the contract method 0x63e60230.
//
// Solidity: function codeVersion() view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) CodeVersion() (string, error) {
	return _FeralfileExhibitionV3.Contract.CodeVersion(&_FeralfileExhibitionV3.CallOpts)
}

// CodeVersion is a free data retrieval call binding the contract method 0x63e60230.
//
// Solidity: function codeVersion() view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) CodeVersion() (string, error) {
	return _FeralfileExhibitionV3.Contract.CodeVersion(&_FeralfileExhibitionV3.CallOpts)
}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) ContractURI(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "contractURI")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) ContractURI() (string, error) {
	return _FeralfileExhibitionV3.Contract.ContractURI(&_FeralfileExhibitionV3.CallOpts)
}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) ContractURI() (string, error) {
	return _FeralfileExhibitionV3.Contract.ContractURI(&_FeralfileExhibitionV3.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibitionV3.Contract.GetApproved(&_FeralfileExhibitionV3.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibitionV3.Contract.GetApproved(&_FeralfileExhibitionV3.CallOpts, tokenId)
}

// GetArtworkByIndex is a free data retrieval call binding the contract method 0xb4883703.
//
// Solidity: function getArtworkByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) GetArtworkByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "getArtworkByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetArtworkByIndex is a free data retrieval call binding the contract method 0xb4883703.
//
// Solidity: function getArtworkByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) GetArtworkByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.GetArtworkByIndex(&_FeralfileExhibitionV3.CallOpts, index)
}

// GetArtworkByIndex is a free data retrieval call binding the contract method 0xb4883703.
//
// Solidity: function getArtworkByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) GetArtworkByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.GetArtworkByIndex(&_FeralfileExhibitionV3.CallOpts, index)
}

// GetArtworkEditionByIndex is a free data retrieval call binding the contract method 0x641b18e9.
//
// Solidity: function getArtworkEditionByIndex(uint256 artworkID, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) GetArtworkEditionByIndex(opts *bind.CallOpts, artworkID *big.Int, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "getArtworkEditionByIndex", artworkID, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetArtworkEditionByIndex is a free data retrieval call binding the contract method 0x641b18e9.
//
// Solidity: function getArtworkEditionByIndex(uint256 artworkID, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) GetArtworkEditionByIndex(artworkID *big.Int, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.GetArtworkEditionByIndex(&_FeralfileExhibitionV3.CallOpts, artworkID, index)
}

// GetArtworkEditionByIndex is a free data retrieval call binding the contract method 0x641b18e9.
//
// Solidity: function getArtworkEditionByIndex(uint256 artworkID, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) GetArtworkEditionByIndex(artworkID *big.Int, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.GetArtworkEditionByIndex(&_FeralfileExhibitionV3.CallOpts, artworkID, index)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _FeralfileExhibitionV3.Contract.IsApprovedForAll(&_FeralfileExhibitionV3.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _FeralfileExhibitionV3.Contract.IsApprovedForAll(&_FeralfileExhibitionV3.CallOpts, owner, operator)
}

// IsBridgeable is a free data retrieval call binding the contract method 0x7ca5ea89.
//
// Solidity: function isBridgeable() view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) IsBridgeable(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "isBridgeable")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBridgeable is a free data retrieval call binding the contract method 0x7ca5ea89.
//
// Solidity: function isBridgeable() view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) IsBridgeable() (bool, error) {
	return _FeralfileExhibitionV3.Contract.IsBridgeable(&_FeralfileExhibitionV3.CallOpts)
}

// IsBridgeable is a free data retrieval call binding the contract method 0x7ca5ea89.
//
// Solidity: function isBridgeable() view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) IsBridgeable() (bool, error) {
	return _FeralfileExhibitionV3.Contract.IsBridgeable(&_FeralfileExhibitionV3.CallOpts)
}

// IsBurnable is a free data retrieval call binding the contract method 0x883356d9.
//
// Solidity: function isBurnable() view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) IsBurnable(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "isBurnable")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBurnable is a free data retrieval call binding the contract method 0x883356d9.
//
// Solidity: function isBurnable() view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) IsBurnable() (bool, error) {
	return _FeralfileExhibitionV3.Contract.IsBurnable(&_FeralfileExhibitionV3.CallOpts)
}

// IsBurnable is a free data retrieval call binding the contract method 0x883356d9.
//
// Solidity: function isBurnable() view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) IsBurnable() (bool, error) {
	return _FeralfileExhibitionV3.Contract.IsBurnable(&_FeralfileExhibitionV3.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) Name() (string, error) {
	return _FeralfileExhibitionV3.Contract.Name(&_FeralfileExhibitionV3.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) Name() (string, error) {
	return _FeralfileExhibitionV3.Contract.Name(&_FeralfileExhibitionV3.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) Owner() (common.Address, error) {
	return _FeralfileExhibitionV3.Contract.Owner(&_FeralfileExhibitionV3.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) Owner() (common.Address, error) {
	return _FeralfileExhibitionV3.Contract.Owner(&_FeralfileExhibitionV3.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibitionV3.Contract.OwnerOf(&_FeralfileExhibitionV3.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibitionV3.Contract.OwnerOf(&_FeralfileExhibitionV3.CallOpts, tokenId)
}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 tokenId, uint256 salePrice) view returns(address receiver, uint256 royaltyAmount)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) RoyaltyInfo(opts *bind.CallOpts, tokenId *big.Int, salePrice *big.Int) (struct {
	Receiver      common.Address
	RoyaltyAmount *big.Int
}, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "royaltyInfo", tokenId, salePrice)

	outstruct := new(struct {
		Receiver      common.Address
		RoyaltyAmount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Receiver = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.RoyaltyAmount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 tokenId, uint256 salePrice) view returns(address receiver, uint256 royaltyAmount)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) RoyaltyInfo(tokenId *big.Int, salePrice *big.Int) (struct {
	Receiver      common.Address
	RoyaltyAmount *big.Int
}, error) {
	return _FeralfileExhibitionV3.Contract.RoyaltyInfo(&_FeralfileExhibitionV3.CallOpts, tokenId, salePrice)
}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 tokenId, uint256 salePrice) view returns(address receiver, uint256 royaltyAmount)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) RoyaltyInfo(tokenId *big.Int, salePrice *big.Int) (struct {
	Receiver      common.Address
	RoyaltyAmount *big.Int
}, error) {
	return _FeralfileExhibitionV3.Contract.RoyaltyInfo(&_FeralfileExhibitionV3.CallOpts, tokenId, salePrice)
}

// RoyaltyPayoutAddress is a free data retrieval call binding the contract method 0x3f6805ba.
//
// Solidity: function royaltyPayoutAddress() view returns(address)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) RoyaltyPayoutAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "royaltyPayoutAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RoyaltyPayoutAddress is a free data retrieval call binding the contract method 0x3f6805ba.
//
// Solidity: function royaltyPayoutAddress() view returns(address)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) RoyaltyPayoutAddress() (common.Address, error) {
	return _FeralfileExhibitionV3.Contract.RoyaltyPayoutAddress(&_FeralfileExhibitionV3.CallOpts)
}

// RoyaltyPayoutAddress is a free data retrieval call binding the contract method 0x3f6805ba.
//
// Solidity: function royaltyPayoutAddress() view returns(address)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) RoyaltyPayoutAddress() (common.Address, error) {
	return _FeralfileExhibitionV3.Contract.RoyaltyPayoutAddress(&_FeralfileExhibitionV3.CallOpts)
}

// SecondarySaleRoyaltyBPS is a free data retrieval call binding the contract method 0xea211d7c.
//
// Solidity: function secondarySaleRoyaltyBPS() view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) SecondarySaleRoyaltyBPS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "secondarySaleRoyaltyBPS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SecondarySaleRoyaltyBPS is a free data retrieval call binding the contract method 0xea211d7c.
//
// Solidity: function secondarySaleRoyaltyBPS() view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) SecondarySaleRoyaltyBPS() (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.SecondarySaleRoyaltyBPS(&_FeralfileExhibitionV3.CallOpts)
}

// SecondarySaleRoyaltyBPS is a free data retrieval call binding the contract method 0xea211d7c.
//
// Solidity: function secondarySaleRoyaltyBPS() view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) SecondarySaleRoyaltyBPS() (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.SecondarySaleRoyaltyBPS(&_FeralfileExhibitionV3.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _FeralfileExhibitionV3.Contract.SupportsInterface(&_FeralfileExhibitionV3.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _FeralfileExhibitionV3.Contract.SupportsInterface(&_FeralfileExhibitionV3.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) Symbol() (string, error) {
	return _FeralfileExhibitionV3.Contract.Symbol(&_FeralfileExhibitionV3.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) Symbol() (string, error) {
	return _FeralfileExhibitionV3.Contract.Symbol(&_FeralfileExhibitionV3.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.TokenByIndex(&_FeralfileExhibitionV3.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.TokenByIndex(&_FeralfileExhibitionV3.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.TokenOfOwnerByIndex(&_FeralfileExhibitionV3.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.TokenOfOwnerByIndex(&_FeralfileExhibitionV3.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) TokenURI(tokenId *big.Int) (string, error) {
	return _FeralfileExhibitionV3.Contract.TokenURI(&_FeralfileExhibitionV3.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _FeralfileExhibitionV3.Contract.TokenURI(&_FeralfileExhibitionV3.CallOpts, tokenId)
}

// TotalArtworks is a free data retrieval call binding the contract method 0xe4a233e1.
//
// Solidity: function totalArtworks() view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) TotalArtworks(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "totalArtworks")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalArtworks is a free data retrieval call binding the contract method 0xe4a233e1.
//
// Solidity: function totalArtworks() view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) TotalArtworks() (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.TotalArtworks(&_FeralfileExhibitionV3.CallOpts)
}

// TotalArtworks is a free data retrieval call binding the contract method 0xe4a233e1.
//
// Solidity: function totalArtworks() view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) TotalArtworks() (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.TotalArtworks(&_FeralfileExhibitionV3.CallOpts)
}

// TotalEditionOfArtwork is a free data retrieval call binding the contract method 0xfe2a3bf3.
//
// Solidity: function totalEditionOfArtwork(uint256 artworkID) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) TotalEditionOfArtwork(opts *bind.CallOpts, artworkID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "totalEditionOfArtwork", artworkID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalEditionOfArtwork is a free data retrieval call binding the contract method 0xfe2a3bf3.
//
// Solidity: function totalEditionOfArtwork(uint256 artworkID) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) TotalEditionOfArtwork(artworkID *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.TotalEditionOfArtwork(&_FeralfileExhibitionV3.CallOpts, artworkID)
}

// TotalEditionOfArtwork is a free data retrieval call binding the contract method 0xfe2a3bf3.
//
// Solidity: function totalEditionOfArtwork(uint256 artworkID) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) TotalEditionOfArtwork(artworkID *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.TotalEditionOfArtwork(&_FeralfileExhibitionV3.CallOpts, artworkID)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) TotalSupply() (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.TotalSupply(&_FeralfileExhibitionV3.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) TotalSupply() (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.TotalSupply(&_FeralfileExhibitionV3.CallOpts)
}

// Trustees is a free data retrieval call binding the contract method 0xeee608a4.
//
// Solidity: function trustees(address ) view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) Trustees(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "trustees", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Trustees is a free data retrieval call binding the contract method 0xeee608a4.
//
// Solidity: function trustees(address ) view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) Trustees(arg0 common.Address) (bool, error) {
	return _FeralfileExhibitionV3.Contract.Trustees(&_FeralfileExhibitionV3.CallOpts, arg0)
}

// Trustees is a free data retrieval call binding the contract method 0xeee608a4.
//
// Solidity: function trustees(address ) view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) Trustees(arg0 common.Address) (bool, error) {
	return _FeralfileExhibitionV3.Contract.Trustees(&_FeralfileExhibitionV3.CallOpts, arg0)
}

// AddTrustee is a paid mutator transaction binding the contract method 0xdc78ac1c.
//
// Solidity: function addTrustee(address _trustee) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) AddTrustee(opts *bind.TransactOpts, _trustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "addTrustee", _trustee)
}

// AddTrustee is a paid mutator transaction binding the contract method 0xdc78ac1c.
//
// Solidity: function addTrustee(address _trustee) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) AddTrustee(_trustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.AddTrustee(&_FeralfileExhibitionV3.TransactOpts, _trustee)
}

// AddTrustee is a paid mutator transaction binding the contract method 0xdc78ac1c.
//
// Solidity: function addTrustee(address _trustee) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) AddTrustee(_trustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.AddTrustee(&_FeralfileExhibitionV3.TransactOpts, _trustee)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.Approve(&_FeralfileExhibitionV3.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.Approve(&_FeralfileExhibitionV3.TransactOpts, to, tokenId)
}

// AuthorizedTransfer is a paid mutator transaction binding the contract method 0x9fbf39cd.
//
// Solidity: function authorizedTransfer((address,address,uint256,uint256,bytes32,bytes32,uint8)[] transferParams_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) AuthorizedTransfer(opts *bind.TransactOpts, transferParams_ []FeralfileExhibitionV3TransferArtworkParam) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "authorizedTransfer", transferParams_)
}

// AuthorizedTransfer is a paid mutator transaction binding the contract method 0x9fbf39cd.
//
// Solidity: function authorizedTransfer((address,address,uint256,uint256,bytes32,bytes32,uint8)[] transferParams_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) AuthorizedTransfer(transferParams_ []FeralfileExhibitionV3TransferArtworkParam) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.AuthorizedTransfer(&_FeralfileExhibitionV3.TransactOpts, transferParams_)
}

// AuthorizedTransfer is a paid mutator transaction binding the contract method 0x9fbf39cd.
//
// Solidity: function authorizedTransfer((address,address,uint256,uint256,bytes32,bytes32,uint8)[] transferParams_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) AuthorizedTransfer(transferParams_ []FeralfileExhibitionV3TransferArtworkParam) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.AuthorizedTransfer(&_FeralfileExhibitionV3.TransactOpts, transferParams_)
}

// BatchMint is a paid mutator transaction binding the contract method 0x12d907b9.
//
// Solidity: function batchMint((uint256,uint256,address,address,string)[] mintParams_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) BatchMint(opts *bind.TransactOpts, mintParams_ []FeralfileExhibitionV3MintArtworkParam) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "batchMint", mintParams_)
}

// BatchMint is a paid mutator transaction binding the contract method 0x12d907b9.
//
// Solidity: function batchMint((uint256,uint256,address,address,string)[] mintParams_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) BatchMint(mintParams_ []FeralfileExhibitionV3MintArtworkParam) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.BatchMint(&_FeralfileExhibitionV3.TransactOpts, mintParams_)
}

// BatchMint is a paid mutator transaction binding the contract method 0x12d907b9.
//
// Solidity: function batchMint((uint256,uint256,address,address,string)[] mintParams_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) BatchMint(mintParams_ []FeralfileExhibitionV3MintArtworkParam) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.BatchMint(&_FeralfileExhibitionV3.TransactOpts, mintParams_)
}

// BurnEditions is a paid mutator transaction binding the contract method 0xfc05ea68.
//
// Solidity: function burnEditions(uint256[] editionIDs_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) BurnEditions(opts *bind.TransactOpts, editionIDs_ []*big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "burnEditions", editionIDs_)
}

// BurnEditions is a paid mutator transaction binding the contract method 0xfc05ea68.
//
// Solidity: function burnEditions(uint256[] editionIDs_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) BurnEditions(editionIDs_ []*big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.BurnEditions(&_FeralfileExhibitionV3.TransactOpts, editionIDs_)
}

// BurnEditions is a paid mutator transaction binding the contract method 0xfc05ea68.
//
// Solidity: function burnEditions(uint256[] editionIDs_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) BurnEditions(editionIDs_ []*big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.BurnEditions(&_FeralfileExhibitionV3.TransactOpts, editionIDs_)
}

// CreateArtworks is a paid mutator transaction binding the contract method 0x43deaf76.
//
// Solidity: function createArtworks((string,string,string,uint256,uint256,uint256)[] artworks_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) CreateArtworks(opts *bind.TransactOpts, artworks_ []FeralfileExhibitionV3Artwork) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "createArtworks", artworks_)
}

// CreateArtworks is a paid mutator transaction binding the contract method 0x43deaf76.
//
// Solidity: function createArtworks((string,string,string,uint256,uint256,uint256)[] artworks_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) CreateArtworks(artworks_ []FeralfileExhibitionV3Artwork) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.CreateArtworks(&_FeralfileExhibitionV3.TransactOpts, artworks_)
}

// CreateArtworks is a paid mutator transaction binding the contract method 0x43deaf76.
//
// Solidity: function createArtworks((string,string,string,uint256,uint256,uint256)[] artworks_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) CreateArtworks(artworks_ []FeralfileExhibitionV3Artwork) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.CreateArtworks(&_FeralfileExhibitionV3.TransactOpts, artworks_)
}

// RemoveTrustee is a paid mutator transaction binding the contract method 0x03120506.
//
// Solidity: function removeTrustee(address _trustee) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) RemoveTrustee(opts *bind.TransactOpts, _trustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "removeTrustee", _trustee)
}

// RemoveTrustee is a paid mutator transaction binding the contract method 0x03120506.
//
// Solidity: function removeTrustee(address _trustee) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) RemoveTrustee(_trustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.RemoveTrustee(&_FeralfileExhibitionV3.TransactOpts, _trustee)
}

// RemoveTrustee is a paid mutator transaction binding the contract method 0x03120506.
//
// Solidity: function removeTrustee(address _trustee) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) RemoveTrustee(_trustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.RemoveTrustee(&_FeralfileExhibitionV3.TransactOpts, _trustee)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) RenounceOwnership() (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.RenounceOwnership(&_FeralfileExhibitionV3.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.RenounceOwnership(&_FeralfileExhibitionV3.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.SafeTransferFrom(&_FeralfileExhibitionV3.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.SafeTransferFrom(&_FeralfileExhibitionV3.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.SafeTransferFrom0(&_FeralfileExhibitionV3.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.SafeTransferFrom0(&_FeralfileExhibitionV3.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.SetApprovalForAll(&_FeralfileExhibitionV3.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.SetApprovalForAll(&_FeralfileExhibitionV3.TransactOpts, operator, approved)
}

// SetRoyaltyPayoutAddress is a paid mutator transaction binding the contract method 0x45aeefde.
//
// Solidity: function setRoyaltyPayoutAddress(address royaltyPayoutAddress_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) SetRoyaltyPayoutAddress(opts *bind.TransactOpts, royaltyPayoutAddress_ common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "setRoyaltyPayoutAddress", royaltyPayoutAddress_)
}

// SetRoyaltyPayoutAddress is a paid mutator transaction binding the contract method 0x45aeefde.
//
// Solidity: function setRoyaltyPayoutAddress(address royaltyPayoutAddress_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) SetRoyaltyPayoutAddress(royaltyPayoutAddress_ common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.SetRoyaltyPayoutAddress(&_FeralfileExhibitionV3.TransactOpts, royaltyPayoutAddress_)
}

// SetRoyaltyPayoutAddress is a paid mutator transaction binding the contract method 0x45aeefde.
//
// Solidity: function setRoyaltyPayoutAddress(address royaltyPayoutAddress_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) SetRoyaltyPayoutAddress(royaltyPayoutAddress_ common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.SetRoyaltyPayoutAddress(&_FeralfileExhibitionV3.TransactOpts, royaltyPayoutAddress_)
}

// SetTokenBaseURI is a paid mutator transaction binding the contract method 0x8ef79e91.
//
// Solidity: function setTokenBaseURI(string baseURI_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) SetTokenBaseURI(opts *bind.TransactOpts, baseURI_ string) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "setTokenBaseURI", baseURI_)
}

// SetTokenBaseURI is a paid mutator transaction binding the contract method 0x8ef79e91.
//
// Solidity: function setTokenBaseURI(string baseURI_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) SetTokenBaseURI(baseURI_ string) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.SetTokenBaseURI(&_FeralfileExhibitionV3.TransactOpts, baseURI_)
}

// SetTokenBaseURI is a paid mutator transaction binding the contract method 0x8ef79e91.
//
// Solidity: function setTokenBaseURI(string baseURI_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) SetTokenBaseURI(baseURI_ string) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.SetTokenBaseURI(&_FeralfileExhibitionV3.TransactOpts, baseURI_)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.TransferFrom(&_FeralfileExhibitionV3.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.TransferFrom(&_FeralfileExhibitionV3.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.TransferOwnership(&_FeralfileExhibitionV3.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.TransferOwnership(&_FeralfileExhibitionV3.TransactOpts, newOwner)
}

// UpdateArtworkEditionIPFSCid is a paid mutator transaction binding the contract method 0x0cfcb5f1.
//
// Solidity: function updateArtworkEditionIPFSCid(uint256 tokenId, string ipfsCID) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) UpdateArtworkEditionIPFSCid(opts *bind.TransactOpts, tokenId *big.Int, ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "updateArtworkEditionIPFSCid", tokenId, ipfsCID)
}

// UpdateArtworkEditionIPFSCid is a paid mutator transaction binding the contract method 0x0cfcb5f1.
//
// Solidity: function updateArtworkEditionIPFSCid(uint256 tokenId, string ipfsCID) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) UpdateArtworkEditionIPFSCid(tokenId *big.Int, ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.UpdateArtworkEditionIPFSCid(&_FeralfileExhibitionV3.TransactOpts, tokenId, ipfsCID)
}

// UpdateArtworkEditionIPFSCid is a paid mutator transaction binding the contract method 0x0cfcb5f1.
//
// Solidity: function updateArtworkEditionIPFSCid(uint256 tokenId, string ipfsCID) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) UpdateArtworkEditionIPFSCid(tokenId *big.Int, ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.UpdateArtworkEditionIPFSCid(&_FeralfileExhibitionV3.TransactOpts, tokenId, ipfsCID)
}

// FeralfileExhibitionV3ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3ApprovalIterator struct {
	Event *FeralfileExhibitionV3Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV3ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV3Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV3Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV3ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV3ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV3Approval represents a Approval event raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3Approval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*FeralfileExhibitionV3ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV3ApprovalIterator{contract: _FeralfileExhibitionV3.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV3Approval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV3Approval)
				if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) ParseApproval(log types.Log) (*FeralfileExhibitionV3Approval, error) {
	event := new(FeralfileExhibitionV3Approval)
	if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV3ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3ApprovalForAllIterator struct {
	Event *FeralfileExhibitionV3ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV3ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV3ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV3ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV3ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV3ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV3ApprovalForAll represents a ApprovalForAll event raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*FeralfileExhibitionV3ApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV3ApprovalForAllIterator{contract: _FeralfileExhibitionV3.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV3ApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV3ApprovalForAll)
				if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) ParseApprovalForAll(log types.Log) (*FeralfileExhibitionV3ApprovalForAll, error) {
	event := new(FeralfileExhibitionV3ApprovalForAll)
	if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV3BurnArtworkEditionIterator is returned from FilterBurnArtworkEdition and is used to iterate over the raw logs and unpacked data for BurnArtworkEdition events raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3BurnArtworkEditionIterator struct {
	Event *FeralfileExhibitionV3BurnArtworkEdition // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV3BurnArtworkEditionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV3BurnArtworkEdition)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV3BurnArtworkEdition)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV3BurnArtworkEditionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV3BurnArtworkEditionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV3BurnArtworkEdition represents a BurnArtworkEdition event raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3BurnArtworkEdition struct {
	EditionID *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterBurnArtworkEdition is a free log retrieval operation binding the contract event 0xa5a44c7ed36966786612323ee2cb0cb453d4a9282b90c6befe72cde41d83f488.
//
// Solidity: event BurnArtworkEdition(uint256 indexed editionID)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) FilterBurnArtworkEdition(opts *bind.FilterOpts, editionID []*big.Int) (*FeralfileExhibitionV3BurnArtworkEditionIterator, error) {

	var editionIDRule []interface{}
	for _, editionIDItem := range editionID {
		editionIDRule = append(editionIDRule, editionIDItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.FilterLogs(opts, "BurnArtworkEdition", editionIDRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV3BurnArtworkEditionIterator{contract: _FeralfileExhibitionV3.contract, event: "BurnArtworkEdition", logs: logs, sub: sub}, nil
}

// WatchBurnArtworkEdition is a free log subscription operation binding the contract event 0xa5a44c7ed36966786612323ee2cb0cb453d4a9282b90c6befe72cde41d83f488.
//
// Solidity: event BurnArtworkEdition(uint256 indexed editionID)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) WatchBurnArtworkEdition(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV3BurnArtworkEdition, editionID []*big.Int) (event.Subscription, error) {

	var editionIDRule []interface{}
	for _, editionIDItem := range editionID {
		editionIDRule = append(editionIDRule, editionIDItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.WatchLogs(opts, "BurnArtworkEdition", editionIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV3BurnArtworkEdition)
				if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "BurnArtworkEdition", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurnArtworkEdition is a log parse operation binding the contract event 0xa5a44c7ed36966786612323ee2cb0cb453d4a9282b90c6befe72cde41d83f488.
//
// Solidity: event BurnArtworkEdition(uint256 indexed editionID)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) ParseBurnArtworkEdition(log types.Log) (*FeralfileExhibitionV3BurnArtworkEdition, error) {
	event := new(FeralfileExhibitionV3BurnArtworkEdition)
	if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "BurnArtworkEdition", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV3NewArtworkIterator is returned from FilterNewArtwork and is used to iterate over the raw logs and unpacked data for NewArtwork events raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3NewArtworkIterator struct {
	Event *FeralfileExhibitionV3NewArtwork // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV3NewArtworkIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV3NewArtwork)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV3NewArtwork)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV3NewArtworkIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV3NewArtworkIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV3NewArtwork represents a NewArtwork event raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3NewArtwork struct {
	ArtworkID *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewArtwork is a free log retrieval operation binding the contract event 0x22350b25f1b72bb3621199a79abefeb4fcd77bb1e65638cd09350666e4db0891.
//
// Solidity: event NewArtwork(uint256 indexed artworkID)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) FilterNewArtwork(opts *bind.FilterOpts, artworkID []*big.Int) (*FeralfileExhibitionV3NewArtworkIterator, error) {

	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.FilterLogs(opts, "NewArtwork", artworkIDRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV3NewArtworkIterator{contract: _FeralfileExhibitionV3.contract, event: "NewArtwork", logs: logs, sub: sub}, nil
}

// WatchNewArtwork is a free log subscription operation binding the contract event 0x22350b25f1b72bb3621199a79abefeb4fcd77bb1e65638cd09350666e4db0891.
//
// Solidity: event NewArtwork(uint256 indexed artworkID)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) WatchNewArtwork(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV3NewArtwork, artworkID []*big.Int) (event.Subscription, error) {

	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.WatchLogs(opts, "NewArtwork", artworkIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV3NewArtwork)
				if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "NewArtwork", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewArtwork is a log parse operation binding the contract event 0x22350b25f1b72bb3621199a79abefeb4fcd77bb1e65638cd09350666e4db0891.
//
// Solidity: event NewArtwork(uint256 indexed artworkID)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) ParseNewArtwork(log types.Log) (*FeralfileExhibitionV3NewArtwork, error) {
	event := new(FeralfileExhibitionV3NewArtwork)
	if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "NewArtwork", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV3NewArtworkEditionIterator is returned from FilterNewArtworkEdition and is used to iterate over the raw logs and unpacked data for NewArtworkEdition events raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3NewArtworkEditionIterator struct {
	Event *FeralfileExhibitionV3NewArtworkEdition // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV3NewArtworkEditionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV3NewArtworkEdition)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV3NewArtworkEdition)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV3NewArtworkEditionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV3NewArtworkEditionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV3NewArtworkEdition represents a NewArtworkEdition event raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3NewArtworkEdition struct {
	Owner     common.Address
	ArtworkID *big.Int
	EditionID *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewArtworkEdition is a free log retrieval operation binding the contract event 0x4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd4.
//
// Solidity: event NewArtworkEdition(address indexed owner, uint256 indexed artworkID, uint256 indexed editionID)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) FilterNewArtworkEdition(opts *bind.FilterOpts, owner []common.Address, artworkID []*big.Int, editionID []*big.Int) (*FeralfileExhibitionV3NewArtworkEditionIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}
	var editionIDRule []interface{}
	for _, editionIDItem := range editionID {
		editionIDRule = append(editionIDRule, editionIDItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.FilterLogs(opts, "NewArtworkEdition", ownerRule, artworkIDRule, editionIDRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV3NewArtworkEditionIterator{contract: _FeralfileExhibitionV3.contract, event: "NewArtworkEdition", logs: logs, sub: sub}, nil
}

// WatchNewArtworkEdition is a free log subscription operation binding the contract event 0x4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd4.
//
// Solidity: event NewArtworkEdition(address indexed owner, uint256 indexed artworkID, uint256 indexed editionID)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) WatchNewArtworkEdition(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV3NewArtworkEdition, owner []common.Address, artworkID []*big.Int, editionID []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}
	var editionIDRule []interface{}
	for _, editionIDItem := range editionID {
		editionIDRule = append(editionIDRule, editionIDItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.WatchLogs(opts, "NewArtworkEdition", ownerRule, artworkIDRule, editionIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV3NewArtworkEdition)
				if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "NewArtworkEdition", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewArtworkEdition is a log parse operation binding the contract event 0x4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd4.
//
// Solidity: event NewArtworkEdition(address indexed owner, uint256 indexed artworkID, uint256 indexed editionID)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) ParseNewArtworkEdition(log types.Log) (*FeralfileExhibitionV3NewArtworkEdition, error) {
	event := new(FeralfileExhibitionV3NewArtworkEdition)
	if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "NewArtworkEdition", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV3OwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3OwnershipTransferredIterator struct {
	Event *FeralfileExhibitionV3OwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV3OwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV3OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV3OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV3OwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV3OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV3OwnershipTransferred represents a OwnershipTransferred event raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*FeralfileExhibitionV3OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV3OwnershipTransferredIterator{contract: _FeralfileExhibitionV3.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV3OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV3OwnershipTransferred)
				if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) ParseOwnershipTransferred(log types.Log) (*FeralfileExhibitionV3OwnershipTransferred, error) {
	event := new(FeralfileExhibitionV3OwnershipTransferred)
	if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV3TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3TransferIterator struct {
	Event *FeralfileExhibitionV3Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV3TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV3Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV3Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV3TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV3TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV3Transfer represents a Transfer event raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3Transfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*FeralfileExhibitionV3TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV3TransferIterator{contract: _FeralfileExhibitionV3.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV3Transfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV3Transfer)
				if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) ParseTransfer(log types.Log) (*FeralfileExhibitionV3Transfer, error) {
	event := new(FeralfileExhibitionV3Transfer)
	if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
